1:"$Sreact.fragment"
2:I[67315,["785","static/chunks/785-bf8eaad2e6817186.js","451","static/chunks/451-ff68bb1f8be23e5c.js","98","static/chunks/98-ceb6bd4957f64cef.js","108","static/chunks/108-145d964849b57510.js","177","static/chunks/app/layout-1f31a56c71888f2f.js"],"Provider"]
3:I[87555,[],""]
4:I[31295,[],""]
5:I[32176,["785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","335","static/chunks/app/%5Bslug%5D/error-ed750438367dde98.js"],"default"]
6:I[6874,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],""]
7:I[38567,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"Button"]
9:I[59665,[],"OutletBoundary"]
c:I[59665,[],"ViewportBoundary"]
e:I[59665,[],"MetadataBoundary"]
10:I[26614,[],""]
:HL["/reports/_next/static/css/9aa33c77ef4c0fa8.css","style"]
0:{"P":null,"b":"PKP_DFJej_V3t5uQy9efT","p":"/reports","c":["","794f022e-2086-48ca-8e49-d442049627c0",""],"i":false,"f":[[["",{"children":[["slug","794f022e-2086-48ca-8e49-d442049627c0","d"],{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/reports/_next/static/css/9aa33c77ef4c0fa8.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"suppressHydrationWarning":true,"lang":"ja","children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/reports/meta/icon.png","sizes":"any"}],false]}],["$","body",null,{"children":["$","$L2",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}]]}],{"children":[["slug","794f022e-2086-48ca-8e49-d442049627c0","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$5","errorStyles":[],"errorScripts":[],"template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","p",null,{"children":"ページが見つかりませんでした"}],["$","$L6",null,{"href":"/","children":["$","$L7",null,{"children":"トップに戻る"}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L8","$undefined",null,["$","$L9",null,{"children":["$La","$Lb",null]}]]}],{},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","ee-OU8n4L5ArOXGTOEDZn",{"children":[["$","$Lc",null,{"children":"$Ld"}],null]}],["$","$Le",null,{"children":"$Lf"}]]}],false]],"m":"$undefined","G":["$10","$undefined"],"s":false,"S":true}
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
a:null
11:I[90754,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"Header"]
12:I[81068,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"Box"]
13:I[17921,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"Heading"]
14:I[90310,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"Text"]
15:I[7684,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"Icon"]
16:I[68264,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"ClientContainer"]
22:I[91925,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"Analysis"]
23:I[91548,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"Separator"]
24:I[12498,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"About"]
25:I[38639,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"Stack"]
26:I[97377,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"HStack"]
27:I[30220,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"DrawerRoot"]
28:I[30220,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"DrawerBackdrop"]
29:I[30220,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"DrawerTrigger"]
2a:I[70318,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"Portal"]
2b:I[30220,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"DrawerPositioner"]
2c:I[30220,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"DrawerContent"]
2d:I[30220,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"DrawerHeader"]
2e:I[30220,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"DrawerTitle"]
2f:I[30220,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"DrawerBody"]
30:I[30220,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"DrawerActionTrigger"]
17:T13f1,import concurrent.futures
import json
import logging
import re

import pandas as pd
from tqdm import tqdm

from services.category_classification import classify_args
from services.llm import request_to_chat_openai
from services.parse_json_list import parse_response
from utils import update_progress

COMMA_AND_SPACE_AND_RIGHT_BRACKET = re.compile(r",\s*(\])")


def _validate_property_columns(property_columns: list[str], comments: pd.DataFrame) -> None:
    if not all(property in comments.columns for property in property_columns):
        raise ValueError(f"Properties {property_columns} not found in comments. Columns are {comments.columns}")


def extraction(config):
    dataset = config["output_dir"]
    path = f"outputs/{dataset}/args.csv"
    model = config["extraction"]["model"]
    prompt = config["extraction"]["prompt"]
    workers = config["extraction"]["workers"]
    limit = config["extraction"]["limit"]
    property_columns = config["extraction"]["properties"]

    # カラム名だけを読み込み、必要なカラムが含まれているか確認する
    comments = pd.read_csv(f"inputs/{config['input']}.csv", nrows=0)
    _validate_property_columns(property_columns, comments)
    # エラーが出なかった場合、すべての行を読み込む
    comments = pd.read_csv(
        f"inputs/{config['input']}.csv", usecols=["comment-id", "comment-body"] + config["extraction"]["properties"]
    )
    comment_ids = (comments["comment-id"].values)[:limit]
    comments.set_index("comment-id", inplace=True)
    results = pd.DataFrame()
    update_progress(config, total=len(comment_ids))

    argument_map = {}
    relation_rows = []

    for i in tqdm(range(0, len(comment_ids), workers)):
        batch = comment_ids[i : i + workers]
        batch_inputs = [comments.loc[id]["comment-body"] for id in batch]
        batch_results = extract_batch(batch_inputs, prompt, model, workers)

        for comment_id, extracted_args in zip(batch, batch_results, strict=False):
            for j, arg in enumerate(extracted_args):
                if arg not in argument_map:
                    # argumentテーブルに追加
                    arg_id = f"A{comment_id}_{j}"
                    argument_map[arg] = {
                        "arg-id": arg_id,
                        "argument": arg,
                    }
                else:
                    arg_id = argument_map[arg]["arg-id"]

                # relationテーブルにcommentとargの関係を追加
                relation_row = {
                    "arg-id": arg_id,
                    "comment-id": comment_id,
                }
                relation_rows.append(relation_row)

        update_progress(config, incr=len(batch))

    # DataFrame化
    results = pd.DataFrame(argument_map.values())
    relation_df = pd.DataFrame(relation_rows)

    if results.empty:
        raise RuntimeError("result is empty, maybe bad prompt")

    classification_categories = config["extraction"]["categories"]
    if classification_categories:
        results = classify_args(results, config, workers)

    results.to_csv(path, index=False)
    # comment-idとarg-idの関係を保存
    relation_df.to_csv(f"outputs/{dataset}/relations.csv", index=False)


logging.basicConfig(level=logging.ERROR)


def extract_batch(batch, prompt, model, workers):
    with concurrent.futures.ThreadPoolExecutor(max_workers=workers) as executor:
        futures_with_index = [
            (i, executor.submit(extract_arguments, input, prompt, model)) for i, input in enumerate(batch)
        ]

        done, not_done = concurrent.futures.wait([f for _, f in futures_with_index], timeout=30)
        results = [[] for _ in range(len(batch))]

        for _, future in futures_with_index:
            if future in not_done and not future.cancelled():
                future.cancel()

        for i, future in futures_with_index:
            if future in done:
                try:
                    result = future.result()
                    results[i] = result
                except Exception as e:
                    logging.error(f"Task {future} failed with error: {e}")
                    results[i] = []
        return results


def extract_by_llm(input, prompt, model):
    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": input},
    ]
    response = request_to_chat_openai(messages=messages, model=model)
    return response


def extract_arguments(input, prompt, model, retries=1):
    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": input},
    ]
    try:
        response = request_to_chat_openai(messages=messages, model=model, is_json=False)
        items = parse_response(response)
        items = filter(None, items)  # omit empty strings
        return items
    except json.decoder.JSONDecodeError as e:
        print("JSON error:", e)
        print("Input was:", input)
        print("Response was:", response)
        print("Silently giving up on trying to generate valid list.")
        return []
18:T1149,"""Cluster the arguments using UMAP + HDBSCAN and GPT-4."""

from importlib import import_module

import numpy as np
import pandas as pd
import scipy.cluster.hierarchy as sch
from sklearn.cluster import KMeans


def hierarchical_clustering(config):
    UMAP = import_module("umap").UMAP

    dataset = config["output_dir"]
    path = f"outputs/{dataset}/hierarchical_clusters.csv"
    arguments_df = pd.read_csv(f"outputs/{dataset}/args.csv", usecols=["arg-id", "argument"])
    embeddings_df = pd.read_pickle(f"outputs/{dataset}/embeddings.pkl")
    embeddings_array = np.asarray(embeddings_df["embedding"].values.tolist())
    cluster_nums = config["hierarchical_clustering"]["cluster_nums"]

    n_samples = embeddings_array.shape[0]
    # デフォルト設定は15
    default_n_neighbors = 15

    # テスト等サンプルが少なすぎる場合、n_neighborsの設定値を下げる
    if n_samples <= default_n_neighbors:
        n_neighbors = max(2, n_samples - 1)  # 最低2以上
    else:
        n_neighbors = default_n_neighbors

    umap_model = UMAP(random_state=42, n_components=2, n_neighbors=n_neighbors)
    # TODO 詳細エラーメッセージを加える
    # 以下のエラーの場合、おそらく元の意見件数が少なすぎることが原因
    # TypeError: Cannot use scipy.linalg.eigh for sparse A with k >= N. Use scipy.linalg.eigh(A.toarray()) or reduce k.
    umap_embeds = umap_model.fit_transform(embeddings_array)

    cluster_results = hierarchical_clustering_embeddings(
        umap_embeds=umap_embeds,
        cluster_nums=cluster_nums,
    )
    result_df = pd.DataFrame(
        {
            "arg-id": arguments_df["arg-id"],
            "argument": arguments_df["argument"],
            "x": umap_embeds[:, 0],
            "y": umap_embeds[:, 1],
        }
    )

    for cluster_level, final_labels in enumerate(cluster_results.values(), start=1):
        result_df[f"cluster-level-{cluster_level}-id"] = [f"{cluster_level}_{label}" for label in final_labels]

    result_df.to_csv(path, index=False)


def generate_cluster_count_list(min_clusters: int, max_clusters: int):
    cluster_counts = []
    current = min_clusters
    cluster_counts.append(current)

    if min_clusters == max_clusters:
        return cluster_counts

    while True:
        next_double = current * 2
        next_triple = current * 3

        if next_double >= max_clusters:
            if cluster_counts[-1] != max_clusters:
                cluster_counts.append(max_clusters)
            break

        # 次の倍はまだ max_clusters に収まるが、3倍だと超える
        # -> (次の倍は細かすぎるので)スキップして max_clusters に飛ぶ
        if next_triple > max_clusters:
            cluster_counts.append(max_clusters)
            break

        cluster_counts.append(next_double)
        current = next_double

    return cluster_counts


def merge_clusters_with_hierarchy(
    cluster_centers: np.ndarray,
    kmeans_labels: np.ndarray,
    umap_array: np.ndarray,
    n_cluster_cut: int,
):
    Z = sch.linkage(cluster_centers, method="ward")
    cluster_labels_merged = sch.fcluster(Z, t=n_cluster_cut, criterion="maxclust")

    n_samples = umap_array.shape[0]
    final_labels = np.zeros(n_samples, dtype=int)

    for i in range(n_samples):
        original_label = kmeans_labels[i]
        final_labels[i] = cluster_labels_merged[original_label]

    return final_labels


def hierarchical_clustering_embeddings(
    umap_embeds,
    cluster_nums,
):
    # 最大分割数でクラスタリングを実施
    print("start initial clustering")
    initial_cluster_num = cluster_nums[-1]
    kmeans_model = KMeans(n_clusters=initial_cluster_num, random_state=42)
    kmeans_model.fit(umap_embeds)
    print("end initial clustering")

    results = {}
    print("start hierarchical clustering")
    cluster_nums.sort()
    print(cluster_nums)
    for n_cluster_cut in cluster_nums[:-1]:
        print("n_cluster_cut: ", n_cluster_cut)
        final_labels = merge_clusters_with_hierarchy(
            cluster_centers=kmeans_model.cluster_centers_,
            kmeans_labels=kmeans_model.labels_,
            umap_array=umap_embeds,
            n_cluster_cut=n_cluster_cut,
        )
        results[n_cluster_cut] = final_labels

    results[initial_cluster_num] = kmeans_model.labels_
    print("end hierarchical clustering")

    return results
19:T142a,import json
from concurrent.futures import ThreadPoolExecutor
from functools import partial
from typing import TypedDict

import pandas as pd

from services.llm import request_to_chat_openai


class LabellingResult(TypedDict):
    """各クラスタのラベリング結果を表す型"""

    cluster_id: str  # クラスタのID
    label: str  # クラスタのラベル名
    description: str  # クラスタの説明文


def hierarchical_initial_labelling(config: dict) -> None:
    """階層的クラスタリングの初期ラベリングを実行する

    Args:
        config: 設定情報を含む辞書
            - output_dir: 出力ディレクトリ名
            - hierarchical_initial_labelling: 初期ラベリングの設定
                - sampling_num: サンプリング数
                - prompt: LLMへのプロンプト
                - model: 使用するLLMモデル名
                - workers: 並列処理のワーカー数
    """
    dataset = config["output_dir"]
    path = f"outputs/{dataset}/hierarchical_initial_labels.csv"
    clusters_argument_df = pd.read_csv(f"outputs/{dataset}/hierarchical_clusters.csv")

    cluster_id_columns = [col for col in clusters_argument_df.columns if col.startswith("cluster-level-")]
    initial_cluster_id_column = cluster_id_columns[-1]
    sampling_num = config["hierarchical_initial_labelling"]["sampling_num"]
    initial_labelling_prompt = config["hierarchical_initial_labelling"]["prompt"]
    model = config["hierarchical_initial_labelling"]["model"]
    workers = config["hierarchical_initial_labelling"]["workers"]

    initial_label_df = initial_labelling(
        initial_labelling_prompt,
        clusters_argument_df,
        sampling_num,
        model,
        workers,
    )
    print("start initial labelling")
    initial_clusters_argument_df = clusters_argument_df.merge(
        initial_label_df,
        left_on=initial_cluster_id_column,
        right_on="cluster_id",
        how="left",
    ).rename(
        columns={
            "label": f"{initial_cluster_id_column.replace('-id', '')}-label",
            "description": f"{initial_cluster_id_column.replace('-id', '')}-description",
        }
    )
    print("end initial labelling")
    initial_clusters_argument_df.to_csv(path, index=False)


def initial_labelling(
    prompt: str,
    clusters_df: pd.DataFrame,
    sampling_num: int,
    model: str,
    workers: int,
) -> pd.DataFrame:
    """各クラスタに対して初期ラベリングを実行する

    Args:
        prompt: LLMへのプロンプト
        clusters_df: クラスタリング結果のDataFrame
        sampling_num: 各クラスタからサンプリングする意見の数
        model: 使用するLLMモデル名
        workers: 並列処理のワーカー数

    Returns:
        各クラスタのラベリング結果を含むDataFrame
    """
    cluster_columns = [col for col in clusters_df.columns if col.startswith("cluster-level-")]
    initial_cluster_column = cluster_columns[-1]
    cluster_ids = clusters_df[initial_cluster_column].unique()
    process_func = partial(
        process_initial_labelling,
        df=clusters_df,
        prompt=prompt,
        sampling_num=sampling_num,
        target_column=initial_cluster_column,
        model=model,
    )
    with ThreadPoolExecutor(max_workers=workers) as executor:
        results = list(executor.map(process_func, cluster_ids))
    return pd.DataFrame(results)


def process_initial_labelling(
    cluster_id: str,
    df: pd.DataFrame,
    prompt: str,
    sampling_num: int,
    target_column: str,
    model: str,
) -> LabellingResult:
    """個別のクラスタに対してラベリングを実行する

    Args:
        cluster_id: 処理対象のクラスタID
        df: クラスタリング結果のDataFrame
        prompt: LLMへのプロンプト
        sampling_num: サンプリングする意見の数
        target_column: クラスタIDが格納されている列名
        model: 使用するLLMモデル名

    Returns:
        クラスタのラベリング結果
    """
    cluster_data = df[df[target_column] == cluster_id]
    sampling_num = min(sampling_num, len(cluster_data))
    cluster = cluster_data.sample(sampling_num)
    input = "\n".join(cluster["argument"].values)
    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": input},
    ]
    try:
        response = request_to_chat_openai(messages=messages, model=model, is_json=True)
        response_json = json.loads(response)
        return LabellingResult(
            cluster_id=cluster_id,
            label=response_json.get("label", "エラーでラベル名が取得できませんでした"),
            description=response_json.get("description", "エラーで解説が取得できませんでした"),
        )
    except Exception as e:
        print(e)
        return LabellingResult(
            cluster_id=cluster_id,
            label="エラーでラベル名が取得できませんでした",
            description="エラーで解説が取得できませんでした",
        )
1a:T2fa5,import json
from concurrent.futures import ThreadPoolExecutor
from dataclasses import dataclass
from functools import partial

import numpy as np
import pandas as pd
from tqdm import tqdm

from services.llm import request_to_chat_openai


@dataclass
class ClusterColumns:
    """同一階層のクラスター関連のカラム名を管理するクラス"""

    id: str
    label: str
    description: str

    @classmethod
    def from_id_column(cls, id_column: str) -> "ClusterColumns":
        """ID列名から関連するカラム名を生成"""
        return cls(
            id=id_column,
            label=id_column.replace("-id", "-label"),
            description=id_column.replace("-id", "-description"),
        )


@dataclass
class ClusterValues:
    """対象クラスタのlabel/descriptionを管理するクラス"""

    label: str
    description: str

    def to_prompt_text(self) -> str:
        return f"- {self.label}: {self.description}"


def hierarchical_merge_labelling(config: dict) -> None:
    """階層的クラスタリングの結果に対してマージラベリングを実行する

    Args:
        config: 設定情報を含む辞書
            - output_dir: 出力ディレクトリ名
            - hierarchical_merge_labelling: マージラベリングの設定
                - sampling_num: サンプリング数
                - prompt: LLMへのプロンプト
                - model: 使用するLLMモデル名
                - workers: 並列処理のワーカー数
    """
    dataset = config["output_dir"]
    merge_path = f"outputs/{dataset}/hierarchical_merge_labels.csv"
    clusters_df = pd.read_csv(f"outputs/{dataset}/hierarchical_initial_labels.csv")

    cluster_id_columns: list[str] = _filter_id_columns(clusters_df.columns)
    # ボトムクラスタのラベル・説明とクラスタid付きの各argumentを入力し、各階層のクラスタラベル・説明を生成し、argumentに付けたdfを作成
    merge_result_df = merge_labelling(
        clusters_df=clusters_df,
        cluster_id_columns=sorted(cluster_id_columns, reverse=True),
        config=config,
    )
    # 上記のdfから各クラスタのlevel, id, label, description, valueを取得してdfを作成
    melted_df = melt_cluster_data(merge_result_df)
    # 上記のdfに親子関係を追加
    parent_child_df = _build_parent_child_mapping(merge_result_df, cluster_id_columns)
    melted_df = melted_df.merge(parent_child_df, on=["level", "id"], how="left")
    density_df = calculate_cluster_density(melted_df, config)
    density_df.to_csv(merge_path, index=False)


def _build_parent_child_mapping(df: pd.DataFrame, cluster_id_columns: list[str]):
    """クラスタ間の親子関係をマッピングする

    Args:
        df: クラスタリング結果のDataFrame
        cluster_id_columns: クラスタIDのカラム名のリスト

    Returns:
        親子関係のマッピング情報を含むDataFrame
    """
    results = []
    top_cluster_column = cluster_id_columns[0]
    top_cluster_values = df[top_cluster_column].unique()
    for c in top_cluster_values:
        results.append(
            {
                "level": 1,
                "id": c,
                "parent": "0",  # aggregationで追加する全体クラスタのid
            }
        )

    for idx in range(len(cluster_id_columns) - 1):
        current_column = cluster_id_columns[idx]
        children_column = cluster_id_columns[idx + 1]
        current_level = current_column.replace("-id", "").replace("cluster-level-", "")
        # 現在のレベルのクラスタid
        current_cluster_values = df[current_column].unique()
        for current_id in current_cluster_values:
            children_ids = df.loc[df[current_column] == current_id, children_column].unique()
            for child_id in children_ids:
                results.append(
                    {
                        "level": int(current_level) + 1,
                        "id": child_id,
                        "parent": current_id,
                    }
                )
    return pd.DataFrame(results)


def _filter_id_columns(columns: list[str]) -> list[str]:
    """クラスタIDのカラム名をフィルタリングする

    Args:
        columns: 全カラム名のリスト

    Returns:
        クラスタIDのカラム名のリスト
    """
    return [col for col in columns if col.startswith("cluster-level-") and col.endswith("-id")]


def melt_cluster_data(df: pd.DataFrame) -> pd.DataFrame:
    """クラスタデータを行形式に変換する

    cluster-level-n-(id|label|description) を行形式 (level, id, label, description, value) にまとめる。
    [cluster-level-n-id, cluster-level-n-label, cluster-level-n-description] を [level, id, label, description, value(件数)] に変換する。

    Args:
        df: クラスタリング結果のDataFrame

    Returns:
        行形式に変換されたDataFrame
    """
    id_columns: list[str] = _filter_id_columns(df.columns)
    levels: set[int] = {int(col.replace("cluster-level-", "").replace("-id", "")) for col in id_columns}
    all_rows: list[dict] = []

    # levelごとに各クラスタの出現件数を集計・縦持ちにする
    for level in levels:
        cluster_columns = ClusterColumns.from_id_column(f"cluster-level-{level}-id")
        # クラスタidごとの件数集計
        level_count_df = df.groupby(cluster_columns.id).size().reset_index(name="value")

        level_unique_val_df = df[
            [cluster_columns.id, cluster_columns.label, cluster_columns.description]
        ].drop_duplicates()
        level_unique_val_df = level_unique_val_df.merge(level_count_df, on=cluster_columns.id, how="left")
        level_unique_vals = [
            {
                "level": level,
                "id": row[cluster_columns.id],
                "label": row[cluster_columns.label],
                "description": row[cluster_columns.description],
                "value": row["value"],
            }
            for _, row in level_unique_val_df.iterrows()
        ]
        all_rows.extend(level_unique_vals)
    return pd.DataFrame(all_rows)


def merge_labelling(clusters_df: pd.DataFrame, cluster_id_columns: list[str], config) -> pd.DataFrame:
    """階層的なクラスタのマージラベリングを実行する

    Args:
        clusters_df: クラスタリング結果のDataFrame
        cluster_id_columns: クラスタIDのカラム名のリスト
        config: 設定情報を含む辞書

    Returns:
        マージラベリング結果を含むDataFrame
    """
    for idx in tqdm(range(len(cluster_id_columns) - 1)):
        previous_columns = ClusterColumns.from_id_column(cluster_id_columns[idx])
        current_columns = ClusterColumns.from_id_column(cluster_id_columns[idx + 1])

        process_fn = partial(
            process_merge_labelling,
            result_df=clusters_df,
            current_columns=current_columns,
            previous_columns=previous_columns,
            config=config,
        )

        current_cluster_ids = sorted(clusters_df[current_columns.id].unique())
        with ThreadPoolExecutor(max_workers=config["hierarchical_merge_labelling"]["workers"]) as executor:
            responses = list(
                tqdm(
                    executor.map(process_fn, current_cluster_ids),
                    total=len(current_cluster_ids),
                )
            )

        current_result_df = pd.DataFrame(responses)
        clusters_df = clusters_df.merge(current_result_df, on=[current_columns.id])
    return clusters_df


def process_merge_labelling(
    target_cluster_id: str,
    result_df: pd.DataFrame,
    current_columns: ClusterColumns,
    previous_columns: ClusterColumns,
    config,
):
    """個別のクラスタに対してマージラベリングを実行する

    Args:
        target_cluster_id: 処理対象のクラスタID
        result_df: クラスタリング結果のDataFrame
        current_columns: 現在のレベルのカラム情報
        previous_columns: 前のレベルのカラム情報
        config: 設定情報を含む辞書

    Returns:
        マージラベリング結果を含む辞書
    """

    def filter_previous_values(df: pd.DataFrame, previous_columns: ClusterColumns) -> list[ClusterValues]:
        """前のレベルのクラスタ情報を取得する"""
        previous_records = df[df[current_columns.id] == target_cluster_id][
            [previous_columns.label, previous_columns.description]
        ].drop_duplicates()
        previous_values = [
            ClusterValues(
                label=row[previous_columns.label],
                description=row[previous_columns.description],
            )
            for _, row in previous_records.iterrows()
        ]
        return previous_values

    previous_values = filter_previous_values(result_df, previous_columns)
    if len(previous_values) == 1:
        return {
            current_columns.id: target_cluster_id,
            current_columns.label: previous_values[0].label,
            current_columns.description: previous_values[0].description,
        }
    elif len(previous_values) == 0:
        raise ValueError(f"クラスタ {target_cluster_id} には前のレベルのクラスタが存在しません。")

    current_cluster_data = result_df[result_df[current_columns.id] == target_cluster_id]
    sampling_num = min(
        config["hierarchical_merge_labelling"]["sampling_num"],
        len(current_cluster_data),
    )
    sampled_data = current_cluster_data.sample(sampling_num)
    sampled_argument_text = "\n".join(sampled_data["argument"].values)
    cluster_text = "\n".join([value.to_prompt_text() for value in previous_values])
    messages = [
        {"role": "system", "content": config["hierarchical_merge_labelling"]["prompt"]},
        {
            "role": "user",
            "content": "クラスタラベル\n" + cluster_text + "\n" + "クラスタの意見\n" + sampled_argument_text,
        },
    ]
    try:
        response = request_to_chat_openai(
            messages=messages,
            model=config["hierarchical_merge_labelling"]["model"],
            is_json=True,
        )
        response_json = json.loads(response)
        return {
            current_columns.id: target_cluster_id,
            current_columns.label: response_json.get("label", "エラーでラベル名が取得できませんでした"),
            current_columns.description: response_json.get("description", "エラーで解説が取得できませんでした"),
        }
    except Exception as e:
        print(f"エラーが発生しました: {e}")
        return {
            current_columns.id: target_cluster_id,
            current_columns.label: "エラーでラベル名が取得できませんでした",
            current_columns.description: "エラーで解説が取得できませんでした",
        }


def calculate_cluster_density(melted_df: pd.DataFrame, config: dict):
    """クラスタ内の密度計算"""
    hierarchical_cluster_df = pd.read_csv(f"outputs/{config['output_dir']}/hierarchical_clusters.csv")

    densities = []
    for level, c_id in zip(melted_df["level"], melted_df["id"], strict=False):
        cluster_embeds = hierarchical_cluster_df[hierarchical_cluster_df[f"cluster-level-{level}-id"] == c_id][
            ["x", "y"]
        ].values
        density = calculate_density(cluster_embeds)
        densities.append(density)

    # 密度のランクを計算
    melted_df["density"] = densities
    melted_df["density_rank"] = melted_df.groupby("level")["density"].rank(ascending=False, method="first")
    melted_df["density_rank_percentile"] = melted_df.groupby("level")["density_rank"].transform(lambda x: x / len(x))
    return melted_df


def calculate_density(embeds: np.ndarray):
    """平均距離に基づいて密度を計算"""
    center = np.mean(embeds, axis=0)
    distances = np.linalg.norm(embeds - center, axis=1)
    avg_distance = np.mean(distances)
    density = 1 / (avg_distance + 1e-10)
    return density
1b:T4c0,"""Create summaries for the clusters."""

import pandas as pd

from services.llm import request_to_chat_openai


def hierarchical_overview(config):
    dataset = config["output_dir"]
    path = f"outputs/{dataset}/hierarchical_overview.txt"

    hierarchical_label_df = pd.read_csv(f"outputs/{dataset}/hierarchical_merge_labels.csv")

    prompt = config["hierarchical_overview"]["prompt"]
    model = config["hierarchical_overview"]["model"]

    # TODO: level1で固定にしているが、設定で変えられるようにする
    target_level = 1
    target_records = hierarchical_label_df[hierarchical_label_df["level"] == target_level]
    ids = target_records["id"].to_list()
    labels = target_records["label"].to_list()
    descriptions = target_records["description"].to_list()
    target_records.set_index("id", inplace=True)

    input = ""
    for i, _ in enumerate(ids):
        input += f"# Cluster {i}/{len(ids)}: {labels[i]}\n\n"
        input += descriptions[i] + "\n\n"

    messages = [{"role": "user", "content": prompt}, {"role": "user", "content": input}]
    response = request_to_chat_openai(messages=messages, model=model)

    with open(path, "w") as file:
        file.write(response)
1c:T22d3,"""Generate a convenient JSON output file."""

import json
from collections import defaultdict
from pathlib import Path
from typing import TypedDict

import pandas as pd

ROOT_DIR = Path(__file__).parent.parent.parent.parent
CONFIG_DIR = ROOT_DIR / "scatter" / "pipeline" / "configs"


class Argument(TypedDict):
    arg_id: str
    argument: str
    comment_id: str
    x: float
    y: float
    p: float
    cluster_ids: list[str]


class Cluster(TypedDict):
    level: int
    id: str
    label: str
    takeaway: str
    value: int
    parent: str
    density_rank_percentile: float | None


def hierarchical_aggregation(config):
    path = f"outputs/{config['output_dir']}/hierarchical_result.json"
    results = {
        "arguments": [],
        "clusters": [],
        "comments": {},
        "propertyMap": {},
        "translations": {},
        "overview": "",
        "config": config,
    }

    arguments = pd.read_csv(f"outputs/{config['output_dir']}/args.csv")
    arguments.set_index("arg-id", inplace=True)
    arg_num = len(arguments)
    relation_df = pd.read_csv(f"outputs/{config['output_dir']}/relations.csv")
    comments = pd.read_csv(f"inputs/{config['input']}.csv")
    clusters = pd.read_csv(f"outputs/{config['output_dir']}/hierarchical_clusters.csv")
    labels = pd.read_csv(f"outputs/{config['output_dir']}/hierarchical_merge_labels.csv")

    hidden_properties_map: dict[str, list[str]] = config["hierarchical_aggregation"]["hidden_properties"]

    results["arguments"] = _build_arguments(clusters)
    results["clusters"] = _build_cluster_value(labels, arg_num)
    # NOTE: 属性に応じたコメントフィルタ機能が実装されておらず、全てのコメントが含まれてしまうので、コメントアウト
    # results["comments"] = _build_comments_value(
    #     comments, arguments, hidden_properties_map
    # )
    results["comment_num"] = len(comments)
    results["translations"] = _build_translations(config)
    # 属性情報のカラムは、元データに対して指定したカラムとclassificationするカテゴリを合わせたもの
    results["propertyMap"] = _build_property_map(arguments, hidden_properties_map, config)

    with open(f"outputs/{config['output_dir']}/hierarchical_overview.txt") as f:
        overview = f.read()
    print("overview")
    print(overview)
    results["overview"] = overview

    with open(path, "w") as file:
        json.dump(results, file, indent=2, ensure_ascii=False)
    # TODO: サンプリングロジックを実装したいが、現状は全件抽出
    create_custom_intro(config)
    if config["is_pubcom"]:
        add_original_comments(labels, arguments, relation_df, clusters, config)


def create_custom_intro(config):
    dataset = config["output_dir"]
    args_path = f"outputs/{dataset}/args.csv"
    comments = pd.read_csv(f"inputs/{config['input']}.csv")
    result_path = f"outputs/{dataset}/hierarchical_result.json"

    input_count = len(comments)
    args_count = len(pd.read_csv(args_path))
    processed_num = min(input_count, config["extraction"]["limit"])

    print(f"Input count: {input_count}")
    print(f"Args count: {args_count}")

    base_custom_intro = """{intro}
分析対象となったデータの件数は{processed_num}件で、これらのデータに対してOpenAI APIを用いて{args_count}件の意見（議論）を抽出し、クラスタリングを行った。
"""

    intro = config["intro"]
    custom_intro = base_custom_intro.format(intro=intro, processed_num=processed_num, args_count=args_count)

    with open(result_path) as f:
        result = json.load(f)
    result["config"]["intro"] = custom_intro
    with open(result_path, "w") as f:
        json.dump(result, f, indent=2, ensure_ascii=False)


def add_original_comments(labels, arguments, relation_df, clusters, config):
    # 大カテゴリ（cluster-level-1）に該当するラベルだけ抽出
    labels_lv1 = labels[labels["level"] == 1][["id", "label"]].rename(
        columns={"id": "cluster-level-1-id", "label": "category_label"}
    )

    # arguments と clusters をマージ（カテゴリ情報付与）
    merged = arguments.merge(clusters[["arg-id", "cluster-level-1-id"]], on="arg-id").merge(
        labels_lv1, on="cluster-level-1-id", how="left"
    )

    # relation_df と結合
    merged = merged.merge(relation_df, on="arg-id", how="left")

    # 元コメント取得
    comments = pd.read_csv(f"inputs/{config['input']}.csv")
    comments["comment-id"] = comments["comment-id"].astype(str)
    merged["comment-id"] = merged["comment-id"].astype(str)

    # 元コメント本文などとマージ
    final_df = merged.merge(comments, on="comment-id", how="left")

    # 必要カラムのみ整形
    final_cols = ["comment-id", "comment-body", "arg-id", "argument", "cluster-level-1-id", "category_label"]
    for col in ["source", "url"]:
        if col in comments.columns:
            final_cols.append(col)

    final_df = final_df[final_cols]
    final_df = final_df.rename(
        columns={
            "cluster-level-1-id": "category_id",
            "category_label": "category",
            "arg-id": "arg_id",
            "argument": "argument",
            "comment-body": "original-comment",
        }
    )

    # 保存
    final_df.to_csv(f"outputs/{config['output_dir']}/final_result_with_comments.csv", index=False)


def _build_arguments(clusters: pd.DataFrame) -> list[Argument]:
    cluster_columns = [col for col in clusters.columns if col.startswith("cluster-level-") and "id" in col]

    arguments: list[Argument] = []
    for _, row in clusters.iterrows():
        cluster_ids = ["0"]
        for cluster_column in cluster_columns:
            cluster_ids.append(row[cluster_column])
        argument: Argument = {
            "arg_id": row["arg-id"],
            "argument": row["argument"],
            "x": row["x"],
            "y": row["y"],
            "p": 0,  # NOTE: 一旦全部0でいれる
            "cluster_ids": cluster_ids,
        }
        arguments.append(argument)
    return arguments


def _build_cluster_value(melted_labels: pd.DataFrame, total_num: int) -> list[Cluster]:
    results: list[Cluster] = [
        Cluster(
            level=0,
            id="0",
            label="全体",
            takeaway="",
            value=total_num,
            parent="",
            density_rank_percentile=0,
        )
    ]

    for _, melted_label in melted_labels.iterrows():
        cluster_value = Cluster(
            level=melted_label["level"],
            id=melted_label["id"],
            label=melted_label["label"],
            takeaway=melted_label["description"],
            value=melted_label["value"],
            parent=melted_label.get("parent", "全体"),
            density_rank_percentile=melted_label.get("density_rank_percentile"),
        )
        results.append(cluster_value)
    return results


def _build_comments_value(
    comments: pd.DataFrame,
    arguments: pd.DataFrame,
    hidden_properties_map: dict[str, list[str]],
):
    comment_dict: dict[str, dict[str, str]] = {}
    useful_comment_ids = set(arguments["comment-id"].values)
    for _, row in comments.iterrows():
        id = row["comment-id"]
        if id in useful_comment_ids:
            res = {"comment": row["comment-body"]}
            should_skip = any(row[prop] in hidden_values for prop, hidden_values in hidden_properties_map.items())
            if should_skip:
                continue
            comment_dict[str(id)] = res

    return comment_dict


def _build_translations(config):
    languages = list(config.get("translation", {}).get("languages", []))
    if len(languages) > 0:
        with open(f"outputs/{config['output_dir']}/translations.json") as f:
            translations = f.read()
        return json.loads(translations)
    return {}


def _build_property_map(
    arguments: pd.DataFrame, hidden_properties_map: dict[str, list[str]], config: dict
) -> dict[str, dict[str, str]]:
    property_columns = list(hidden_properties_map.keys()) + list(config["extraction"]["categories"].keys())
    property_map = defaultdict(dict)

    # 指定された property_columns が arguments に存在するかチェック
    missing_cols = [col for col in property_columns if col not in arguments.columns]
    if missing_cols:
        raise ValueError(
            f"指定されたカラム {missing_cols} が args.csv に存在しません。"
            "設定ファイルaggregation / hidden_propertiesから該当カラムを取り除いてください。"
        )

    for prop in property_columns:
        for arg_id, row in arguments.iterrows():
            # LLMによるcategory classificationがうまく行かず、NaNの場合はNoneにする
            property_map[prop][arg_id] = row[prop] if not pd.isna(row[prop]) else None
    return property_map
1d:T13f1,import concurrent.futures
import json
import logging
import re

import pandas as pd
from tqdm import tqdm

from services.category_classification import classify_args
from services.llm import request_to_chat_openai
from services.parse_json_list import parse_response
from utils import update_progress

COMMA_AND_SPACE_AND_RIGHT_BRACKET = re.compile(r",\s*(\])")


def _validate_property_columns(property_columns: list[str], comments: pd.DataFrame) -> None:
    if not all(property in comments.columns for property in property_columns):
        raise ValueError(f"Properties {property_columns} not found in comments. Columns are {comments.columns}")


def extraction(config):
    dataset = config["output_dir"]
    path = f"outputs/{dataset}/args.csv"
    model = config["extraction"]["model"]
    prompt = config["extraction"]["prompt"]
    workers = config["extraction"]["workers"]
    limit = config["extraction"]["limit"]
    property_columns = config["extraction"]["properties"]

    # カラム名だけを読み込み、必要なカラムが含まれているか確認する
    comments = pd.read_csv(f"inputs/{config['input']}.csv", nrows=0)
    _validate_property_columns(property_columns, comments)
    # エラーが出なかった場合、すべての行を読み込む
    comments = pd.read_csv(
        f"inputs/{config['input']}.csv", usecols=["comment-id", "comment-body"] + config["extraction"]["properties"]
    )
    comment_ids = (comments["comment-id"].values)[:limit]
    comments.set_index("comment-id", inplace=True)
    results = pd.DataFrame()
    update_progress(config, total=len(comment_ids))

    argument_map = {}
    relation_rows = []

    for i in tqdm(range(0, len(comment_ids), workers)):
        batch = comment_ids[i : i + workers]
        batch_inputs = [comments.loc[id]["comment-body"] for id in batch]
        batch_results = extract_batch(batch_inputs, prompt, model, workers)

        for comment_id, extracted_args in zip(batch, batch_results, strict=False):
            for j, arg in enumerate(extracted_args):
                if arg not in argument_map:
                    # argumentテーブルに追加
                    arg_id = f"A{comment_id}_{j}"
                    argument_map[arg] = {
                        "arg-id": arg_id,
                        "argument": arg,
                    }
                else:
                    arg_id = argument_map[arg]["arg-id"]

                # relationテーブルにcommentとargの関係を追加
                relation_row = {
                    "arg-id": arg_id,
                    "comment-id": comment_id,
                }
                relation_rows.append(relation_row)

        update_progress(config, incr=len(batch))

    # DataFrame化
    results = pd.DataFrame(argument_map.values())
    relation_df = pd.DataFrame(relation_rows)

    if results.empty:
        raise RuntimeError("result is empty, maybe bad prompt")

    classification_categories = config["extraction"]["categories"]
    if classification_categories:
        results = classify_args(results, config, workers)

    results.to_csv(path, index=False)
    # comment-idとarg-idの関係を保存
    relation_df.to_csv(f"outputs/{dataset}/relations.csv", index=False)


logging.basicConfig(level=logging.ERROR)


def extract_batch(batch, prompt, model, workers):
    with concurrent.futures.ThreadPoolExecutor(max_workers=workers) as executor:
        futures_with_index = [
            (i, executor.submit(extract_arguments, input, prompt, model)) for i, input in enumerate(batch)
        ]

        done, not_done = concurrent.futures.wait([f for _, f in futures_with_index], timeout=30)
        results = [[] for _ in range(len(batch))]

        for _, future in futures_with_index:
            if future in not_done and not future.cancelled():
                future.cancel()

        for i, future in futures_with_index:
            if future in done:
                try:
                    result = future.result()
                    results[i] = result
                except Exception as e:
                    logging.error(f"Task {future} failed with error: {e}")
                    results[i] = []
        return results


def extract_by_llm(input, prompt, model):
    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": input},
    ]
    response = request_to_chat_openai(messages=messages, model=model)
    return response


def extract_arguments(input, prompt, model, retries=1):
    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": input},
    ]
    try:
        response = request_to_chat_openai(messages=messages, model=model, is_json=False)
        items = parse_response(response)
        items = filter(None, items)  # omit empty strings
        return items
    except json.decoder.JSONDecodeError as e:
        print("JSON error:", e)
        print("Input was:", input)
        print("Response was:", response)
        print("Silently giving up on trying to generate valid list.")
        return []
1e:T1149,"""Cluster the arguments using UMAP + HDBSCAN and GPT-4."""

from importlib import import_module

import numpy as np
import pandas as pd
import scipy.cluster.hierarchy as sch
from sklearn.cluster import KMeans


def hierarchical_clustering(config):
    UMAP = import_module("umap").UMAP

    dataset = config["output_dir"]
    path = f"outputs/{dataset}/hierarchical_clusters.csv"
    arguments_df = pd.read_csv(f"outputs/{dataset}/args.csv", usecols=["arg-id", "argument"])
    embeddings_df = pd.read_pickle(f"outputs/{dataset}/embeddings.pkl")
    embeddings_array = np.asarray(embeddings_df["embedding"].values.tolist())
    cluster_nums = config["hierarchical_clustering"]["cluster_nums"]

    n_samples = embeddings_array.shape[0]
    # デフォルト設定は15
    default_n_neighbors = 15

    # テスト等サンプルが少なすぎる場合、n_neighborsの設定値を下げる
    if n_samples <= default_n_neighbors:
        n_neighbors = max(2, n_samples - 1)  # 最低2以上
    else:
        n_neighbors = default_n_neighbors

    umap_model = UMAP(random_state=42, n_components=2, n_neighbors=n_neighbors)
    # TODO 詳細エラーメッセージを加える
    # 以下のエラーの場合、おそらく元の意見件数が少なすぎることが原因
    # TypeError: Cannot use scipy.linalg.eigh for sparse A with k >= N. Use scipy.linalg.eigh(A.toarray()) or reduce k.
    umap_embeds = umap_model.fit_transform(embeddings_array)

    cluster_results = hierarchical_clustering_embeddings(
        umap_embeds=umap_embeds,
        cluster_nums=cluster_nums,
    )
    result_df = pd.DataFrame(
        {
            "arg-id": arguments_df["arg-id"],
            "argument": arguments_df["argument"],
            "x": umap_embeds[:, 0],
            "y": umap_embeds[:, 1],
        }
    )

    for cluster_level, final_labels in enumerate(cluster_results.values(), start=1):
        result_df[f"cluster-level-{cluster_level}-id"] = [f"{cluster_level}_{label}" for label in final_labels]

    result_df.to_csv(path, index=False)


def generate_cluster_count_list(min_clusters: int, max_clusters: int):
    cluster_counts = []
    current = min_clusters
    cluster_counts.append(current)

    if min_clusters == max_clusters:
        return cluster_counts

    while True:
        next_double = current * 2
        next_triple = current * 3

        if next_double >= max_clusters:
            if cluster_counts[-1] != max_clusters:
                cluster_counts.append(max_clusters)
            break

        # 次の倍はまだ max_clusters に収まるが、3倍だと超える
        # -> (次の倍は細かすぎるので)スキップして max_clusters に飛ぶ
        if next_triple > max_clusters:
            cluster_counts.append(max_clusters)
            break

        cluster_counts.append(next_double)
        current = next_double

    return cluster_counts


def merge_clusters_with_hierarchy(
    cluster_centers: np.ndarray,
    kmeans_labels: np.ndarray,
    umap_array: np.ndarray,
    n_cluster_cut: int,
):
    Z = sch.linkage(cluster_centers, method="ward")
    cluster_labels_merged = sch.fcluster(Z, t=n_cluster_cut, criterion="maxclust")

    n_samples = umap_array.shape[0]
    final_labels = np.zeros(n_samples, dtype=int)

    for i in range(n_samples):
        original_label = kmeans_labels[i]
        final_labels[i] = cluster_labels_merged[original_label]

    return final_labels


def hierarchical_clustering_embeddings(
    umap_embeds,
    cluster_nums,
):
    # 最大分割数でクラスタリングを実施
    print("start initial clustering")
    initial_cluster_num = cluster_nums[-1]
    kmeans_model = KMeans(n_clusters=initial_cluster_num, random_state=42)
    kmeans_model.fit(umap_embeds)
    print("end initial clustering")

    results = {}
    print("start hierarchical clustering")
    cluster_nums.sort()
    print(cluster_nums)
    for n_cluster_cut in cluster_nums[:-1]:
        print("n_cluster_cut: ", n_cluster_cut)
        final_labels = merge_clusters_with_hierarchy(
            cluster_centers=kmeans_model.cluster_centers_,
            kmeans_labels=kmeans_model.labels_,
            umap_array=umap_embeds,
            n_cluster_cut=n_cluster_cut,
        )
        results[n_cluster_cut] = final_labels

    results[initial_cluster_num] = kmeans_model.labels_
    print("end hierarchical clustering")

    return results
1f:T142a,import json
from concurrent.futures import ThreadPoolExecutor
from functools import partial
from typing import TypedDict

import pandas as pd

from services.llm import request_to_chat_openai


class LabellingResult(TypedDict):
    """各クラスタのラベリング結果を表す型"""

    cluster_id: str  # クラスタのID
    label: str  # クラスタのラベル名
    description: str  # クラスタの説明文


def hierarchical_initial_labelling(config: dict) -> None:
    """階層的クラスタリングの初期ラベリングを実行する

    Args:
        config: 設定情報を含む辞書
            - output_dir: 出力ディレクトリ名
            - hierarchical_initial_labelling: 初期ラベリングの設定
                - sampling_num: サンプリング数
                - prompt: LLMへのプロンプト
                - model: 使用するLLMモデル名
                - workers: 並列処理のワーカー数
    """
    dataset = config["output_dir"]
    path = f"outputs/{dataset}/hierarchical_initial_labels.csv"
    clusters_argument_df = pd.read_csv(f"outputs/{dataset}/hierarchical_clusters.csv")

    cluster_id_columns = [col for col in clusters_argument_df.columns if col.startswith("cluster-level-")]
    initial_cluster_id_column = cluster_id_columns[-1]
    sampling_num = config["hierarchical_initial_labelling"]["sampling_num"]
    initial_labelling_prompt = config["hierarchical_initial_labelling"]["prompt"]
    model = config["hierarchical_initial_labelling"]["model"]
    workers = config["hierarchical_initial_labelling"]["workers"]

    initial_label_df = initial_labelling(
        initial_labelling_prompt,
        clusters_argument_df,
        sampling_num,
        model,
        workers,
    )
    print("start initial labelling")
    initial_clusters_argument_df = clusters_argument_df.merge(
        initial_label_df,
        left_on=initial_cluster_id_column,
        right_on="cluster_id",
        how="left",
    ).rename(
        columns={
            "label": f"{initial_cluster_id_column.replace('-id', '')}-label",
            "description": f"{initial_cluster_id_column.replace('-id', '')}-description",
        }
    )
    print("end initial labelling")
    initial_clusters_argument_df.to_csv(path, index=False)


def initial_labelling(
    prompt: str,
    clusters_df: pd.DataFrame,
    sampling_num: int,
    model: str,
    workers: int,
) -> pd.DataFrame:
    """各クラスタに対して初期ラベリングを実行する

    Args:
        prompt: LLMへのプロンプト
        clusters_df: クラスタリング結果のDataFrame
        sampling_num: 各クラスタからサンプリングする意見の数
        model: 使用するLLMモデル名
        workers: 並列処理のワーカー数

    Returns:
        各クラスタのラベリング結果を含むDataFrame
    """
    cluster_columns = [col for col in clusters_df.columns if col.startswith("cluster-level-")]
    initial_cluster_column = cluster_columns[-1]
    cluster_ids = clusters_df[initial_cluster_column].unique()
    process_func = partial(
        process_initial_labelling,
        df=clusters_df,
        prompt=prompt,
        sampling_num=sampling_num,
        target_column=initial_cluster_column,
        model=model,
    )
    with ThreadPoolExecutor(max_workers=workers) as executor:
        results = list(executor.map(process_func, cluster_ids))
    return pd.DataFrame(results)


def process_initial_labelling(
    cluster_id: str,
    df: pd.DataFrame,
    prompt: str,
    sampling_num: int,
    target_column: str,
    model: str,
) -> LabellingResult:
    """個別のクラスタに対してラベリングを実行する

    Args:
        cluster_id: 処理対象のクラスタID
        df: クラスタリング結果のDataFrame
        prompt: LLMへのプロンプト
        sampling_num: サンプリングする意見の数
        target_column: クラスタIDが格納されている列名
        model: 使用するLLMモデル名

    Returns:
        クラスタのラベリング結果
    """
    cluster_data = df[df[target_column] == cluster_id]
    sampling_num = min(sampling_num, len(cluster_data))
    cluster = cluster_data.sample(sampling_num)
    input = "\n".join(cluster["argument"].values)
    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": input},
    ]
    try:
        response = request_to_chat_openai(messages=messages, model=model, is_json=True)
        response_json = json.loads(response)
        return LabellingResult(
            cluster_id=cluster_id,
            label=response_json.get("label", "エラーでラベル名が取得できませんでした"),
            description=response_json.get("description", "エラーで解説が取得できませんでした"),
        )
    except Exception as e:
        print(e)
        return LabellingResult(
            cluster_id=cluster_id,
            label="エラーでラベル名が取得できませんでした",
            description="エラーで解説が取得できませんでした",
        )
20:T2fa5,import json
from concurrent.futures import ThreadPoolExecutor
from dataclasses import dataclass
from functools import partial

import numpy as np
import pandas as pd
from tqdm import tqdm

from services.llm import request_to_chat_openai


@dataclass
class ClusterColumns:
    """同一階層のクラスター関連のカラム名を管理するクラス"""

    id: str
    label: str
    description: str

    @classmethod
    def from_id_column(cls, id_column: str) -> "ClusterColumns":
        """ID列名から関連するカラム名を生成"""
        return cls(
            id=id_column,
            label=id_column.replace("-id", "-label"),
            description=id_column.replace("-id", "-description"),
        )


@dataclass
class ClusterValues:
    """対象クラスタのlabel/descriptionを管理するクラス"""

    label: str
    description: str

    def to_prompt_text(self) -> str:
        return f"- {self.label}: {self.description}"


def hierarchical_merge_labelling(config: dict) -> None:
    """階層的クラスタリングの結果に対してマージラベリングを実行する

    Args:
        config: 設定情報を含む辞書
            - output_dir: 出力ディレクトリ名
            - hierarchical_merge_labelling: マージラベリングの設定
                - sampling_num: サンプリング数
                - prompt: LLMへのプロンプト
                - model: 使用するLLMモデル名
                - workers: 並列処理のワーカー数
    """
    dataset = config["output_dir"]
    merge_path = f"outputs/{dataset}/hierarchical_merge_labels.csv"
    clusters_df = pd.read_csv(f"outputs/{dataset}/hierarchical_initial_labels.csv")

    cluster_id_columns: list[str] = _filter_id_columns(clusters_df.columns)
    # ボトムクラスタのラベル・説明とクラスタid付きの各argumentを入力し、各階層のクラスタラベル・説明を生成し、argumentに付けたdfを作成
    merge_result_df = merge_labelling(
        clusters_df=clusters_df,
        cluster_id_columns=sorted(cluster_id_columns, reverse=True),
        config=config,
    )
    # 上記のdfから各クラスタのlevel, id, label, description, valueを取得してdfを作成
    melted_df = melt_cluster_data(merge_result_df)
    # 上記のdfに親子関係を追加
    parent_child_df = _build_parent_child_mapping(merge_result_df, cluster_id_columns)
    melted_df = melted_df.merge(parent_child_df, on=["level", "id"], how="left")
    density_df = calculate_cluster_density(melted_df, config)
    density_df.to_csv(merge_path, index=False)


def _build_parent_child_mapping(df: pd.DataFrame, cluster_id_columns: list[str]):
    """クラスタ間の親子関係をマッピングする

    Args:
        df: クラスタリング結果のDataFrame
        cluster_id_columns: クラスタIDのカラム名のリスト

    Returns:
        親子関係のマッピング情報を含むDataFrame
    """
    results = []
    top_cluster_column = cluster_id_columns[0]
    top_cluster_values = df[top_cluster_column].unique()
    for c in top_cluster_values:
        results.append(
            {
                "level": 1,
                "id": c,
                "parent": "0",  # aggregationで追加する全体クラスタのid
            }
        )

    for idx in range(len(cluster_id_columns) - 1):
        current_column = cluster_id_columns[idx]
        children_column = cluster_id_columns[idx + 1]
        current_level = current_column.replace("-id", "").replace("cluster-level-", "")
        # 現在のレベルのクラスタid
        current_cluster_values = df[current_column].unique()
        for current_id in current_cluster_values:
            children_ids = df.loc[df[current_column] == current_id, children_column].unique()
            for child_id in children_ids:
                results.append(
                    {
                        "level": int(current_level) + 1,
                        "id": child_id,
                        "parent": current_id,
                    }
                )
    return pd.DataFrame(results)


def _filter_id_columns(columns: list[str]) -> list[str]:
    """クラスタIDのカラム名をフィルタリングする

    Args:
        columns: 全カラム名のリスト

    Returns:
        クラスタIDのカラム名のリスト
    """
    return [col for col in columns if col.startswith("cluster-level-") and col.endswith("-id")]


def melt_cluster_data(df: pd.DataFrame) -> pd.DataFrame:
    """クラスタデータを行形式に変換する

    cluster-level-n-(id|label|description) を行形式 (level, id, label, description, value) にまとめる。
    [cluster-level-n-id, cluster-level-n-label, cluster-level-n-description] を [level, id, label, description, value(件数)] に変換する。

    Args:
        df: クラスタリング結果のDataFrame

    Returns:
        行形式に変換されたDataFrame
    """
    id_columns: list[str] = _filter_id_columns(df.columns)
    levels: set[int] = {int(col.replace("cluster-level-", "").replace("-id", "")) for col in id_columns}
    all_rows: list[dict] = []

    # levelごとに各クラスタの出現件数を集計・縦持ちにする
    for level in levels:
        cluster_columns = ClusterColumns.from_id_column(f"cluster-level-{level}-id")
        # クラスタidごとの件数集計
        level_count_df = df.groupby(cluster_columns.id).size().reset_index(name="value")

        level_unique_val_df = df[
            [cluster_columns.id, cluster_columns.label, cluster_columns.description]
        ].drop_duplicates()
        level_unique_val_df = level_unique_val_df.merge(level_count_df, on=cluster_columns.id, how="left")
        level_unique_vals = [
            {
                "level": level,
                "id": row[cluster_columns.id],
                "label": row[cluster_columns.label],
                "description": row[cluster_columns.description],
                "value": row["value"],
            }
            for _, row in level_unique_val_df.iterrows()
        ]
        all_rows.extend(level_unique_vals)
    return pd.DataFrame(all_rows)


def merge_labelling(clusters_df: pd.DataFrame, cluster_id_columns: list[str], config) -> pd.DataFrame:
    """階層的なクラスタのマージラベリングを実行する

    Args:
        clusters_df: クラスタリング結果のDataFrame
        cluster_id_columns: クラスタIDのカラム名のリスト
        config: 設定情報を含む辞書

    Returns:
        マージラベリング結果を含むDataFrame
    """
    for idx in tqdm(range(len(cluster_id_columns) - 1)):
        previous_columns = ClusterColumns.from_id_column(cluster_id_columns[idx])
        current_columns = ClusterColumns.from_id_column(cluster_id_columns[idx + 1])

        process_fn = partial(
            process_merge_labelling,
            result_df=clusters_df,
            current_columns=current_columns,
            previous_columns=previous_columns,
            config=config,
        )

        current_cluster_ids = sorted(clusters_df[current_columns.id].unique())
        with ThreadPoolExecutor(max_workers=config["hierarchical_merge_labelling"]["workers"]) as executor:
            responses = list(
                tqdm(
                    executor.map(process_fn, current_cluster_ids),
                    total=len(current_cluster_ids),
                )
            )

        current_result_df = pd.DataFrame(responses)
        clusters_df = clusters_df.merge(current_result_df, on=[current_columns.id])
    return clusters_df


def process_merge_labelling(
    target_cluster_id: str,
    result_df: pd.DataFrame,
    current_columns: ClusterColumns,
    previous_columns: ClusterColumns,
    config,
):
    """個別のクラスタに対してマージラベリングを実行する

    Args:
        target_cluster_id: 処理対象のクラスタID
        result_df: クラスタリング結果のDataFrame
        current_columns: 現在のレベルのカラム情報
        previous_columns: 前のレベルのカラム情報
        config: 設定情報を含む辞書

    Returns:
        マージラベリング結果を含む辞書
    """

    def filter_previous_values(df: pd.DataFrame, previous_columns: ClusterColumns) -> list[ClusterValues]:
        """前のレベルのクラスタ情報を取得する"""
        previous_records = df[df[current_columns.id] == target_cluster_id][
            [previous_columns.label, previous_columns.description]
        ].drop_duplicates()
        previous_values = [
            ClusterValues(
                label=row[previous_columns.label],
                description=row[previous_columns.description],
            )
            for _, row in previous_records.iterrows()
        ]
        return previous_values

    previous_values = filter_previous_values(result_df, previous_columns)
    if len(previous_values) == 1:
        return {
            current_columns.id: target_cluster_id,
            current_columns.label: previous_values[0].label,
            current_columns.description: previous_values[0].description,
        }
    elif len(previous_values) == 0:
        raise ValueError(f"クラスタ {target_cluster_id} には前のレベルのクラスタが存在しません。")

    current_cluster_data = result_df[result_df[current_columns.id] == target_cluster_id]
    sampling_num = min(
        config["hierarchical_merge_labelling"]["sampling_num"],
        len(current_cluster_data),
    )
    sampled_data = current_cluster_data.sample(sampling_num)
    sampled_argument_text = "\n".join(sampled_data["argument"].values)
    cluster_text = "\n".join([value.to_prompt_text() for value in previous_values])
    messages = [
        {"role": "system", "content": config["hierarchical_merge_labelling"]["prompt"]},
        {
            "role": "user",
            "content": "クラスタラベル\n" + cluster_text + "\n" + "クラスタの意見\n" + sampled_argument_text,
        },
    ]
    try:
        response = request_to_chat_openai(
            messages=messages,
            model=config["hierarchical_merge_labelling"]["model"],
            is_json=True,
        )
        response_json = json.loads(response)
        return {
            current_columns.id: target_cluster_id,
            current_columns.label: response_json.get("label", "エラーでラベル名が取得できませんでした"),
            current_columns.description: response_json.get("description", "エラーで解説が取得できませんでした"),
        }
    except Exception as e:
        print(f"エラーが発生しました: {e}")
        return {
            current_columns.id: target_cluster_id,
            current_columns.label: "エラーでラベル名が取得できませんでした",
            current_columns.description: "エラーで解説が取得できませんでした",
        }


def calculate_cluster_density(melted_df: pd.DataFrame, config: dict):
    """クラスタ内の密度計算"""
    hierarchical_cluster_df = pd.read_csv(f"outputs/{config['output_dir']}/hierarchical_clusters.csv")

    densities = []
    for level, c_id in zip(melted_df["level"], melted_df["id"], strict=False):
        cluster_embeds = hierarchical_cluster_df[hierarchical_cluster_df[f"cluster-level-{level}-id"] == c_id][
            ["x", "y"]
        ].values
        density = calculate_density(cluster_embeds)
        densities.append(density)

    # 密度のランクを計算
    melted_df["density"] = densities
    melted_df["density_rank"] = melted_df.groupby("level")["density"].rank(ascending=False, method="first")
    melted_df["density_rank_percentile"] = melted_df.groupby("level")["density_rank"].transform(lambda x: x / len(x))
    return melted_df


def calculate_density(embeds: np.ndarray):
    """平均距離に基づいて密度を計算"""
    center = np.mean(embeds, axis=0)
    distances = np.linalg.norm(embeds - center, axis=1)
    avg_distance = np.mean(distances)
    density = 1 / (avg_distance + 1e-10)
    return density
21:T4c0,"""Create summaries for the clusters."""

import pandas as pd

from services.llm import request_to_chat_openai


def hierarchical_overview(config):
    dataset = config["output_dir"]
    path = f"outputs/{dataset}/hierarchical_overview.txt"

    hierarchical_label_df = pd.read_csv(f"outputs/{dataset}/hierarchical_merge_labels.csv")

    prompt = config["hierarchical_overview"]["prompt"]
    model = config["hierarchical_overview"]["model"]

    # TODO: level1で固定にしているが、設定で変えられるようにする
    target_level = 1
    target_records = hierarchical_label_df[hierarchical_label_df["level"] == target_level]
    ids = target_records["id"].to_list()
    labels = target_records["label"].to_list()
    descriptions = target_records["description"].to_list()
    target_records.set_index("id", inplace=True)

    input = ""
    for i, _ in enumerate(ids):
        input += f"# Cluster {i}/{len(ids)}: {labels[i]}\n\n"
        input += descriptions[i] + "\n\n"

    messages = [{"role": "user", "content": prompt}, {"role": "user", "content": input}]
    response = request_to_chat_openai(messages=messages, model=model)

    with open(path, "w") as file:
        file.write(response)
8:[["$","div",null,{"className":"container","children":[["$","$L11",null,{"meta":{"reporter":"テスト環境","message":"これは動作確認のためのテスト用のメタデータです。レポートの作成者に関する情報等を、public/meta/custom/metadata.jsonに記載することで、レポート上で情報を表示することができます。","webLink":null,"privacyLink":null,"termsLink":null,"brandColor":"#2577B1","isDefault":true}}],["$","$L12",null,{"mx":"auto","maxW":"750px","mb":10,"children":[["$","$L13",null,{"textAlign":"center","fontSize":"xl","mb":5,"children":"Report"}],["$","$L13",null,{"as":"h2","size":"4xl","mb":2,"className":"headingColor","children":"かもめテラスのGoogle Mapsレビュー"}],["$","$L14",null,{"fontWeight":"bold","fontSize":"xl","mb":2,"children":[["$","$L15",null,{"mr":1,"children":["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":20,"height":20,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-messages-square","children":[["$","path","p1xzt8",{"d":"M14 9a2 2 0 0 1-2 2H6l-4 4V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2z"}],["$","path","1cx29u",{"d":"M18 9h2a2 2 0 0 1 2 2v11l-4-4h-6a2 2 0 0 1-2-2v-1"}],"$undefined"]}]}],"443","件"]}],["$","p",null,{"children":"この調査では、かもめの玉子や地域特産品に関する多様な意見が集約され、消費者の体験や地域活性化の重要性が強調されています。特に、かもめの玉子の魅力や地域の観光スポット、スイーツ文化が評価され、訪問者はリラックスした食体験を楽しんでいます。また、家族向けの快適なショッピング環境やサービス向上のニーズも明らかになり、地域経済の発展に寄与する意見が多く見られました。"}]]}],["$","$L16",null,{"result":{"arguments":[{"arg_id":"Acsv-1_0","argument":"岩手名物のかもめの玉子、今回はかもめのショコらんを購入。ゴールドとブラウンのパッケージは高級感があり、白餡とチョコのバランスが良い。6個入り1,080円。","x":11.657033,"y":-6.1251726,"p":0,"cluster_ids":["0","1_4","2_14"]},{"arg_id":"Acsv-2_0","argument":"大船渡の『かもめの玉子』総本店は、広々とした無料駐車場が完備されており、焼きたてパンや和菓子、洋菓子が多様に販売されている。イートインスペースもあり、名物の『みたらし焼きだんご』を楽しむことができる。餅は柔らかく、焼きたてのカリッとした食感が特徴で、一本から購入できるのも嬉しい。","x":13.266964,"y":-4.324807,"p":0,"cluster_ids":["0","1_5","2_5"]},{"arg_id":"Acsv-3_0","argument":"2024年11月20日18時過ぎに訪問。パンが半額で、アイスもお安く購入。保冷剤をつけてもらい、溶けずに持ち帰れた。","x":10.32446,"y":-3.0912242,"p":0,"cluster_ids":["0","1_1","2_18"]},{"arg_id":"Acsv-3_1","argument":"チョコロックは洋酒の効いた餡子の組み合わせで、あまり好みではなかった。","x":9.871991,"y":-5.5145836,"p":0,"cluster_ids":["0","1_3","2_26"]},{"arg_id":"Acsv-3_2","argument":"王子アイスは黄身と白身が半々で、黄身は濃厚、白身はアイスクリンのようなさらりとした食感。家族と好みが分かれた。","x":8.826719,"y":-3.7313757,"p":0,"cluster_ids":["0","1_3","2_35"]},{"arg_id":"Acsv-3_3","argument":"あんくるみパンは何層にもあんこと胡桃が入っており、ふわふわの生地で美味しかった。","x":10.57385,"y":-4.1040535,"p":0,"cluster_ids":["0","1_6","2_33"]},{"arg_id":"Acsv-3_4","argument":"スイートチョコロールは予想通りの味で、もっとチョコ感が強ければ嬉しかった。生地から油を強く感じた。","x":9.723847,"y":-5.4931684,"p":0,"cluster_ids":["0","1_3","2_26"]},{"arg_id":"Acsv-3_5","argument":"入り口にイートインスペースがあり、子供が喜びそうな遊び場もあった。奥には工場見学スペースがあったが、動いてはいなかった。","x":11.178623,"y":-1.3959054,"p":0,"cluster_ids":["0","1_2","2_17"]},{"arg_id":"Acsv-4_0","argument":"お土産を買うために立ち寄ったが、以前よりも買い物客が多く活気があった","x":12.472737,"y":-2.518005,"p":0,"cluster_ids":["0","1_2","2_34"]},{"arg_id":"Acsv-4_1","argument":"かもめの卵は美味しい","x":11.481433,"y":-6.953047,"p":0,"cluster_ids":["0","1_4","2_28"]},{"arg_id":"Acsv-5_0","argument":"岩手三陸銘菓はかもめの玉子が有名","x":13.361779,"y":-5.3134837,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-5_1","argument":"大船渡に何回か訪れたが、初めてかもめの玉子を購入した","x":13.690248,"y":-3.803535,"p":0,"cluster_ids":["0","1_5","2_5"]},{"arg_id":"Acsv-5_2","argument":"多様な種類があり、土産選びに迷った","x":12.133969,"y":-2.9699628,"p":0,"cluster_ids":["0","1_2","2_8"]},{"arg_id":"Acsv-5_3","argument":"店内で飲食や体験ができる場所があり、再訪したいと思った","x":13.457652,"y":-2.1648314,"p":0,"cluster_ids":["0","1_2","2_12"]},{"arg_id":"Acsv-6_0","argument":"新しい種類のかもめの玉子が売られていて驚いた","x":12.303838,"y":-6.645696,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-7_0","argument":"東北名物の和菓子「かもめの玉子」が全国的に有名である","x":12.783699,"y":-5.2471614,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-7_1","argument":"店内は新しく、多数のお土産品やパン・洋菓子、カフェがあり人気がある","x":11.122579,"y":-2.6838818,"p":0,"cluster_ids":["0","1_1","2_18"]},{"arg_id":"Acsv-7_2","argument":"季節限定の「かもめの玉子(みかん風味)」を購入した","x":11.354052,"y":-6.193234,"p":0,"cluster_ids":["0","1_4","2_14"]},{"arg_id":"Acsv-7_3","argument":"名物の「かもめソフト」をイートインした","x":9.969839,"y":-6.6101084,"p":0,"cluster_ids":["0","1_3","2_22"]},{"arg_id":"Acsv-8_0","argument":"店内の雰囲気やカモメ玉子のソフトクリームが素晴らしい","x":11.79103,"y":-1.1312506,"p":0,"cluster_ids":["0","1_2","2_2"]},{"arg_id":"Acsv-8_1","argument":"解放スペースが心地よく観光客や地元の人が訪れる印象","x":12.279032,"y":-1.5707726,"p":0,"cluster_ids":["0","1_2","2_2"]},{"arg_id":"Acsv-8_2","argument":"店員さんが優しく、岩手の中で好きな店のTOP3に入る","x":13.405087,"y":-1.0561279,"p":0,"cluster_ids":["0","1_2","2_9"]},{"arg_id":"Acsv-9_0","argument":"大船渡の宿を目当てに訪問した","x":13.986126,"y":-3.2853742,"p":0,"cluster_ids":["0","1_5","2_20"]},{"arg_id":"Acsv-9_1","argument":"名物かもめの玉子や和菓子、洋菓子、ベーカリー、カフェが豊富","x":12.457175,"y":-5.1543093,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-9_2","argument":"100円ちょいの和菓子が美味しい","x":11.212637,"y":-4.7717233,"p":0,"cluster_ids":["0","1_6","2_1"]},{"arg_id":"Acsv-9_3","argument":"店員さんが素敵で、また行きたい","x":13.164921,"y":-1.0389657,"p":0,"cluster_ids":["0","1_2","2_9"]},{"arg_id":"Acsv-10_0","argument":"カモメの玉子季節限定栗、芋を購入した","x":11.399091,"y":-6.1816854,"p":0,"cluster_ids":["0","1_4","2_14"]},{"arg_id":"Acsv-10_1","argument":"スタッフの接客が良かった","x":13.287112,"y":-0.4664583,"p":0,"cluster_ids":["0","1_2","2_9"]},{"arg_id":"Acsv-10_2","argument":"塩大福とパンも購入した","x":10.757417,"y":-3.6293516,"p":0,"cluster_ids":["0","1_6","2_13"]},{"arg_id":"Acsv-10_3","argument":"パンはふかふかで美味しかった","x":10.5234995,"y":-4.151911,"p":0,"cluster_ids":["0","1_6","2_33"]},{"arg_id":"Acsv-11_0","argument":"大船渡周辺での体験: みたらし団子とソフトクリームを購入したが、味はまあまあだった。","x":9.258359,"y":-4.4421782,"p":0,"cluster_ids":["0","1_3","2_24"]},{"arg_id":"Acsv-11_1","argument":"接客が非常に悪く、店員が無視しておしゃべりしているのが気になった。","x":13.081176,"y":-0.48485225,"p":0,"cluster_ids":["0","1_2","2_9"]},{"arg_id":"Acsv-11_2","argument":"お土産コーナーとソフトクリームのレジが別々で、ソフトクリームのレジに人がいないことが多い。","x":10.336548,"y":-3.1740026,"p":0,"cluster_ids":["0","1_1","2_18"]},{"arg_id":"Acsv-11_3","argument":"特別寄る必要がないため、もう行かないかもしれない。","x":12.888819,"y":-2.5068815,"p":0,"cluster_ids":["0","1_2","2_34"]},{"arg_id":"Acsv-12_0","argument":"さいとう製菓のオフィシャルショップでは、様々なお菓子やケーキ、お土産が購入できる","x":12.604333,"y":-4.1098146,"p":0,"cluster_ids":["0","1_6","2_19"]},{"arg_id":"Acsv-12_1","argument":"かもめソフトが美味しい","x":9.333537,"y":-6.1338387,"p":0,"cluster_ids":["0","1_3","2_0"]},{"arg_id":"Acsv-13_0","argument":"ソフトクリームが非常に美味しかった","x":9.106789,"y":-5.024044,"p":0,"cluster_ids":["0","1_3","2_10"]},{"arg_id":"Acsv-13_1","argument":"かもめの玉子総本店なので品揃えが一番","x":12.382884,"y":-6.2184243,"p":0,"cluster_ids":["0","1_4","2_11"]},{"arg_id":"Acsv-14_0","argument":"かもめのたまごのソフトクリームはシャーベットっぽく、あまり美味しくないため頭痛がする","x":9.077396,"y":-5.669138,"p":0,"cluster_ids":["0","1_3","2_10"]},{"arg_id":"Acsv-14_1","argument":"ここだけのクッキーシューが食べられる","x":9.423097,"y":-3.8906107,"p":0,"cluster_ids":["0","1_3","2_35"]},{"arg_id":"Acsv-15_0","argument":"カモメのたまごの販売所兼カフェは、清潔感があり、パン屋や体験コーナーなど多様なコーナーがある。","x":10.990276,"y":-1.5564712,"p":0,"cluster_ids":["0","1_2","2_17"]},{"arg_id":"Acsv-15_1","argument":"カモメのたまごソフトは、あっさり系のソフトクリームに濃厚な餡がトッピングされており、美味しい。","x":7.1898646,"y":-5.6955338,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-15_2","argument":"パンは一定の歯応えがあり、特に塩あんパンはカリカリの外側と大きな空洞が特徴で、美味しい食感を楽しめる。","x":10.484932,"y":-4.16306,"p":0,"cluster_ids":["0","1_6","2_33"]},{"arg_id":"Acsv-16_0","argument":"かもめの玉子だけでなく、様々なお菓子やケーキ、ソフトクリームを販売している","x":12.759345,"y":-5.5432334,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-16_1","argument":"時間帯によって焼き立てのシュークリームも購入できる","x":9.718417,"y":-3.582088,"p":0,"cluster_ids":["0","1_3","2_4"]},{"arg_id":"Acsv-17_0","argument":"大船渡のさいとう製菓総本店はお土産やカフェとして人気で、店員の対応が素晴らしい。","x":13.195538,"y":-3.939043,"p":0,"cluster_ids":["0","1_5","2_5"]},{"arg_id":"Acsv-17_1","argument":"店員が盛岡の店舗にも同じ商品があることを教えてくれ、商品選びがしやすかった。","x":13.245352,"y":-0.90987885,"p":0,"cluster_ids":["0","1_2","2_9"]},{"arg_id":"Acsv-17_2","argument":"購入したケーキやお菓子はイートインで楽しめ、お茶や紅茶が無料で提供されるのが良かった。","x":9.806221,"y":-1.5580062,"p":0,"cluster_ids":["0","1_1","2_15"]},{"arg_id":"Acsv-18_0","argument":"季節限定の栗のカモ玉が売り切れだった","x":11.380982,"y":-6.120529,"p":0,"cluster_ids":["0","1_4","2_14"]},{"arg_id":"Acsv-18_1","argument":"カモメソフトを食べた","x":7.170353,"y":-5.7840447,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-18_2","argument":"いろいろな商品が売り切れだった","x":11.51185,"y":-2.9856617,"p":0,"cluster_ids":["0","1_2","2_8"]},{"arg_id":"Acsv-19_0","argument":"大船渡の有名な御菓子は季節限定で美味しい","x":13.064378,"y":-4.167818,"p":0,"cluster_ids":["0","1_5","2_5"]},{"arg_id":"Acsv-19_1","argument":"大船渡のソフトクリームは朝昼晩食べても止まらない","x":9.096111,"y":-4.810987,"p":0,"cluster_ids":["0","1_3","2_24"]},{"arg_id":"Acsv-19_2","argument":"大船渡に寄り道する価値は200パーセントある","x":13.988039,"y":-3.4092607,"p":0,"cluster_ids":["0","1_5","2_20"]},{"arg_id":"Acsv-20_0","argument":"岩手名物かもめの玉子のお店では、かもめの玉子以外にもケーキ、和菓子、パン、アイスクリームなど多様なお菓子が販売されている。","x":12.924099,"y":-5.296224,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-20_1","argument":"かもめソフトの渋皮栗風味は、なめらかなソフトクリームにマロンがたっぷり乗っており、濃厚で美味しい。","x":9.148059,"y":-5.966474,"p":0,"cluster_ids":["0","1_3","2_0"]},{"arg_id":"Acsv-21_0","argument":"土曜午前に初訪問。アクセスが簡単で、駐車場は回転が早くすぐに止められた。店内は導線が良く、レイアウトが楽しかった。スタッフは懇切丁寧で、イートインのかもめのソフトが旨かった。次回はパンを買いに行きたい。","x":12.8236685,"y":-1.8795422,"p":0,"cluster_ids":["0","1_2","2_12"]},{"arg_id":"Acsv-22_0","argument":"岩手を代表する銘菓「かもめの玉子」の本店がある","x":13.36836,"y":-5.3330483,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-22_1","argument":"本店ではここでしか買えない商品やケーキ、パンも販売している","x":10.898792,"y":-3.1467159,"p":0,"cluster_ids":["0","1_1","2_18"]},{"arg_id":"Acsv-22_2","argument":"個人的にはミニかもめの玉子が好き","x":11.887433,"y":-7.017894,"p":0,"cluster_ids":["0","1_4","2_28"]},{"arg_id":"Acsv-23_0","argument":"イートインで食べたソフトクリームやお土産のみたらし団子、パンが美味しかった","x":9.741621,"y":-3.5769823,"p":0,"cluster_ids":["0","1_3","2_4"]},{"arg_id":"Acsv-23_1","argument":"お手洗いが白くて綺麗で、ゆっくりくつろげた","x":12.561862,"y":-0.7874431,"p":0,"cluster_ids":["0","1_2","2_32"]},{"arg_id":"Acsv-23_2","argument":"スタッフが親切でリピート確定","x":13.271263,"y":-0.47111544,"p":0,"cluster_ids":["0","1_2","2_9"]},{"arg_id":"Acsv-24_0","argument":"洋菓子よりお餅のコーナーとパンを多く購入している","x":11.123682,"y":-3.5946991,"p":0,"cluster_ids":["0","1_6","2_13"]},{"arg_id":"Acsv-24_1","argument":"かもめソフトのフレーバーは数種類あり、秋はモンブランが好み","x":10.108645,"y":-6.3164287,"p":0,"cluster_ids":["0","1_3","2_22"]},{"arg_id":"Acsv-24_2","argument":"美味しいし、スタッフの笑顔や対応がとても良い","x":13.232915,"y":-0.4503719,"p":0,"cluster_ids":["0","1_2","2_9"]},{"arg_id":"Acsv-25_0","argument":"台風の大雨の中、かもめの玉子以外にも焼き立てパンや焼き菓子、生菓子があることを発見した","x":12.834873,"y":-5.3207316,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-25_1","argument":"やっぱりかもめの玉子が好きだが、次回は体験ラボにも行ってみたい","x":12.446258,"y":-6.411498,"p":0,"cluster_ids":["0","1_4","2_11"]},{"arg_id":"Acsv-26_0","argument":"岩手大船渡市の佐々木朗希選手とコラボしたかもめの卵がある","x":13.8476925,"y":-4.670474,"p":0,"cluster_ids":["0","1_5","2_31"]},{"arg_id":"Acsv-26_1","argument":"観光バスでツアーのお客様が沢山訪れている","x":12.679339,"y":-1.7474686,"p":0,"cluster_ids":["0","1_2","2_12"]},{"arg_id":"Acsv-26_2","argument":"大船渡が賑わいを見せることを願っている","x":14.098002,"y":-3.3295004,"p":0,"cluster_ids":["0","1_5","2_20"]},{"arg_id":"Acsv-27_0","argument":"かもめソフトの美味しいみたらし団子を頂いた","x":9.022097,"y":-4.5031834,"p":0,"cluster_ids":["0","1_3","2_24"]},{"arg_id":"Acsv-28_0","argument":"ケーキ屋さんのように多種多様なお菓子が華やかに並んでいる","x":11.825481,"y":-3.9177933,"p":0,"cluster_ids":["0","1_6","2_25"]},{"arg_id":"Acsv-28_1","argument":"色とりどりで見ているだけで楽しい","x":12.05524,"y":-2.198787,"p":0,"cluster_ids":["0","1_2","2_23"]},{"arg_id":"Acsv-28_2","argument":"季節によってインテリアが変わる","x":12.525253,"y":-1.6764256,"p":0,"cluster_ids":["0","1_2","2_2"]},{"arg_id":"Acsv-28_3","argument":"訪れた時はひな祭りのインテリアだった","x":12.833651,"y":-1.7636281,"p":0,"cluster_ids":["0","1_2","2_12"]},{"arg_id":"Acsv-28_4","argument":"イートインスペースがある","x":11.311984,"y":-1.7993312,"p":0,"cluster_ids":["0","1_2","2_17"]},{"arg_id":"Acsv-29_0","argument":"名物のかもめソフトは、かもめの玉子の餡がかかっている","x":10.255473,"y":-6.8032002,"p":0,"cluster_ids":["0","1_3","2_22"]},{"arg_id":"Acsv-29_1","argument":"ラズベリー味のかもめソフトもある","x":9.424697,"y":-6.1895123,"p":0,"cluster_ids":["0","1_3","2_0"]},{"arg_id":"Acsv-29_2","argument":"オリジナルかもめの玉子を作る体験コーナーがある","x":13.193831,"y":-6.334494,"p":0,"cluster_ids":["0","1_4","2_30"]},{"arg_id":"Acsv-30_0","argument":"有名なかもめの玉子の他に、さまざまなお菓子や焼きたてパン、シュークリームも購入できる","x":12.652903,"y":-5.25262,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-30_1","argument":"店内はおしゃれでキレイ","x":12.459841,"y":-0.9027207,"p":0,"cluster_ids":["0","1_2","2_32"]},{"arg_id":"Acsv-31_0","argument":"色々な種類のかもめの玉子があった","x":12.2633295,"y":-6.9582095,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-31_1","argument":"可愛いパンが沢山あった","x":10.8149,"y":-3.993956,"p":0,"cluster_ids":["0","1_6","2_13"]},{"arg_id":"Acsv-31_2","argument":"かもめのソフトクリームが美味しかった","x":9.152933,"y":-5.7098145,"p":0,"cluster_ids":["0","1_3","2_10"]},{"arg_id":"Acsv-32_0","argument":"岩手県大船渡市の中心で木造船や巨大防潮堤の壁画、海上保安庁の巡視艇を身近に見ることができた","x":14.138306,"y":-3.3686287,"p":0,"cluster_ids":["0","1_5","2_20"]},{"arg_id":"Acsv-33_0","argument":"土曜日の夕方に訪れたが、店内はお客様で溢れていた","x":12.895488,"y":-1.6654592,"p":0,"cluster_ids":["0","1_2","2_12"]},{"arg_id":"Acsv-33_1","argument":"パンコーナーは品数が少なくなっていた","x":10.987904,"y":-3.5765743,"p":0,"cluster_ids":["0","1_6","2_13"]},{"arg_id":"Acsv-33_2","argument":"洋菓子も品数が少なめだったが、かもめの卵などは豊富にあった","x":11.657034,"y":-4.41567,"p":0,"cluster_ids":["0","1_6","2_25"]},{"arg_id":"Acsv-34_0","argument":"かもめソフトは美味しかった。ノーマルなかもめソフトの方がレモンバージョンより美味しいのでおすすめ。","x":9.530681,"y":-6.260887,"p":0,"cluster_ids":["0","1_3","2_0"]},{"arg_id":"Acsv-34_1","argument":"かもめのたまごには紅茶、紅白、林檎、プレミアムなど様々な種類があった。","x":12.774011,"y":-6.207445,"p":0,"cluster_ids":["0","1_4","2_11"]},{"arg_id":"Acsv-35_0","argument":"かめものたまご以外のお菓子やパンもある","x":12.03686,"y":-4.6266584,"p":0,"cluster_ids":["0","1_6","2_19"]},{"arg_id":"Acsv-35_1","argument":"無料のお茶や紅茶があり、休憩に立ち寄るのも良い","x":9.749483,"y":-1.477621,"p":0,"cluster_ids":["0","1_1","2_15"]},{"arg_id":"Acsv-36_0","argument":"かもめの玉子やパン、ケーキ、和菓子が揃い、商品陳列が映える店舗である","x":12.750443,"y":-5.2088223,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-36_1","argument":"オリジナルのソフトクリームが楽しめる","x":8.985143,"y":-5.2179728,"p":0,"cluster_ids":["0","1_3","2_10"]},{"arg_id":"Acsv-36_2","argument":"プレミアムかもめの玉子は白身が杏仁豆腐、黄身がマンゴーソースで温泉玉子に似ている","x":11.590424,"y":-6.916183,"p":0,"cluster_ids":["0","1_4","2_28"]},{"arg_id":"Acsv-36_3","argument":"接客は良いが、値段は高めである","x":13.416973,"y":-0.6821779,"p":0,"cluster_ids":["0","1_2","2_9"]},{"arg_id":"Acsv-37_0","argument":"黄金のかもめの卵は非常に美味しく、お土産に最適である","x":11.614534,"y":-6.759519,"p":0,"cluster_ids":["0","1_4","2_28"]},{"arg_id":"Acsv-38_0","argument":"かもめソフトは美味しい","x":9.363696,"y":-6.118139,"p":0,"cluster_ids":["0","1_3","2_0"]},{"arg_id":"Acsv-39_0","argument":"楽し過ぎて色々な商品を買いたくなる","x":12.105294,"y":-2.5412836,"p":0,"cluster_ids":["0","1_2","2_23"]},{"arg_id":"Acsv-39_1","argument":"かもめの玉子の種類が多くて迷う","x":12.188655,"y":-6.9143324,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-39_2","argument":"秋限定の栗を購入した","x":11.277101,"y":-6.0940905,"p":0,"cluster_ids":["0","1_4","2_14"]},{"arg_id":"Acsv-39_3","argument":"一個から買えるので嬉しい","x":11.887253,"y":-2.8121123,"p":0,"cluster_ids":["0","1_2","2_23"]},{"arg_id":"Acsv-40_0","argument":"子連れで楽しめる体験コーナーがあり、かもめの玉子作りができる","x":13.27585,"y":-6.229054,"p":0,"cluster_ids":["0","1_4","2_30"]},{"arg_id":"Acsv-40_1","argument":"かもめソフトは濃厚で美味しいが、餡が甘すぎてソフトクリームの味が消えてしまうためお勧めできない","x":9.192289,"y":-5.903067,"p":0,"cluster_ids":["0","1_3","2_0"]},{"arg_id":"Acsv-41_0","argument":"三陸菓匠さいとうの総本店は、かもめの玉子で有名で、定番商品から個別にしか買えない商品まで幅広く取り揃えている。また、パンや餅も取り扱っている。","x":12.974856,"y":-4.9905767,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-42_0","argument":"かもめの玉子のきみがモンブランのようにかかっていて、チョコレートで作った羽をつけたソフトクリームを美味しく頂きました。","x":10.333824,"y":-6.5015535,"p":0,"cluster_ids":["0","1_3","2_22"]},{"arg_id":"Acsv-42_1","argument":"翼竜のたまごはコラボのかもめの玉子バージョンでした。","x":12.500115,"y":-6.6800413,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-43_0","argument":"お菓子ハウスのような店で、秋限定の栗かもめのたまごや限定の餡子パンがあったが、全体的に若い層向けのコンセプトに感じた。","x":11.925457,"y":-4.3106303,"p":0,"cluster_ids":["0","1_6","2_25"]},{"arg_id":"Acsv-43_1","argument":"店の奥の和菓子コーナーにはお客さんがいかず、生和菓子、ケーキ、パン、ソフトなど多様な商品があるが、どれが一番美味しい大船渡の銘菓なのか分からなかった。","x":13.114343,"y":-4.060151,"p":0,"cluster_ids":["0","1_5","2_5"]},{"arg_id":"Acsv-44_0","argument":"ガラスケースのお菓子は何個からでも注文できると書いてあったが、一個頼んだら笑われた","x":11.797806,"y":-4.1408834,"p":0,"cluster_ids":["0","1_6","2_25"]},{"arg_id":"Acsv-45_0","argument":"カモメテラス大船渡は雨の日でお客さんが少なかった","x":13.933274,"y":-3.2500837,"p":0,"cluster_ids":["0","1_5","2_20"]},{"arg_id":"Acsv-45_1","argument":"カモメソフトと通常ソフトを購入した","x":7.029659,"y":-5.8140965,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-45_2","argument":"カモメソフトは黄味餡が喉につまる感じがしたので、飲み物も一緒に買うと良いかもしれない","x":7.268914,"y":-5.7932005,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-45_3","argument":"パン屋さんやケーキ屋さんもあり、素晴らしい甘味処だった","x":10.7879505,"y":-3.8482428,"p":0,"cluster_ids":["0","1_6","2_13"]},{"arg_id":"Acsv-45_4","argument":"幸せな空間で美味しかった","x":10.065816,"y":-2.6546214,"p":0,"cluster_ids":["0","1_1","2_7"]},{"arg_id":"Acsv-46_0","argument":"清潔感があるオシャレな空間で温かいお団子が食べられる","x":10.10111,"y":-2.7826462,"p":0,"cluster_ids":["0","1_1","2_7"]},{"arg_id":"Acsv-46_1","argument":"2023年6月再訪時にお団子が冷たいものに変わっていた","x":9.869947,"y":-2.9824612,"p":0,"cluster_ids":["0","1_3","2_4"]},{"arg_id":"Acsv-46_2","argument":"クッキーシューやプリン等も新たに販売されていた","x":9.523824,"y":-3.8463264,"p":0,"cluster_ids":["0","1_3","2_35"]},{"arg_id":"Acsv-46_3","argument":"かもめソフトの種類が増えており、レモン餡がさわやかでおいしかった","x":9.603096,"y":-6.3914847,"p":0,"cluster_ids":["0","1_3","2_0"]},{"arg_id":"Acsv-47_0","argument":"カモメの玉子で有名なお菓子工房は、和菓子、洋菓子、パンすべてが美味しいと思う","x":12.239605,"y":-5.2254663,"p":0,"cluster_ids":["0","1_4","2_27"]},{"arg_id":"Acsv-48_0","argument":"さいとう製菓のお店は綺麗でオシャレな店内だった","x":12.494826,"y":-3.48065,"p":0,"cluster_ids":["0","1_6","2_29"]},{"arg_id":"Acsv-48_1","argument":"陸前高田市出身の佐々木朗希選手のサイン入りユニフォームが展示されていた","x":13.873514,"y":-4.590904,"p":0,"cluster_ids":["0","1_5","2_31"]},{"arg_id":"Acsv-49_0","argument":"大震災後の復興街づくりは沿岸地域の努力と共同力によるものであり、かもめテラスもその一環である","x":14.044853,"y":-2.9226863,"p":0,"cluster_ids":["0","1_5","2_20"]},{"arg_id":"Acsv-49_1","argument":"かもめテラスには6回訪れており、お気に入りの場所である","x":13.502118,"y":-2.2729487,"p":0,"cluster_ids":["0","1_2","2_12"]},{"arg_id":"Acsv-49_2","argument":"かもめテラスの近くにはみなと公園とルートイン大船渡があり、サンアンドレス公園も近くにある","x":13.921687,"y":-3.2026694,"p":0,"cluster_ids":["0","1_5","2_20"]},{"arg_id":"Acsv-50_0","argument":"もっちりとしたプリンはみたらし団子の味そのままだった","x":8.992397,"y":-4.466821,"p":0,"cluster_ids":["0","1_3","2_24"]},{"arg_id":"Acsv-50_1","argument":"色んなかもめ玉子があり、全種類お土産に買った","x":12.226686,"y":-6.585715,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-51_0","argument":"トイレ休憩と名物のみたらし団子を購入した","x":9.064596,"y":-4.2876015,"p":0,"cluster_ids":["0","1_3","2_24"]},{"arg_id":"Acsv-51_1","argument":"色々な食べ物が販売されているので、お勧めです","x":11.784093,"y":-3.18922,"p":0,"cluster_ids":["0","1_2","2_8"]},{"arg_id":"Acsv-52_0","argument":"お店は活気があり、かもめの玉子やパン、ケーキ、ソフトクリームなど多様な商品が揃っている","x":12.441127,"y":-4.828344,"p":0,"cluster_ids":["0","1_6","2_19"]},{"arg_id":"Acsv-52_1","argument":"限定の季節のソフトクリームはイートインコーナーで楽しめる","x":9.231155,"y":-3.5944536,"p":0,"cluster_ids":["0","1_3","2_35"]},{"arg_id":"Acsv-52_2","argument":"2月の前半に訪れた際、ショコラかもめの玉子を購入した","x":11.746559,"y":-6.14006,"p":0,"cluster_ids":["0","1_4","2_14"]},{"arg_id":"Acsv-53_0","argument":"かもめ玉子の他にも美味しそうな和菓子や洋菓子が売っている","x":12.497064,"y":-5.330974,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-53_1","argument":"ソフトクリームも美味しそう","x":8.995734,"y":-5.067171,"p":0,"cluster_ids":["0","1_3","2_10"]},{"arg_id":"Acsv-53_2","argument":"建物がお洒落な感じ","x":12.454032,"y":-1.220025,"p":0,"cluster_ids":["0","1_2","2_32"]},{"arg_id":"Acsv-53_3","argument":"工場が動いていなかったのは残念だが、また寄りたい","x":13.238089,"y":-1.7637454,"p":0,"cluster_ids":["0","1_2","2_12"]},{"arg_id":"Acsv-54_0","argument":"東京から大船渡へ帰省した際にお土産を買いに行った","x":13.536385,"y":-3.4535775,"p":0,"cluster_ids":["0","1_5","2_20"]},{"arg_id":"Acsv-54_1","argument":"賑やかな雰囲気の中で楽しく買い物ができた","x":12.14654,"y":-2.2911143,"p":0,"cluster_ids":["0","1_2","2_23"]},{"arg_id":"Acsv-54_2","argument":"家族でカモメソフトを食べてみんな満足した","x":7.292982,"y":-5.816259,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-55_0","argument":"駐車場があるカフェで、黄色のマロンクリームは甘めだった","x":10.652577,"y":-2.307484,"p":0,"cluster_ids":["0","1_1","2_7"]},{"arg_id":"Acsv-55_1","argument":"カモメの手はチョコだと思ったが、味はなかった","x":7.2820177,"y":-5.829868,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-55_2","argument":"訪れた時は月曜日で暇そうだった","x":12.952929,"y":-1.7399069,"p":0,"cluster_ids":["0","1_2","2_12"]},{"arg_id":"Acsv-55_3","argument":"工夫が必要なカフェだと感じた","x":10.846691,"y":-1.6410491,"p":0,"cluster_ids":["0","1_2","2_17"]},{"arg_id":"Acsv-56_0","argument":"さいとう製菓本店でお土産用のお菓子を購入した際、試食用としてかもめの玉子ミニを1個もらった。賞味期限が明日だったため納得したが、太っ腹だと感じた。","x":11.950508,"y":-4.915145,"p":0,"cluster_ids":["0","1_4","2_27"]},{"arg_id":"Acsv-56_1","argument":"本店限定のかもめソフトをカフェコーナーで楽しんだ。かもめの玉子餡のモンブランが甘くて美味しく、ソフトクリーム部分も絶妙な甘さで、さすがのお菓子屋さんの味だった。","x":10.365472,"y":-6.382675,"p":0,"cluster_ids":["0","1_3","2_22"]},{"arg_id":"Acsv-57_0","argument":"ツーリングの目的地でカモメソフトを食べた。かもめの玉子の餡が美味しかった。","x":7.1765814,"y":-5.897023,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-57_1","argument":"お土産を少量しか買えなかったので、後で車で行きたい。","x":12.5451975,"y":-2.8376713,"p":0,"cluster_ids":["0","1_2","2_34"]},{"arg_id":"Acsv-58_0","argument":"ツーリングの休憩で訪れた店は、銘菓かもめの玉子やケーキ、和菓子、ソフトクリーム、コーヒーなどを販売しており、イートインコーナーでゆっくり過ごせた。","x":9.934044,"y":-2.0547247,"p":0,"cluster_ids":["0","1_1","2_7"]},{"arg_id":"Acsv-58_1","argument":"オーダーしてからクリームを詰めるクッキーシュークリームとコーヒーを楽しみ、心休まる時間を過ごせた。","x":9.475262,"y":-2.458203,"p":0,"cluster_ids":["0","1_1","2_7"]},{"arg_id":"Acsv-58_2","argument":"周囲には飲食店が多く、看板はダークブラウン系でオシャレな雰囲気を醸し出していた。","x":11.414091,"y":-2.3206866,"p":0,"cluster_ids":["0","1_2","2_23"]},{"arg_id":"Acsv-59_0","argument":"かもめの玉子の黄身あんをデコレートしたかもめソフトはここでしか食べられない","x":9.833995,"y":-6.646464,"p":0,"cluster_ids":["0","1_3","2_22"]},{"arg_id":"Acsv-59_1","argument":"定番のかもめソフトの他に、季節限定のあんがある","x":10.305733,"y":-6.2316365,"p":0,"cluster_ids":["0","1_3","2_22"]},{"arg_id":"Acsv-59_2","argument":"夏はレモンあん、現在は春らしいラズベリーあんが登場している","x":9.85407,"y":-6.2036333,"p":0,"cluster_ids":["0","1_3","2_0"]},{"arg_id":"Acsv-59_3","argument":"今日はラズベリーあん目当てだったが、温かい甘酒まんじゅうを選んだ","x":9.86177,"y":-6.1063724,"p":0,"cluster_ids":["0","1_3","2_0"]},{"arg_id":"Acsv-60_0","argument":"店内はとても綺麗で、店員さんも丁寧である","x":12.791329,"y":-0.74637944,"p":0,"cluster_ids":["0","1_2","2_32"]},{"arg_id":"Acsv-60_1","argument":"色んな種類のお土産があり、選ぶのが楽しい","x":12.035053,"y":-2.6424272,"p":0,"cluster_ids":["0","1_2","2_23"]},{"arg_id":"Acsv-60_2","argument":"どれも美味しそうで、また行きたい","x":13.338666,"y":-2.068759,"p":0,"cluster_ids":["0","1_2","2_12"]},{"arg_id":"Acsv-61_0","argument":"紅白かもめの玉子ミニは面白い商品で、中身も紅白の玉子である。味は滑らかで美味しく、何個でも一口で食べられる。かもめの玉子にはたくさんの種類があり、いつかコンプリートしたい。アソートの販売も希望。","x":11.908756,"y":-7.174459,"p":0,"cluster_ids":["0","1_4","2_28"]},{"arg_id":"Acsv-62_0","argument":"さいとう製菓はかもめの玉子で有名で、変わり種のかもめの玉子や多様なお菓子が揃っている","x":12.765404,"y":-4.9391713,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-62_1","argument":"ケーキも販売しており、観光旅行のお土産購入に適したお店である","x":10.901229,"y":-3.2526412,"p":0,"cluster_ids":["0","1_1","2_18"]},{"arg_id":"Acsv-63_0","argument":"2022年5月、義理の姉2人と主人と共に東北を訪れ、ログハウスに宿泊。最終日には、以前お土産として購入したかもめの玉子を再度訪問し、姉達もお土産にしたいとのことで寄った。実家へのお土産を少し買い、車内で食べるパンやかもめソフトも購入。かもめの玉子の餡はモンブランのようで甘め、暑い日だったので主人と分けて食べた。","x":12.034754,"y":-5.4779673,"p":0,"cluster_ids":["0","1_4","2_27"]},{"arg_id":"Acsv-63_1","argument":"2021年7月、三陸釣り旅行の際にかもめの玉子のお店を訪問。ホテルから歩いて行ける距離にあり、近くには飲食店や衣料雑貨店が立ち並ぶキッセン大船渡があった。カフェ的に利用できるイートインスペースもあり、数種類のかもめの玉子を購入してお土産にした。箱売りだけでなく、バラでも買えると良いと思った。","x":13.50005,"y":-4.151973,"p":0,"cluster_ids":["0","1_5","2_5"]},{"arg_id":"Acsv-64_0","argument":"かもめソフトは500円で、季節限定のフレーバーもある。夏に食べたレモン味は、かもめの玉子の餡が使われており、餡の味が勝っていた。甘さが強く感じた。並んでいたため、餡の巻き方が他の写真よりもキレイではなかった。テイクアウトのお団子も販売されており、物販は多かったが、並びがごちゃごちゃしていて見づらかった。","x":9.910829,"y":-6.3087106,"p":0,"cluster_ids":["0","1_3","2_22"]},{"arg_id":"Acsv-65_0","argument":"さいとう製菓のかもめソフトは美味しく、友人にも好評だった","x":9.287845,"y":-6.151971,"p":0,"cluster_ids":["0","1_3","2_0"]},{"arg_id":"Acsv-65_1","argument":"かもめソフトは黄身餡とチョコレートの組み合わせで不思議なビジュアルだが、味は良い","x":9.513182,"y":-6.3015137,"p":0,"cluster_ids":["0","1_3","2_0"]},{"arg_id":"Acsv-65_2","argument":"店内ではお土産やパン、団子も購入でき、団子もおすすめ","x":10.725106,"y":-3.3012805,"p":0,"cluster_ids":["0","1_1","2_18"]},{"arg_id":"Acsv-66_0","argument":"大船渡駅近くのかもめの玉子のお店では、かもめソフトや和菓子、パンも販売しており、イートインが可能です。","x":13.41369,"y":-4.4247375,"p":0,"cluster_ids":["0","1_5","2_31"]},{"arg_id":"Acsv-66_1","argument":"土日はかもめの玉子をデコレる体験コーナーがあり、お子さん連れにおすすめです。","x":13.251861,"y":-6.42364,"p":0,"cluster_ids":["0","1_4","2_30"]},{"arg_id":"Acsv-66_2","argument":"かもめの玉子プレミアムは美味しいです。","x":11.639388,"y":-6.9636273,"p":0,"cluster_ids":["0","1_4","2_28"]},{"arg_id":"Acsv-67_0","argument":"かもめの玉子の餡とホワイトチョコレートをトッピングした「かもめソフト」は美味しかった","x":10.231001,"y":-6.607222,"p":0,"cluster_ids":["0","1_3","2_22"]},{"arg_id":"Acsv-67_1","argument":"焼きたての「みたらし団子」は絶品","x":8.983429,"y":-4.234525,"p":0,"cluster_ids":["0","1_3","2_24"]},{"arg_id":"Acsv-67_2","argument":"子供が遊べるスペースがあり、ゆっくり買い物を楽しめる","x":11.425998,"y":-1.5390934,"p":0,"cluster_ids":["0","1_2","2_17"]},{"arg_id":"Acsv-67_3","argument":"近くを訪れる機会があれば再訪したい","x":13.388472,"y":-2.0723648,"p":0,"cluster_ids":["0","1_2","2_12"]},{"arg_id":"Acsv-68_0","argument":"三陸銘菓かもめの玉子だけでなく、さいとう製菓の各種お菓子を楽しめる","x":13.167264,"y":-4.9320126,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-68_1","argument":"テラス限定のかもめの玉子の餡を使ったかもめソフトは絶品","x":10.342634,"y":-6.805339,"p":0,"cluster_ids":["0","1_3","2_22"]},{"arg_id":"Acsv-69_0","argument":"かもめの玉子のお洒落なお店を発見し、かもめソフトを選んだ。味はかもめの玉子を食べているようで美味しい。","x":10.4051695,"y":-6.687454,"p":0,"cluster_ids":["0","1_3","2_22"]},{"arg_id":"Acsv-70_0","argument":"カモメのアイスは可愛い。シュークリームが人気で、プリンも美味しい。","x":7.395593,"y":-5.367934,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-70_1","argument":"店員さんは優しく、店内は綺麗。","x":12.7929945,"y":-0.74352163,"p":0,"cluster_ids":["0","1_2","2_32"]},{"arg_id":"Acsv-70_2","argument":"店員さんから無料の紙コップをもらい、緑茶、ほうじ茶、紅茶（無糖）をセルフで飲める。","x":9.701166,"y":-1.3744624,"p":0,"cluster_ids":["0","1_1","2_15"]},{"arg_id":"Acsv-70_3","argument":"全てホットとアイスが選べるのが親切。","x":8.961921,"y":-3.559188,"p":0,"cluster_ids":["0","1_3","2_35"]},{"arg_id":"Acsv-71_0","argument":"大船渡は賑わっており、買い物やDecoかもめの玉作りが楽しめる","x":14.019187,"y":-3.4304097,"p":0,"cluster_ids":["0","1_5","2_20"]},{"arg_id":"Acsv-71_1","argument":"お子様が遊べるスペースがあり、カフェとしても素晴らしい","x":10.931402,"y":-1.4531252,"p":0,"cluster_ids":["0","1_2","2_17"]},{"arg_id":"Acsv-72_0","argument":"かもめの玉子や和菓子が手に入る場所で、ソフトクリームが美味しかったので再訪したい","x":12.048627,"y":-5.3220644,"p":0,"cluster_ids":["0","1_4","2_27"]},{"arg_id":"Acsv-73_0","argument":"キャンプ前後にスイーツを楽しんだ。豆大福はフワッとした新食感で美味しく、みたらしもっちりプリンは和菓子風で絶品だった。帰りに食べたかもめソフトは巨大で、黄身餡が絶妙で満足。職場へのお土産も購入し、他のベーカリーやケーキも楽しめそう。","x":10.072228,"y":-3.7604856,"p":0,"cluster_ids":["0","1_6","2_33"]},{"arg_id":"Acsv-74_0","argument":"大好きなかもめの玉子が沢山売っている","x":12.332012,"y":-6.2478504,"p":0,"cluster_ids":["0","1_4","2_11"]},{"arg_id":"Acsv-74_1","argument":"パン屋さんや和菓子屋さんもある","x":11.083645,"y":-3.413084,"p":0,"cluster_ids":["0","1_1","2_18"]},{"arg_id":"Acsv-75_0","argument":"広々とした清掃の行き届いた店内で、美味しそうなお菓子が揃っている","x":12.042602,"y":-3.5895245,"p":0,"cluster_ids":["0","1_6","2_29"]},{"arg_id":"Acsv-76_0","argument":"かもめのたまごのさいとう製菓は大船渡のキャッセンにあり、様々なお菓子が楽しめる雰囲気がある","x":13.355739,"y":-4.089295,"p":0,"cluster_ids":["0","1_5","2_5"]},{"arg_id":"Acsv-76_1","argument":"かもめテラスと共に大船渡と三陸の復興と発展を願う","x":14.095445,"y":-3.192113,"p":0,"cluster_ids":["0","1_5","2_20"]},{"arg_id":"Acsv-77_0","argument":"岩手で一番美味しいソフトクリームがある","x":8.932882,"y":-4.996896,"p":0,"cluster_ids":["0","1_3","2_10"]},{"arg_id":"Acsv-77_1","argument":"外も中もとても綺麗で何度も訪れたい雰囲気","x":12.649425,"y":-1.1286043,"p":0,"cluster_ids":["0","1_2","2_32"]},{"arg_id":"Acsv-78_0","argument":"かもめのたまごで有名だが、ここでしか買えない物は特にない","x":12.6931505,"y":-5.9483023,"p":0,"cluster_ids":["0","1_4","2_11"]},{"arg_id":"Acsv-79_0","argument":"ここでしか買えないブルーベリー味のかもめの玉子を購入した","x":11.784663,"y":-6.388464,"p":0,"cluster_ids":["0","1_4","2_14"]},{"arg_id":"Acsv-79_1","argument":"お土産として他のお菓子やケーキ、パンもたくさんあって美味しい","x":11.224292,"y":-4.237473,"p":0,"cluster_ids":["0","1_6","2_1"]},{"arg_id":"Acsv-79_2","argument":"無料で水やお茶が飲めて休憩もできる","x":9.735638,"y":-1.4959286,"p":0,"cluster_ids":["0","1_1","2_15"]},{"arg_id":"Acsv-80_0","argument":"彼岸の時のおはぎ・ぼた餅が最高である","x":10.727573,"y":-4.821439,"p":0,"cluster_ids":["0","1_6","2_21"]},{"arg_id":"Acsv-80_1","argument":"ソフトクリームやみたらし団子も美味しい","x":9.1321535,"y":-4.6872864,"p":0,"cluster_ids":["0","1_3","2_24"]},{"arg_id":"Acsv-80_2","argument":"ソフトクリームにみたらし団子のタレを付けて食べるのが好き","x":8.966892,"y":-4.6594725,"p":0,"cluster_ids":["0","1_3","2_24"]},{"arg_id":"Acsv-81_0","argument":"訪問前はかもめの玉子しか知らなかったが、たくさんの美味しそうなお菓子が販売されていた","x":12.398192,"y":-5.365685,"p":0,"cluster_ids":["0","1_4","2_27"]},{"arg_id":"Acsv-82_0","argument":"他では見たことが無い種類のかもめのたまごが販売されている","x":12.734431,"y":-5.798021,"p":0,"cluster_ids":["0","1_4","2_11"]},{"arg_id":"Acsv-83_0","argument":"お菓子の会社が楽しめる施設を作るのは大賛成","x":11.66807,"y":-4.103779,"p":0,"cluster_ids":["0","1_6","2_25"]},{"arg_id":"Acsv-83_1","argument":"観光バスの駐車場がほとんどないのはもったいない","x":11.985507,"y":-1.3850162,"p":0,"cluster_ids":["0","1_2","2_2"]},{"arg_id":"Acsv-83_2","argument":"クッキーシューと田舎もちは美味しかった","x":9.408969,"y":-3.8695958,"p":0,"cluster_ids":["0","1_3","2_35"]},{"arg_id":"Acsv-84_0","argument":"かもめの玉子の総本店は多くの人がお土産を買っていた","x":12.381571,"y":-5.885068,"p":0,"cluster_ids":["0","1_4","2_11"]},{"arg_id":"Acsv-85_0","argument":"お土産にぴったりなお菓子がたくさんある","x":11.443405,"y":-4.148093,"p":0,"cluster_ids":["0","1_6","2_25"]},{"arg_id":"Acsv-85_1","argument":"パンやケーキも販売している","x":10.85437,"y":-3.0867858,"p":0,"cluster_ids":["0","1_1","2_18"]},{"arg_id":"Acsv-85_2","argument":"かもめソフトは外で食べて美味しかった","x":9.223212,"y":-6.178002,"p":0,"cluster_ids":["0","1_3","2_0"]},{"arg_id":"Acsv-85_3","argument":"景色が良くてゆっくりできる","x":12.199545,"y":-1.628428,"p":0,"cluster_ids":["0","1_2","2_2"]},{"arg_id":"Acsv-86_0","argument":"岩手に行ったら必ず寄るお店で、KASEN ROCK FESTIVALの影響で警備員が配置され、スムーズに駐車場を誘導してもらえた。レジでバイクで来たことを伝えると、コンパクトに袋詰めしてくれるサービスがあり、商品が無事にバイクのバッグに収まった。イートインでかもめソフトを食べてクールダウンし、トイレも清潔だった。季節限定やここだけの商品があり、お土産に便利。リピートするなら無料のポイントカードを作るとお得。","x":13.247064,"y":-3.0962882,"p":0,"cluster_ids":["0","1_2","2_34"]},{"arg_id":"Acsv-87_0","argument":"甘いもの好きにはたまらない","x":9.790499,"y":-5.2685394,"p":0,"cluster_ids":["0","1_3","2_26"]},{"arg_id":"Acsv-88_0","argument":"かもめの玉子は定番で種類豊富であり、店内では焼き菓子や手作りパンも製作されている","x":12.907982,"y":-5.4078946,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-89_0","argument":"かもめの玉子のアベンジャーズという印象がある","x":12.103209,"y":-6.818557,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-89_1","argument":"くずまき高原のチーズケーキが個人的におすすめ","x":10.045967,"y":-4.177643,"p":0,"cluster_ids":["0","1_6","2_33"]},{"arg_id":"Acsv-89_2","argument":"ソフトクリームも販売しており、17時までのようだ","x":10.429427,"y":-2.8718143,"p":0,"cluster_ids":["0","1_1","2_18"]},{"arg_id":"Acsv-89_3","argument":"みたらしソフトは甘塩っぱくて美味しいが、最後の方に溜まった部分は食べるのが大変だった","x":9.253139,"y":-5.607543,"p":0,"cluster_ids":["0","1_3","2_10"]},{"arg_id":"Acsv-90_0","argument":"総本店なのに品切れが多く、15時過ぎるとほとんど何もない","x":11.248579,"y":-2.9285972,"p":0,"cluster_ids":["0","1_1","2_18"]},{"arg_id":"Acsv-90_1","argument":"普通のかもめの玉子はあったが、かもめソフトは栗ペーストが歪に巻かれていた","x":11.255358,"y":-7.108348,"p":0,"cluster_ids":["0","1_4","2_28"]},{"arg_id":"Acsv-91_0","argument":"大船渡の銘菓、かもめの玉子はリンゴ、いちご、栗、芋などのフレーバーがあり、季節限定のものもある。ソフトクリームも美味しい。","x":13.249437,"y":-4.3218517,"p":0,"cluster_ids":["0","1_5","2_5"]},{"arg_id":"Acsv-92_0","argument":"大船渡高校出身のロッテマリーンズ佐々木朗希と、ロッテマリーンズのマークであるかもめには共通点がある","x":13.8924,"y":-4.333591,"p":0,"cluster_ids":["0","1_5","2_31"]},{"arg_id":"Acsv-93_0","argument":"かもめのたまごは子供の頃から大好きで、現在は色々な味がある","x":12.685814,"y":-6.5587153,"p":0,"cluster_ids":["0","1_4","2_11"]},{"arg_id":"Acsv-93_1","argument":"チョコバナナ味は特に美味しい","x":10.491762,"y":-4.788643,"p":0,"cluster_ids":["0","1_6","2_21"]},{"arg_id":"Acsv-93_2","argument":"食べたくなると通販でお取り寄せしている","x":11.8258505,"y":-3.263406,"p":0,"cluster_ids":["0","1_2","2_8"]},{"arg_id":"Acsv-94_0","argument":"美味しいお菓子が豊富で、日持ちする物や生菓子、和菓子、洋菓子など選ぶ楽しさがある","x":11.410412,"y":-4.469079,"p":0,"cluster_ids":["0","1_6","2_1"]},{"arg_id":"Acsv-94_1","argument":"人気商品は品切れのこともあり、店内では焼きたてのパンも販売中","x":11.179585,"y":-3.0224965,"p":0,"cluster_ids":["0","1_1","2_18"]},{"arg_id":"Acsv-94_2","argument":"可愛らしい鯉のぼりパンもあり、製造コーナーの見学も可能","x":10.944614,"y":-3.8119426,"p":0,"cluster_ids":["0","1_6","2_13"]},{"arg_id":"Acsv-94_3","argument":"イートインコーナーではソフトクリームや焼きだんご、かき氷などが楽しめる","x":9.131612,"y":-3.4661453,"p":0,"cluster_ids":["0","1_3","2_35"]},{"arg_id":"Acsv-94_4","argument":"セルフサービスのお茶やテーブル席、ソファーがあり、小さいお子さま連れでも安心","x":10.762066,"y":-1.2662905,"p":0,"cluster_ids":["0","1_2","2_17"]},{"arg_id":"Acsv-95_0","argument":"おみやげを買うのに最適な場所で、焼きたてパンもおすすめ","x":10.821112,"y":-3.8492546,"p":0,"cluster_ids":["0","1_6","2_13"]},{"arg_id":"Acsv-95_1","argument":"ソフトクリームやお団子があり、食べるスペースもある","x":10.241314,"y":-2.664542,"p":0,"cluster_ids":["0","1_1","2_7"]},{"arg_id":"Acsv-96_0","argument":"かもめの玉子は昔ながらの黄味餡が一番好き","x":11.670053,"y":-7.0301747,"p":0,"cluster_ids":["0","1_4","2_28"]},{"arg_id":"Acsv-97_0","argument":"岩手のお土産はかもめの玉子が有名で、私は大好きです","x":13.304772,"y":-5.4004784,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-98_0","argument":"かもめのたまごの直営店では、いろいろな種類のたまごが販売されている","x":12.780538,"y":-6.066091,"p":0,"cluster_ids":["0","1_4","2_11"]},{"arg_id":"Acsv-99_0","argument":"かもめの玉子はとても美味しい","x":11.789178,"y":-6.9473104,"p":0,"cluster_ids":["0","1_4","2_28"]},{"arg_id":"Acsv-99_1","argument":"他のお菓子も同じぐらい美味しい","x":10.792126,"y":-4.73044,"p":0,"cluster_ids":["0","1_6","2_21"]},{"arg_id":"Acsv-99_2","argument":"店舗のイートインスペースをもう少し広くしてほしい","x":11.629856,"y":-1.8006278,"p":0,"cluster_ids":["0","1_2","2_2"]},{"arg_id":"Acsv-100_0","argument":"イヤイヤ期の息子と二人で訪れたが、店員さんたちの優しい対応に助けられた。帰省した際にはまた寄りたい。","x":13.384515,"y":-1.6576192,"p":0,"cluster_ids":["0","1_2","2_12"]},{"arg_id":"Acsv-101_0","argument":"ソフトクリームはあっさりした普通の味だが、黄色いあんと一緒に食べると美味しい","x":9.036771,"y":-5.065329,"p":0,"cluster_ids":["0","1_3","2_10"]},{"arg_id":"Acsv-101_1","argument":"季節限定のれもん味は爽やかで美味しかった","x":10.393362,"y":-5.9409704,"p":0,"cluster_ids":["0","1_3","2_26"]},{"arg_id":"Acsv-102_0","argument":"一個ずつの単品で購入可能","x":11.732948,"y":-3.263278,"p":0,"cluster_ids":["0","1_2","2_8"]},{"arg_id":"Acsv-102_1","argument":"ソフトクリームが美味しい","x":8.934635,"y":-5.153121,"p":0,"cluster_ids":["0","1_3","2_10"]},{"arg_id":"Acsv-103_0","argument":"かもめの玉子には多くの種類があり、特にかもめの玉子のソフトが美味しかった","x":11.654511,"y":-7.254891,"p":0,"cluster_ids":["0","1_4","2_28"]},{"arg_id":"Acsv-103_1","argument":"土曜日に行った際、かもめの玉子のデコレーションもできて楽しかった","x":13.257432,"y":-6.490791,"p":0,"cluster_ids":["0","1_4","2_30"]},{"arg_id":"Acsv-104_0","argument":"パンはどれも美味しい","x":10.449705,"y":-4.197271,"p":0,"cluster_ids":["0","1_6","2_33"]},{"arg_id":"Acsv-104_1","argument":"イートインスペースがあり、無料のお茶が提供されている","x":9.864199,"y":-1.4357555,"p":0,"cluster_ids":["0","1_1","2_15"]},{"arg_id":"Acsv-104_2","argument":"小さい子供が遊ぶスペースがあるが、土足厳禁でおもちゃはない","x":11.102054,"y":-1.2618494,"p":0,"cluster_ids":["0","1_2","2_17"]},{"arg_id":"Acsv-105_0","argument":"直営店にしかないかもめの玉子があり、夕方に訪れたため混雑しておらず、ゆっくり休んでお土産を選ぶことができた","x":12.427462,"y":-4.4171324,"p":0,"cluster_ids":["0","1_6","2_19"]},{"arg_id":"Acsv-106_0","argument":"震災復興が進む三陸で、国道45号を南下すると津波の恐怖を想像させる場所がまだある","x":14.062288,"y":-2.9738102,"p":0,"cluster_ids":["0","1_5","2_20"]},{"arg_id":"Acsv-106_1","argument":"温かいコーヒーが重い気持ちを一瞬忘れさせてくれる","x":9.533337,"y":-2.2474623,"p":0,"cluster_ids":["0","1_1","2_15"]},{"arg_id":"Acsv-106_2","argument":"お土産に「りんごかもめ」と「ショコらん」を購入した","x":11.624892,"y":-5.5596323,"p":0,"cluster_ids":["0","1_4","2_27"]},{"arg_id":"Acsv-107_0","argument":"限定ソフトクリームが美味しかった","x":9.150124,"y":-5.3252535,"p":0,"cluster_ids":["0","1_3","2_10"]},{"arg_id":"Acsv-107_1","argument":"かもめの玉子の種類の多さに驚いた","x":12.106318,"y":-6.849576,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-107_2","argument":"また来たい","x":13.349299,"y":-2.0217748,"p":0,"cluster_ids":["0","1_2","2_12"]},{"arg_id":"Acsv-108_0","argument":"かもめソフトは550円で、ソフトクリーム部門では高めだが、パフェ気分には相応しいと思う。期間限定のラズベリー味は甘酸っぱく、濃厚なソフトクリームが美味しかった。地元民が多様なパンやお菓子をいつでも買えるのが羨ましい。","x":9.700358,"y":-6.0632195,"p":0,"cluster_ids":["0","1_3","2_0"]},{"arg_id":"Acsv-109_0","argument":"オシャレな店で、店員の接客が良い","x":13.287631,"y":-0.5376542,"p":0,"cluster_ids":["0","1_2","2_9"]},{"arg_id":"Acsv-109_1","argument":"ここでしか手に入らないシュークリームがある","x":9.576993,"y":-3.7847402,"p":0,"cluster_ids":["0","1_3","2_35"]},{"arg_id":"Acsv-109_2","argument":"かもめの玉子以外にもバラエティ豊かな品揃えがある","x":12.582259,"y":-5.9907794,"p":0,"cluster_ids":["0","1_4","2_11"]},{"arg_id":"Acsv-110_0","argument":"かもめの玉子が大好きな長男の希望で再訪した","x":12.125068,"y":-5.957593,"p":0,"cluster_ids":["0","1_4","2_11"]},{"arg_id":"Acsv-110_1","argument":"前回はガランとしていたカフェが今回は賑わっていた","x":10.880912,"y":-1.7071508,"p":0,"cluster_ids":["0","1_2","2_17"]},{"arg_id":"Acsv-110_2","argument":"秋の新メニューとしてお芋バージョンと栗バージョンが販売されていた","x":11.221881,"y":-6.044291,"p":0,"cluster_ids":["0","1_4","2_14"]},{"arg_id":"Acsv-110_3","argument":"ソフトクリームやパフェ、パンも販売されている","x":10.524261,"y":-2.9557576,"p":0,"cluster_ids":["0","1_1","2_18"]},{"arg_id":"Acsv-111_0","argument":"オシャレな建物でお土産をたくさん買った","x":12.170711,"y":-2.6486523,"p":0,"cluster_ids":["0","1_2","2_23"]},{"arg_id":"Acsv-111_1","argument":"カモメの玉子の直営店限定バージョンがある","x":12.079958,"y":-6.1556973,"p":0,"cluster_ids":["0","1_4","2_11"]},{"arg_id":"Acsv-111_2","argument":"周りの雰囲気がとても良い","x":12.48711,"y":-1.2362757,"p":0,"cluster_ids":["0","1_2","2_32"]},{"arg_id":"Acsv-112_0","argument":"かもめのたまごは意外に種類が豊富で驚く","x":12.655164,"y":-6.486381,"p":0,"cluster_ids":["0","1_4","2_11"]},{"arg_id":"Acsv-112_1","argument":"パンコーナーのあんぱんは特に絶品","x":10.405341,"y":-4.2252703,"p":0,"cluster_ids":["0","1_6","2_33"]},{"arg_id":"Acsv-113_0","argument":"かき氷は最高級で、ふわふわで甘く、冷たく、繊細な濃厚な味が美味しかった","x":9.396741,"y":-4.8113356,"p":0,"cluster_ids":["0","1_3","2_24"]},{"arg_id":"Acsv-113_1","argument":"暑すぎてテイクアウトしたら、車に着くまでにかき氷が溶けて小さくなった","x":9.5288725,"y":-3.2271256,"p":0,"cluster_ids":["0","1_3","2_4"]},{"arg_id":"Acsv-113_2","argument":"早く食べないと写真を撮っている場合ではなかった","x":12.32302,"y":-3.2183688,"p":0,"cluster_ids":["0","1_6","2_29"]},{"arg_id":"Acsv-114_0","argument":"美味しいお菓子が多くて選ぶのが難しい","x":11.372803,"y":-4.3839893,"p":0,"cluster_ids":["0","1_6","2_1"]},{"arg_id":"Acsv-114_1","argument":"佐々木関連のお菓子やリンゴのお菓子はお土産として喜ばれた","x":11.356893,"y":-4.2116847,"p":0,"cluster_ids":["0","1_6","2_1"]},{"arg_id":"Acsv-114_2","argument":"レーズンクリームのどら焼きとみたらし団子入りのソフトクリームが美味しかった","x":9.042114,"y":-4.542273,"p":0,"cluster_ids":["0","1_3","2_24"]},{"arg_id":"Acsv-114_3","argument":"飲み物のサービスが嬉しかった","x":10.050608,"y":-1.1824534,"p":0,"cluster_ids":["0","1_1","2_15"]},{"arg_id":"Acsv-114_4","argument":"隣接する施設で学び、消費を通じて大船渡の活性化に貢献したい","x":14.090065,"y":-3.3051052,"p":0,"cluster_ids":["0","1_5","2_20"]},{"arg_id":"Acsv-115_0","argument":"岩手三陸銘菓かもめの玉子は美味しいお土産","x":13.426882,"y":-5.237223,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-116_0","argument":"かもめの玉子には色々な種類がある","x":12.259139,"y":-7.000748,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-116_1","argument":"お洒落なお菓子がある","x":11.803012,"y":-3.930813,"p":0,"cluster_ids":["0","1_6","2_25"]},{"arg_id":"Acsv-116_2","argument":"美味しい手作りパンがある","x":10.656838,"y":-3.9297137,"p":0,"cluster_ids":["0","1_6","2_13"]},{"arg_id":"Acsv-117_0","argument":"カモメソフトはハーフサイズかスモールサイズが望ましい","x":6.989003,"y":-5.707442,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-117_1","argument":"カモメソフトのカップがあればさらに良い","x":7.02302,"y":-5.7770524,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-117_2","argument":"ひとつまるまるは中年の胃袋にはキツイ","x":7.934888,"y":-5.6582246,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-118_0","argument":"和菓子は美味しく、特にどら焼きはスーパーでは味わえない味がある","x":10.954105,"y":-4.771449,"p":0,"cluster_ids":["0","1_6","2_21"]},{"arg_id":"Acsv-118_1","argument":"パンはお店で作った品が良いが、菓子パンはイマイチで食パンの厚切り4枚入りがお勧め","x":10.467171,"y":-4.0502424,"p":0,"cluster_ids":["0","1_6","2_33"]},{"arg_id":"Acsv-118_2","argument":"中華まんじゅうは白胡麻が施されたもっちりとした揚げ物で、お土産に重宝する","x":11.23359,"y":-4.0662584,"p":0,"cluster_ids":["0","1_6","2_1"]},{"arg_id":"Acsv-118_3","argument":"お店にはお菓子作りの体験コーナーがあり、外には広い敷地でイベントも行われる","x":11.974383,"y":-3.7626538,"p":0,"cluster_ids":["0","1_6","2_25"]},{"arg_id":"Acsv-118_4","argument":"休日には家族連れやカップル、友達同士で人の出入りが多い","x":12.775938,"y":-1.6587816,"p":0,"cluster_ids":["0","1_2","2_12"]},{"arg_id":"Acsv-119_0","argument":"お洒落なお店で変わったかもめの玉子が販売されている","x":12.461849,"y":-5.8531876,"p":0,"cluster_ids":["0","1_4","2_11"]},{"arg_id":"Acsv-120_0","argument":"さいとう製菓の本店は多様な種類のお菓子を販売しており、特にかもめのたまごが有名です。","x":12.713263,"y":-4.708614,"p":0,"cluster_ids":["0","1_6","2_19"]},{"arg_id":"Acsv-120_1","argument":"駐車場はあるが、繁忙期には満車になることがある。","x":11.904451,"y":-1.3583901,"p":0,"cluster_ids":["0","1_2","2_2"]},{"arg_id":"Acsv-120_2","argument":"店舗内にはさいとう製菓の歴史を示す写真や、遊びスペース、パン販売コーナー、ソフトクリームもある。","x":12.623714,"y":-3.7621858,"p":0,"cluster_ids":["0","1_6","2_29"]},{"arg_id":"Acsv-120_3","argument":"店舗内は非常に清潔で、快適に買い物が楽しめる。","x":12.385611,"y":-0.86373293,"p":0,"cluster_ids":["0","1_2","2_32"]},{"arg_id":"Acsv-121_0","argument":"定番のかもめの玉子は関東の小さなスーパーでも販売されており、土産としての希少性が薄れていると感じる","x":11.915116,"y":-6.0192847,"p":0,"cluster_ids":["0","1_4","2_14"]},{"arg_id":"Acsv-121_1","argument":"かもめテラスでは初めて見る様々なかもめの玉子が販売されていた","x":12.487569,"y":-6.3103027,"p":0,"cluster_ids":["0","1_4","2_11"]},{"arg_id":"Acsv-121_2","argument":"いくつかの種類のかもめの玉子を試食した結果、美味しさと価格は比例しないと感じた","x":11.986417,"y":-7.053648,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-121_3","argument":"かもめテラスのソフトクリームは濃厚で美味しかった","x":9.138867,"y":-5.4451694,"p":0,"cluster_ids":["0","1_3","2_10"]},{"arg_id":"Acsv-121_4","argument":"お店は清潔で、店員さんも親切で感じが良かった","x":12.8093815,"y":-0.7554957,"p":0,"cluster_ids":["0","1_2","2_32"]},{"arg_id":"Acsv-122_0","argument":"お土産に買った中で一番好評だったのは「りんご　かもめの玉子」","x":11.586731,"y":-5.6151867,"p":0,"cluster_ids":["0","1_4","2_27"]},{"arg_id":"Acsv-123_0","argument":"お菓子の種類が豊富で楽しかった","x":11.576999,"y":-4.397309,"p":0,"cluster_ids":["0","1_6","2_1"]},{"arg_id":"Acsv-123_1","argument":"店員さんが親切だった","x":13.145749,"y":-0.6815705,"p":0,"cluster_ids":["0","1_2","2_9"]},{"arg_id":"Acsv-123_2","argument":"つい買い過ぎてしまった","x":12.120553,"y":-2.7633796,"p":0,"cluster_ids":["0","1_2","2_23"]},{"arg_id":"Acsv-124_0","argument":"ソフトクリームなどを販売しており、座って食べられる明るくて広いスペースがある","x":10.861233,"y":-2.1185076,"p":0,"cluster_ids":["0","1_1","2_7"]},{"arg_id":"Acsv-125_0","argument":"カモメソフトは美味しかった","x":7.2455144,"y":-5.828798,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-126_0","argument":"かもめの玉子ファンはぜひ訪れるべき","x":12.292124,"y":-6.5304193,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-126_1","argument":"和洋菓子やソフトクリームも楽しめる","x":11.302905,"y":-4.5250444,"p":0,"cluster_ids":["0","1_6","2_1"]},{"arg_id":"Acsv-127_0","argument":"かもめテラスの外観はおしゃれで、中のお土産やパンも可愛らしくおしゃれだった。食べたパンは3種類で、どれも美味しかった。","x":10.964774,"y":-4.0543737,"p":0,"cluster_ids":["0","1_6","2_13"]},{"arg_id":"Acsv-127_1","argument":"隣の斎藤餅屋での焼きみたらし団子が驚くほど美味しかったので、ぜひ食べに行ってほしい。コーヒーとも相性が良い。","x":8.967555,"y":-4.2927637,"p":0,"cluster_ids":["0","1_3","2_24"]},{"arg_id":"Acsv-127_2","argument":"お店の方の対応が素敵で、笑顔が印象的だった。","x":13.194519,"y":-0.5532467,"p":0,"cluster_ids":["0","1_2","2_9"]},{"arg_id":"Acsv-128_0","argument":"5月の連休に行った際、夕方は混んでいた","x":12.6536875,"y":-1.6843235,"p":0,"cluster_ids":["0","1_2","2_12"]},{"arg_id":"Acsv-128_1","argument":"カモメソフトを購入し、カモメの翼のチョコレートとカモメの玉子のあんが絞ってあった","x":7.105235,"y":-5.8978486,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-128_2","argument":"あんはマッタリとしており、カモメの玉子が好きなので美味しかった","x":7.332307,"y":-5.642284,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-128_3","argument":"イチゴのタイプもあり、基本のソフトが美味しいのでどれでも美味しいと思う","x":9.218696,"y":-5.110562,"p":0,"cluster_ids":["0","1_3","2_10"]},{"arg_id":"Acsv-129_0","argument":"旅行で立ち寄ったお店の荷造りがとても丁寧で感激した","x":12.899619,"y":-0.91911834,"p":0,"cluster_ids":["0","1_2","2_32"]},{"arg_id":"Acsv-129_1","argument":"他店の商品で煎餅が割れないように丁寧に包まれていた","x":11.669011,"y":-3.5836384,"p":0,"cluster_ids":["0","1_2","2_8"]},{"arg_id":"Acsv-129_2","argument":"かもめの玉子が美味しく、もっと買えば良かったと後悔している","x":11.70215,"y":-6.85013,"p":0,"cluster_ids":["0","1_4","2_28"]},{"arg_id":"Acsv-130_0","argument":"色々な「かもめの玉子」が販売されており、美味しいお菓子やパンも楽しめる","x":12.493033,"y":-5.387299,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-130_1","argument":"子ども達が「かもめの玉子」のデコレーション体験をしている","x":13.19703,"y":-6.5272317,"p":0,"cluster_ids":["0","1_4","2_30"]},{"arg_id":"Acsv-130_2","argument":"イートインコーナーでは美味しいソフトクリームやお団子が楽しめる","x":9.304467,"y":-3.363224,"p":0,"cluster_ids":["0","1_3","2_4"]},{"arg_id":"Acsv-130_3","argument":"お店は清潔でコロナの感染防止対策がされている","x":12.503903,"y":-0.8087594,"p":0,"cluster_ids":["0","1_2","2_32"]},{"arg_id":"Acsv-130_4","argument":"スタッフの応対が丁寧で気持ちよい","x":13.291648,"y":-0.41945833,"p":0,"cluster_ids":["0","1_2","2_9"]},{"arg_id":"Acsv-130_5","argument":"リピートして訪れた","x":13.454522,"y":-2.1211464,"p":0,"cluster_ids":["0","1_2","2_12"]},{"arg_id":"Acsv-131_0","argument":"期待していたよりも普通のお土産屋さんだったため、がっかりした","x":12.380012,"y":-2.9338996,"p":0,"cluster_ids":["0","1_2","2_34"]},{"arg_id":"Acsv-131_1","argument":"駐車場が狭く、店内も密でコロナの時期には不安を感じた","x":12.095269,"y":-1.1256543,"p":0,"cluster_ids":["0","1_2","2_2"]},{"arg_id":"Acsv-131_2","argument":"お昼頃に訪れたが、ほとんどの商品が売り切れており、ソフトクリームしかなかった","x":10.744062,"y":-3.001194,"p":0,"cluster_ids":["0","1_1","2_18"]},{"arg_id":"Acsv-131_3","argument":"シュークリームなどの人気商品は連休や土日に多めに作ることができないのか疑問に思った","x":9.802917,"y":-3.6244295,"p":0,"cluster_ids":["0","1_3","2_4"]},{"arg_id":"Acsv-131_4","argument":"再訪したいとは思えなかった","x":13.375125,"y":-2.1916533,"p":0,"cluster_ids":["0","1_2","2_12"]},{"arg_id":"Acsv-132_0","argument":"かもめの玉子の種類が多くて驚いた","x":12.16431,"y":-6.8889856,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-132_1","argument":"小さなアップルパイが美味しそうで購入した","x":10.967894,"y":-4.4952793,"p":0,"cluster_ids":["0","1_6","2_1"]},{"arg_id":"Acsv-132_2","argument":"ケーキやパン、ソフトクリームも販売していて訪問して良かった","x":10.655608,"y":-3.1344917,"p":0,"cluster_ids":["0","1_1","2_18"]},{"arg_id":"Acsv-132_3","argument":"店内・外がとても綺麗だった","x":12.499868,"y":-0.87898093,"p":0,"cluster_ids":["0","1_2","2_32"]},{"arg_id":"Acsv-133_0","argument":"期間限定ソフトクリームは渋皮栗味で、ワッフルコーンはかもめソフトとは異なる味が楽しめる","x":9.063805,"y":-5.6213465,"p":0,"cluster_ids":["0","1_3","2_10"]},{"arg_id":"Acsv-133_1","argument":"定番のかもめソフトは、お菓子「かもめのたまご」の黄身あんがモンブランのようにトッピングされている","x":10.243038,"y":-6.4113703,"p":0,"cluster_ids":["0","1_3","2_22"]},{"arg_id":"Acsv-133_2","argument":"どちらのソフトクリームも食べごたえがあり、美味しい","x":9.137839,"y":-5.1907306,"p":0,"cluster_ids":["0","1_3","2_10"]},{"arg_id":"Acsv-133_3","argument":"喫茶利用時には無料のお茶があり、紅茶の種類もある","x":9.810783,"y":-1.433604,"p":0,"cluster_ids":["0","1_1","2_15"]},{"arg_id":"Acsv-134_0","argument":"日曜日の混雑時でも従業員は笑顔で応対してくれた","x":13.246282,"y":-0.40364152,"p":0,"cluster_ids":["0","1_2","2_9"]},{"arg_id":"Acsv-135_0","argument":"クッキーシュークリームが美味しかった","x":9.3425045,"y":-3.9915512,"p":0,"cluster_ids":["0","1_3","2_35"]},{"arg_id":"Acsv-136_0","argument":"家族三人でソフトクリームを食べた","x":8.672036,"y":-4.757766,"p":0,"cluster_ids":["0","1_3","2_24"]},{"arg_id":"Acsv-136_1","argument":"美味しそうなパンをお土産にたくさん買った","x":11.013682,"y":-4.1293344,"p":0,"cluster_ids":["0","1_6","2_13"]},{"arg_id":"Acsv-136_2","argument":"家で食べたパンがとても美味しかった","x":10.427744,"y":-4.0701623,"p":0,"cluster_ids":["0","1_6","2_33"]},{"arg_id":"Acsv-137_0","argument":"さいとう製菓はかもめの玉子で有名な直販店で、様々な種類のかもめの玉子が購入できる。","x":12.81056,"y":-5.0428658,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-137_1","argument":"店内には土産売店とカフェが併設されており、ソフトクリームやお団子、コーヒーを楽しめる。","x":10.4984255,"y":-2.4603639,"p":0,"cluster_ids":["0","1_1","2_7"]},{"arg_id":"Acsv-137_2","argument":"奥にはイベント用の工房があり、オリジナルのかもめの玉子を作ることができるが、開催日時は決まっているため、ホームページで確認が必要。","x":13.229304,"y":-6.1596603,"p":0,"cluster_ids":["0","1_4","2_30"]},{"arg_id":"Acsv-138_0","argument":"平屋のオシャレなお店で、かもめの玉子以外にもショコラやリンゴの餡があり美味しかった","x":12.008114,"y":-5.5846095,"p":0,"cluster_ids":["0","1_4","2_27"]},{"arg_id":"Acsv-138_1","argument":"店内でソフトクリームを食べることができ、お土産にプリンも購入した","x":10.151652,"y":-3.2459006,"p":0,"cluster_ids":["0","1_3","2_4"]},{"arg_id":"Acsv-138_2","argument":"東日本大震災で被災したお店で、応援したいと思っている","x":13.581346,"y":-1.5419356,"p":0,"cluster_ids":["0","1_2","2_12"]},{"arg_id":"Acsv-139_0","argument":"さいとう製菓は多種多様なお菓子を作っている","x":12.584312,"y":-4.289798,"p":0,"cluster_ids":["0","1_6","2_19"]},{"arg_id":"Acsv-139_1","argument":"気さくなコミュニティ感覚の店舗である","x":12.54682,"y":-0.7685872,"p":0,"cluster_ids":["0","1_2","2_32"]},{"arg_id":"Acsv-139_2","argument":"かもめの玉子のデコレーション体験ができるので子供達と行くのに良い","x":13.189891,"y":-6.6170754,"p":0,"cluster_ids":["0","1_4","2_30"]},{"arg_id":"Acsv-140_0","argument":"大船渡の手土産に適したお店がキャッセンモールの隣にあり、分かりやすい場所に位置している","x":13.430582,"y":-3.9340875,"p":0,"cluster_ids":["0","1_5","2_5"]},{"arg_id":"Acsv-140_1","argument":"駐車場は広く、ゆったりと停められるスペースがある","x":11.866446,"y":-1.3381689,"p":0,"cluster_ids":["0","1_2","2_2"]},{"arg_id":"Acsv-140_2","argument":"店内には軽食スペースがあり、小休止が可能だが長居はできない","x":10.594096,"y":-1.969785,"p":0,"cluster_ids":["0","1_1","2_7"]},{"arg_id":"Acsv-140_3","argument":"かもめの玉子以外にも様々なお菓子やケーキが販売されている","x":12.640602,"y":-5.5926843,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-140_4","argument":"かもめのショコらんを手土産として購入し、好評だった","x":11.792704,"y":-5.7520046,"p":0,"cluster_ids":["0","1_4","2_27"]},{"arg_id":"Acsv-141_0","argument":"昼前に訪れたが賑わっていた。テーブルが空いていなかったので外のベンチに座った。","x":12.8183,"y":-1.8932879,"p":0,"cluster_ids":["0","1_2","2_12"]},{"arg_id":"Acsv-141_1","argument":"餡と冷たいソフトクリームの相性が完璧で、オプションで追い餡が欲しい。","x":8.892782,"y":-5.56783,"p":0,"cluster_ids":["0","1_3","2_10"]},{"arg_id":"Acsv-141_2","argument":"快晴で気温が上がった日に食べるソフトクリームは格別で、550円は安い。","x":9.876464,"y":-5.6625075,"p":0,"cluster_ids":["0","1_3","2_26"]},{"arg_id":"Acsv-142_0","argument":"イカスミ煎餅ウニのせは塩味と甘味があり、美味しかった","x":10.29159,"y":-4.8208857,"p":0,"cluster_ids":["0","1_6","2_21"]},{"arg_id":"Acsv-142_1","argument":"店舗のトップが客を見送りする姿に感動した","x":13.279514,"y":-0.84504896,"p":0,"cluster_ids":["0","1_2","2_9"]},{"arg_id":"Acsv-143_0","argument":"イートインでクッキーシューを食べた。店内はとても綺麗で、気持ちよく商品を選ぶことができる。","x":9.432368,"y":-3.3995748,"p":0,"cluster_ids":["0","1_3","2_4"]},{"arg_id":"Acsv-144_0","argument":"かもめの卵の故郷はオーソドックスなミニが一番食べやすく美味しい","x":11.46014,"y":-6.9213753,"p":0,"cluster_ids":["0","1_4","2_28"]},{"arg_id":"Acsv-145_0","argument":"明るい雰囲気で清潔感のある素敵なお店だった","x":12.787236,"y":-0.97606564,"p":0,"cluster_ids":["0","1_2","2_32"]},{"arg_id":"Acsv-145_1","argument":"お土産を購入し、ソフトクリームを楽しんだ","x":10.111916,"y":-3.4806018,"p":0,"cluster_ids":["0","1_3","2_4"]},{"arg_id":"Acsv-145_2","argument":"近くに立ち寄った際は再訪したい","x":13.426716,"y":-2.1416655,"p":0,"cluster_ids":["0","1_2","2_12"]},{"arg_id":"Acsv-146_0","argument":"ここだけでしか買えない種類がたくさんあった","x":12.145274,"y":-2.9974585,"p":0,"cluster_ids":["0","1_2","2_8"]},{"arg_id":"Acsv-146_1","argument":"お店のお姉さん方の笑顔がとても素敵だった","x":13.128856,"y":-0.59759057,"p":0,"cluster_ids":["0","1_2","2_9"]},{"arg_id":"Acsv-147_0","argument":"カフェスペースでは紅茶が無料で提供されている","x":9.918461,"y":-1.5245513,"p":0,"cluster_ids":["0","1_1","2_15"]},{"arg_id":"Acsv-147_1","argument":"カフェスペースはちょっとしたオフィスワークにも利用できる","x":10.451463,"y":-1.7530775,"p":0,"cluster_ids":["0","1_1","2_7"]},{"arg_id":"Acsv-148_0","argument":"みたらし団子は注文後に焼かれ、あったかくて美味しかった","x":8.935479,"y":-4.4610023,"p":0,"cluster_ids":["0","1_3","2_24"]},{"arg_id":"Acsv-148_1","argument":"カモメソフトは子供たちも喜んで食べていた","x":7.0065074,"y":-5.991405,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-149_0","argument":"かもめの玉子は白餡を薄いカステラ生地で包み、ホワイトチョコレートでコーティングした卵型のお菓子で、三陸土産の定番になりつつある。","x":12.9107895,"y":-5.701579,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-149_1","argument":"県内限定の季節商品や一口サイズの「ミニかもめの玉子」など、様々なバリエーションが販売されている。","x":11.439756,"y":-5.935325,"p":0,"cluster_ids":["0","1_4","2_14"]},{"arg_id":"Acsv-150_0","argument":"盛岡のさいとう製菓本店は洗練されていてオシャレ","x":12.541324,"y":-3.824019,"p":0,"cluster_ids":["0","1_6","2_29"]},{"arg_id":"Acsv-150_1","argument":"アイスや団子が食べられるのは盛岡では珍しい","x":9.048597,"y":-3.3684752,"p":0,"cluster_ids":["0","1_3","2_35"]},{"arg_id":"Acsv-150_2","argument":"実家に帰る時はいつもかもめの玉子を買っていくが大好評","x":12.242756,"y":-5.7835884,"p":0,"cluster_ids":["0","1_4","2_27"]},{"arg_id":"Acsv-151_0","argument":"青森県や長野県のお土産として、かもめの玉子やアップルパイは外せない定番メニューである","x":11.909027,"y":-5.837436,"p":0,"cluster_ids":["0","1_4","2_27"]},{"arg_id":"Acsv-152_0","argument":"明るく開放的な店内でデザートも楽しめる","x":11.477338,"y":-2.6054065,"p":0,"cluster_ids":["0","1_2","2_23"]},{"arg_id":"Acsv-152_1","argument":"岩手のお土産にぴったりな場所","x":13.61577,"y":-5.117544,"p":0,"cluster_ids":["0","1_5","2_31"]},{"arg_id":"Acsv-152_2","argument":"千葉ロッテのブースもある","x":11.194021,"y":-2.0602543,"p":0,"cluster_ids":["0","1_2","2_17"]},{"arg_id":"Acsv-153_0","argument":"施設は綺麗でキッズスペースもあり、カモメの玉子がたくさんあって楽しい","x":11.112942,"y":-1.2817756,"p":0,"cluster_ids":["0","1_2","2_17"]},{"arg_id":"Acsv-153_1","argument":"建物は広くないが、隣接する食べ物屋さんでお昼ご飯が選べる","x":10.959151,"y":-2.2466176,"p":0,"cluster_ids":["0","1_1","2_7"]},{"arg_id":"Acsv-153_2","argument":"夏には散歩も楽しめそう","x":11.886162,"y":-1.8653116,"p":0,"cluster_ids":["0","1_2","2_2"]},{"arg_id":"Acsv-154_0","argument":"和菓子、洋菓子、パンとお土産が一ヵ所で揃うのは便利である","x":11.445293,"y":-3.8194873,"p":0,"cluster_ids":["0","1_6","2_25"]},{"arg_id":"Acsv-154_1","argument":"店員さんは丁寧に対応してくれた","x":13.19667,"y":-0.57775676,"p":0,"cluster_ids":["0","1_2","2_9"]},{"arg_id":"Acsv-154_2","argument":"お土産をたくさん買う際に持ち運べるかごがなく不便だった","x":12.467806,"y":-2.8206973,"p":0,"cluster_ids":["0","1_2","2_34"]},{"arg_id":"Acsv-154_3","argument":"同じようなお菓子が二種類あり、詰め合わせができず両方買う必要があった","x":11.7486925,"y":-4.2202077,"p":0,"cluster_ids":["0","1_6","2_25"]},{"arg_id":"Acsv-154_4","argument":"バラ売り商品があれば良かった","x":12.219335,"y":-3.0683393,"p":0,"cluster_ids":["0","1_2","2_8"]},{"arg_id":"Acsv-154_5","argument":"イートインコーナーが少し汚れていたのが残念だった","x":11.411394,"y":-1.7644359,"p":0,"cluster_ids":["0","1_2","2_17"]},{"arg_id":"Acsv-155_0","argument":"サクラサンデーは550円で食べごたえがある","x":10.158043,"y":-5.646021,"p":0,"cluster_ids":["0","1_3","2_26"]},{"arg_id":"Acsv-156_0","argument":"さいとう製菓はおしゃれな店内で和菓子、ケーキ、パン、ソフトクリームを販売している","x":12.601351,"y":-3.9128528,"p":0,"cluster_ids":["0","1_6","2_29"]},{"arg_id":"Acsv-156_1","argument":"さいとう製菓にはイートインスペースがあり、フリーWi-Fiが利用できる","x":9.965298,"y":-1.583943,"p":0,"cluster_ids":["0","1_1","2_15"]},{"arg_id":"Acsv-156_2","argument":"無料のお茶と購入したお菓子を楽しみながら、リラックスして過ごせる","x":9.61295,"y":-1.7449279,"p":0,"cluster_ids":["0","1_1","2_15"]},{"arg_id":"Acsv-157_0","argument":"明るい店内でお土産が豊富に選べて楽しい","x":11.860811,"y":-2.5153666,"p":0,"cluster_ids":["0","1_2","2_23"]},{"arg_id":"Acsv-157_1","argument":"数種類のパンや団子があり軽食ができる","x":10.462174,"y":-3.4986317,"p":0,"cluster_ids":["0","1_1","2_18"]},{"arg_id":"Acsv-157_2","argument":"お茶や水のサービスがある","x":9.922141,"y":-1.2822895,"p":0,"cluster_ids":["0","1_1","2_15"]},{"arg_id":"Acsv-157_3","argument":"座る場所があり、子供連れもOK","x":11.100263,"y":-1.3006973,"p":0,"cluster_ids":["0","1_2","2_17"]},{"arg_id":"Acsv-157_4","argument":"トイレが綺麗","x":12.521576,"y":-0.763537,"p":0,"cluster_ids":["0","1_2","2_32"]},{"arg_id":"Acsv-158_0","argument":"いろいろな種類のかもめのたまごがあり、買い物が楽しめた","x":12.18081,"y":-2.4900236,"p":0,"cluster_ids":["0","1_2","2_23"]},{"arg_id":"Acsv-158_1","argument":"3種類のパンを買って食べたが、とても美味しかった","x":10.472204,"y":-4.0104756,"p":0,"cluster_ids":["0","1_6","2_33"]},{"arg_id":"Acsv-159_0","argument":"夏限定かもめソフトのレモンは爽やかな風味でおすすめ","x":9.804993,"y":-6.1972656,"p":0,"cluster_ids":["0","1_3","2_0"]},{"arg_id":"Acsv-160_0","argument":"イートインで給湯器の紅茶が美味しく、シュークリームとの相性が最高である","x":9.258146,"y":-3.3303454,"p":0,"cluster_ids":["0","1_3","2_4"]},{"arg_id":"Acsv-160_1","argument":"カモメソフトもオススメである","x":7.064879,"y":-5.7451386,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-161_0","argument":"かもめの玉子を含む美味しいお菓子がたくさんあり、創業時からの和菓子も購入できる","x":12.456492,"y":-5.239994,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-161_1","argument":"オリジナルのかもめの玉子を作れるコーナーがあり、予約が必要","x":13.235039,"y":-6.1435432,"p":0,"cluster_ids":["0","1_4","2_30"]},{"arg_id":"Acsv-162_0","argument":"かもめの玉子ブルーベリーを買いに行った","x":12.051815,"y":-6.581679,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-162_1","argument":"カモメソフトを食べておいしかった","x":7.2955527,"y":-5.742241,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-162_2","argument":"デコカモメ作り体験は子供限定でやってみなかった","x":13.242066,"y":-6.6321335,"p":0,"cluster_ids":["0","1_4","2_30"]},{"arg_id":"Acsv-163_0","argument":"かもめの玉子がたくさん売っている","x":12.244277,"y":-6.3938694,"p":0,"cluster_ids":["0","1_4","2_11"]},{"arg_id":"Acsv-163_1","argument":"洋酒チョコでコーティングしたかもめの玉子が気になる","x":11.698852,"y":-6.7299666,"p":0,"cluster_ids":["0","1_4","2_28"]},{"arg_id":"Acsv-163_2","argument":"お店限定のクッキーシュークリームが美味しかった","x":9.544594,"y":-3.8265038,"p":0,"cluster_ids":["0","1_3","2_35"]},{"arg_id":"Acsv-164_0","argument":"おしゃれな建物で落ち着く","x":12.271744,"y":-1.4085143,"p":0,"cluster_ids":["0","1_2","2_2"]},{"arg_id":"Acsv-164_1","argument":"ソフトクリームが濃厚で美味しい","x":9.075632,"y":-5.244562,"p":0,"cluster_ids":["0","1_3","2_10"]},{"arg_id":"Acsv-164_2","argument":"季節限定のかもめの玉子やケーキが可愛く美味しそう","x":10.911985,"y":-6.150125,"p":0,"cluster_ids":["0","1_4","2_14"]},{"arg_id":"Acsv-165_0","argument":"品揃えは良いが、レジ会計列の並び方が分かりにくい","x":13.461754,"y":-0.93091166,"p":0,"cluster_ids":["0","1_2","2_9"]},{"arg_id":"Acsv-165_1","argument":"レジ前の列の目印があるが、他の客の会計を優先されることがある","x":13.526664,"y":-0.9005441,"p":0,"cluster_ids":["0","1_2","2_9"]},{"arg_id":"Acsv-165_2","argument":"混雑する時間帯には、コンビニのように並び方を統一してほしい","x":11.734289,"y":-2.0504696,"p":0,"cluster_ids":["0","1_2","2_23"]},{"arg_id":"Acsv-166_0","argument":"焼き菓子や和菓子が楽しめる","x":11.34279,"y":-4.624024,"p":0,"cluster_ids":["0","1_6","2_1"]},{"arg_id":"Acsv-166_1","argument":"ソフトクリームやかき氷、プリンを提供するカフェスペースがある","x":10.396003,"y":-2.263322,"p":0,"cluster_ids":["0","1_1","2_7"]},{"arg_id":"Acsv-167_0","argument":"新しい店には様々な商品が並んでいて楽しい","x":11.804246,"y":-2.4913275,"p":0,"cluster_ids":["0","1_2","2_23"]},{"arg_id":"Acsv-167_1","argument":"コーヒーやソフトクリーム、冷やし団子が楽しめる","x":9.216162,"y":-3.2147923,"p":0,"cluster_ids":["0","1_3","2_4"]},{"arg_id":"Acsv-168_0","argument":"和洋菓子がたくさんあり、美味しい。子供が遊べる場所もあり、気軽に入れる。特にソフトクリームが絶品でおすすめ。","x":11.3705635,"y":-4.6463013,"p":0,"cluster_ids":["0","1_6","2_1"]},{"arg_id":"Acsv-169_0","argument":"齋藤餅屋のイートインでは緑茶や紅茶がフリーで飲めるのでお勧め","x":9.654961,"y":-1.3858566,"p":0,"cluster_ids":["0","1_1","2_15"]},{"arg_id":"Acsv-169_1","argument":"齋藤餅屋には幼児が遊べるスペースがある","x":11.054583,"y":-1.38077,"p":0,"cluster_ids":["0","1_2","2_17"]},{"arg_id":"Acsv-170_0","argument":"銘菓かもめの玉子の体験コーナーがあり、パンやケーキも購入できるのが良い","x":13.129038,"y":-5.8085074,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-170_1","argument":"特にスーパーあんパンがお勧め","x":10.332577,"y":-4.242766,"p":0,"cluster_ids":["0","1_6","2_33"]},{"arg_id":"Acsv-171_0","argument":"かもめの玉子の試食があり、スッと溶けるかき氷も楽しめる","x":11.320973,"y":-6.919295,"p":0,"cluster_ids":["0","1_4","2_28"]},{"arg_id":"Acsv-171_1","argument":"パンを販売しており、子供を遊ばせながら大人はカフェスペースでくつろげる","x":10.847534,"y":-1.7091233,"p":0,"cluster_ids":["0","1_2","2_17"]},{"arg_id":"Acsv-172_0","argument":"お店が綺麗で、商品の中のお菓子が確認できるのが良かった","x":12.173127,"y":-3.6377096,"p":0,"cluster_ids":["0","1_6","2_29"]},{"arg_id":"Acsv-172_1","argument":"カレーパンが美味しくて思わず買ってしまった","x":10.738816,"y":-4.3046584,"p":0,"cluster_ids":["0","1_6","2_33"]},{"arg_id":"Acsv-173_0","argument":"清潔で和洋の菓子やソフトクリームがあり、思っていたより広くはなかった","x":11.779323,"y":-3.936062,"p":0,"cluster_ids":["0","1_6","2_25"]},{"arg_id":"Acsv-174_0","argument":"広々としたユックリ空間やレストランがあると良い","x":11.682154,"y":-1.5766114,"p":0,"cluster_ids":["0","1_2","2_2"]},{"arg_id":"Acsv-174_1","argument":"周りに様々な店舗が並び、中心地になりそう","x":11.587247,"y":-2.217947,"p":0,"cluster_ids":["0","1_2","2_23"]},{"arg_id":"Acsv-174_2","argument":"幻のクリームパンが絶品で、次の日でも美味しく食べられる","x":10.364495,"y":-4.194951,"p":0,"cluster_ids":["0","1_6","2_33"]},{"arg_id":"Acsv-174_3","argument":"ピザも美味しい","x":9.818372,"y":-4.5384555,"p":0,"cluster_ids":["0","1_6","2_33"]},{"arg_id":"Acsv-175_0","argument":"大船渡の公園で子供と遊んだ後に休憩できる場所","x":13.975531,"y":-3.1582763,"p":0,"cluster_ids":["0","1_5","2_20"]},{"arg_id":"Acsv-175_1","argument":"観光地価格でパンは高め、平日は種類が少ないが、大船渡に来たら寄る価値がある","x":13.716253,"y":-3.4291515,"p":0,"cluster_ids":["0","1_5","2_20"]},{"arg_id":"Acsv-176_0","argument":"かもめソフトはここでしか食べられない","x":9.28104,"y":-6.2992935,"p":0,"cluster_ids":["0","1_3","2_0"]},{"arg_id":"Acsv-177_0","argument":"かもめのたまごを買いに行った。きれいな施設でイートインのスイーツもあり、大船渡に来たときはおすすめ。","x":13.648268,"y":-3.673526,"p":0,"cluster_ids":["0","1_5","2_5"]},{"arg_id":"Acsv-178_0","argument":"カモメのソフトクリームをオススメ","x":7.0314975,"y":-5.5528893,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-179_0","argument":"美味しそうなスイーツが沢山あった","x":11.110727,"y":-4.32292,"p":0,"cluster_ids":["0","1_6","2_1"]},{"arg_id":"Acsv-180_0","argument":"かもめの玉子の総本店は、パン屋なども同じ建物内にあり、イートインで食事が可能","x":13.354225,"y":-4.823903,"p":0,"cluster_ids":["0","1_5","2_31"]},{"arg_id":"Acsv-181_0","argument":"ここの名物和菓子とスイーツは本当に美味しい","x":10.937451,"y":-4.8152103,"p":0,"cluster_ids":["0","1_6","2_21"]},{"arg_id":"Acsv-181_1","argument":"夕方に来たらアイスクリームを注文し、外の広場で夕日を楽しむべき","x":9.500889,"y":-2.9817276,"p":0,"cluster_ids":["0","1_3","2_4"]},{"arg_id":"Acsv-182_0","argument":"美味しいが、台湾人には少し甘すぎる","x":9.773061,"y":-5.2662606,"p":0,"cluster_ids":["0","1_3","2_26"]},{"arg_id":"Acsv-183_0","argument":"かもめ珠代はおいしい","x":11.412176,"y":-6.922583,"p":0,"cluster_ids":["0","1_4","2_28"]}],"clusters":[{"level":0,"id":"0","label":"全体","takeaway":"","value":443,"parent":"","density_rank_percentile":0},{"level":1,"id":"1_4","label":"かもめの玉子の多彩な魅力と体験","takeaway":"このクラスタは、かもめの玉子に関する多様な意見や体験を集約しています。季節限定のフレーバーや直営店での特別商品、子供向けのデコレーション体験など、かもめの玉子の魅力が多角的に表現されています。消費者は、かもめの玉子の豊富な種類や美味しさを楽しむだけでなく、地域特有の体験や思い出作りを通じて、より深い愛着を持つようになっています。また、試食や新しいバリエーションへの期待も高まっており、かもめの玉子が地域の名物としての存在感を強めています。","value":96,"parent":"0","density_rank_percentile":0.6666666666666666},{"level":1,"id":"1_5","label":"大船渡の魅力と地域活性化の融合","takeaway":"このクラスタは、大船渡市の名物であるかもめの玉子を中心に、地域の観光スポットや復興活動に関する意見を集約しています。訪問者は、かもめの玉子の多様なフレーバーやイートインスペースの魅力を楽しむ一方で、震災後の復興に向けた地域の努力や活性化の重要性を強調しています。大船渡の文化や自然を楽しみながら、地域経済の発展に寄与したいという思いが反映されており、観光地としての価値を再認識する声が多く見られます。","value":30,"parent":"0","density_rank_percentile":0.1666666666666666},{"level":1,"id":"1_1","label":"観光地でのスイーツとリラックス体験","takeaway":"このクラスタは、観光地における多様なスイーツや軽食の提供と、リラックスした食体験に関する意見を集約しています。訪問者は、特に無料の飲料サービスやイートインスペースの利用を通じて、心地よい休憩時間を楽しむことができると評価しています。また、人気のスイーツや軽食が豊富に揃っている一方で、品切れのリスクもあるため、早めの訪問が推奨されています。全体として、観光旅行の合間に楽しむことができる、魅力的な飲食体験が強調されています。","value":40,"parent":"0","density_rank_percentile":0.5},{"level":1,"id":"1_3","label":"地域特産スイーツとその体験の魅力","takeaway":"このクラスタは、地域特有のスイーツや季節限定のデザートに対する評価と体験を集約しています。特に、かもめソフトやみたらし団子など、地域の名物スイーツの美味しさや、イートインでの楽しみ方、家族での体験が強調されています。また、甘さや味の好みに関する意見も多く、個々の好みが反映される中で、地域のスイーツ文化の魅力が伝えられています。","value":104,"parent":"0","density_rank_percentile":1},{"level":1,"id":"1_6","label":"多彩なパンとお菓子の魅力","takeaway":"このクラスタは、様々な種類のパンやお菓子に対する高い評価と、訪れる人々の体験を集約しています。特に、焼きたてのパンや多様な和洋菓子、地域特有のスイーツに対する喜びが強調されており、店舗の清潔感やおしゃれな雰囲気、選ぶ楽しさが訪問者にとっての魅力となっています。また、体験コーナーや遊びスペースがあることで、家族連れや友人同士での訪問が楽しめる環境が整っていることも特徴です。","value":66,"parent":"0","density_rank_percentile":0.3333333333333333},{"level":1,"id":"1_2","label":"家族向けの快適なショッピング体験とサービス向上","takeaway":"このクラスタは、家族連れが快適に過ごせるショッピング体験や飲食スペースに関する意見を集約しています。利用者は、清潔感のある施設や多様な商品選択肢、親切な接客を評価しつつ、遊び場やイートインコーナーの改善点についても指摘しています。また、訪問者は楽しい買い物体験を求めており、特に子供向けのサービスや快適な空間の重要性が強調されています。全体として、家族がリラックスしながら楽しめる環境の整備が求められています。","value":107,"parent":"0","density_rank_percentile":0.8333333333333334},{"level":2,"id":"2_14","label":"季節限定のかもめの玉子とそのバリエーション","takeaway":"このクラスタには、季節限定のかもめの玉子やそのバリエーションに関する情報が集まっています。特に、栗やお芋、みかん風味など、季節ごとに異なるフレーバーが販売されていることが強調されており、購入者はその希少性や美味しさに魅力を感じています。また、県内限定商品やミニサイズのバリエーションも言及されており、地域特有の魅力や多様性が感じられます。さらに、定番商品に対する希少性の低下についての意見もあり、消費者の期待や体験が反映されています。","value":11,"parent":"1_4","density_rank_percentile":0.5277777777777778},{"level":2,"id":"2_5","label":"大船渡のかもめの玉子とその周辺の魅力","takeaway":"このクラスタには、大船渡の名物であるかもめの玉子に関する情報や、関連する施設、スイーツ、イートインスペースの魅力が集まっています。訪問者は、かもめの玉子の多様なフレーバーや季節限定商品、焼きたての和菓子や洋菓子、さらには店の雰囲気やスタッフの対応に感謝し、手土産や観光スポットとしての大船渡の魅力を伝えています。特に、イートインスペースでの体験や、アクセスの良さが強調されており、訪れる価値があることが示されています。","value":10,"parent":"1_5","density_rank_percentile":0.5},{"level":2,"id":"2_18","label":"多様なスイーツと軽食を提供する人気の観光スポット","takeaway":"このクラスタには、ソフトクリームやパフェ、パン、ケーキなど多様なスイーツや軽食が販売されていることに関する情報が集まっています。訪問者は、特に本店ならではの限定商品や焼きたてのパン、団子などを楽しむことができると評価しています。しかし、人気商品は品切れになることが多く、特に午後の訪問時にはほとんどの商品が売り切れていることがあるため、早めの訪問が推奨されています。また、店内は新しく、観光旅行のお土産購入にも適していることが強調されています。","value":15,"parent":"1_1","density_rank_percentile":0.8333333333333334},{"level":2,"id":"2_26","label":"季節限定スイーツの評価と好み","takeaway":"このクラスタには、季節限定のスイーツやソフトクリームに対する評価が集まっています。特に、れもん味やサクラサンデーのような爽やかで美味しい選択肢に対する好意的な意見が多く見られます。一方で、チョコロックやスイートチョコロールに対しては、甘さや味の強さに関する個々の好みが反映されており、特に台湾人にとっては甘さが強すぎると感じられることもあります。全体として、甘いもの好きには魅力的な選択肢が多い一方で、個々の味の好みが分かれることが示されています。","value":7,"parent":"1_3","density_rank_percentile":0.5555555555555556},{"level":2,"id":"2_35","label":"地域限定のスイーツとイートイン体験の魅力","takeaway":"このクラスタには、盛岡でしか味わえない特別なスイーツやデザートに関する意見が集まっています。特に、クッキーシュークリームや季節限定のソフトクリーム、焼きだんごなど、地域特有の美味しさや体験を楽しむことができる点が強調されています。また、イートインコーナーでの多様な選択肢や、家族での好みの違いに関するエピソードも含まれており、地域のスイーツ文化の魅力を伝えています。","value":11,"parent":"1_3","density_rank_percentile":0.6666666666666666},{"level":2,"id":"2_33","label":"美味しいパンとスイーツの体験","takeaway":"このクラスタには、様々な種類のパンやスイーツに対する高い評価が集まっています。特に、あんぱんやカレーパン、クリームパンなどの具体的な商品名が挙げられ、それぞれの食感や味わいについての詳細な感想が述べられています。また、パンの質や食べるシチュエーション（キャンプ前後など）に関する言及もあり、全体として美味しい食べ物に対する喜びや満足感が強調されています。","value":14,"parent":"1_6","density_rank_percentile":0.3055555555555556},{"level":2,"id":"2_17","label":"家族連れに優しいイートインスペースと遊び場","takeaway":"このクラスタには、家族連れが快適に過ごせるイートインコーナーや子供向けの遊び場に関する意見が集まっています。利用者は、清潔感のある施設や多様なコーナーが整備されていることを評価しつつ、遊び場の工夫や清掃状態についての改善点も指摘しています。特に、子供が遊べるスペースがあることで、大人はリラックスしながら買い物やカフェを楽しむことができる点が強調されています。","value":15,"parent":"1_2","density_rank_percentile":0.6111111111111112},{"level":2,"id":"2_34","label":"お土産購入体験の多様な感想","takeaway":"このクラスタには、お土産を購入する際の便利さや不便さ、店舗の雰囲気、サービスの質に関する様々な意見が集まっています。利用者は、持ち運びの不便さや期待外れの体験を感じる一方で、特定の店舗の良さやサービスの充実度を評価しています。また、混雑や警備の状況、特別な商品やサービスの存在が、リピート訪問の意欲に影響を与えていることが伺えます。全体として、お土産購入に関する期待と実際の体験のギャップが見られる意見が多く、店舗の改善点や魅力が浮き彫りになっています。","value":6,"parent":"1_2","density_rank_percentile":0.8888888888888888},{"level":2,"id":"2_28","label":"かもめの玉子に関する多様な美味しさと種類への期待","takeaway":"このクラスタには、かもめの玉子に関する様々な意見が集まっています。試食体験や異なる種類のかもめの玉子の美味しさについての感想が多く、特にプレミアムやミニ、ソフトなどのバリエーションが好評です。利用者は、かもめの玉子の滑らかな食感や独特の味わいを楽しみ、さらなる種類の開発やアソート販売を望んでいます。また、故郷のオーソドックスなミニが一番食べやすいとの意見もあり、全体としてかもめの玉子の魅力を再確認する声が多く見られます。","value":15,"parent":"1_4","density_rank_percentile":0.1388888888888889},{"level":2,"id":"2_16","label":"かもめの玉子と多様なお菓子の魅力","takeaway":"このクラスタには、かもめの玉子を中心に、焼き菓子、パン、ケーキ、和菓子、ソフトクリームなど、さまざまなお菓子が販売されていることに関する情報が集まっています。かもめの玉子は特に有名で、定番商品から変わり種まで多様な種類が揃っており、店舗では焼き立てのパンや手作りの和菓子も楽しめることが強調されています。これにより、訪れる人々は多彩なお菓子を楽しむことができ、地域の名物としてのかもめの玉子の存在感が際立っています。","value":22,"parent":"1_4","density_rank_percentile":0.9166666666666666},{"level":2,"id":"2_8","label":"多様な商品選択肢と購入の利便性","takeaway":"このクラスタには、バラ売り商品や単品購入の可能性、他店との比較における商品の取り扱いや包装の丁寧さ、さらには特定の店舗でしか手に入らない商品への言及が含まれています。利用者は、豊富な商品ラインナップや購入のしやすさを評価し、特にお土産選びや通販での取り寄せに関する意見が集まっています。これにより、消費者のニーズに応える多様性と利便性が強調されています。","value":8,"parent":"1_2","density_rank_percentile":0.5833333333333334},{"level":2,"id":"2_12","label":"再訪したいお気に入りの飲食店","takeaway":"このクラスタには、訪問者が特に再訪を希望する飲食店に関する意見が集まっています。多くのコメントが、店内の雰囲気やスタッフの対応、料理の美味しさに対する高い評価を示しており、訪問者は家族や友人と共に楽しむことができる場所としてこの店を位置付けています。また、震災後の支援の意識や、観光客の多さも言及されており、地域に根ざした愛着が感じられます。","value":19,"parent":"1_2","density_rank_percentile":0.9722222222222222},{"level":2,"id":"2_3","label":"かもめの玉子の多様性と驚き","takeaway":"このクラスタには、かもめの玉子の多様な種類や新しいバリエーションに対する驚きや興味が集まっています。試食を通じて、美味しさと価格の関係に疑問を持つ意見や、様々な種類を楽しむことへの期待が表現されています。また、かもめの玉子ファンにとっての魅力や、コラボ商品に対する関心も示されています。","value":12,"parent":"1_4","density_rank_percentile":0.1111111111111111},{"level":2,"id":"2_22","label":"かもめソフトの魅力と多様なフレーバー","takeaway":"このクラスタには、名物のかもめソフトに関する様々な意見が集まっています。かもめの玉子の餡を使用したソフトクリームの美味しさや、季節限定のフレーバーの存在が強調されており、特にモンブランやレモン味の体験が語られています。また、テラスやカフェコーナーでの楽しみ方や、見た目の美しさ、販売状況についても触れられており、かもめソフトが提供する特別な体験が多面的に表現されています。","value":12,"parent":"1_3","density_rank_percentile":0.4722222222222222},{"level":2,"id":"2_2","label":"観光地における快適な空間と施設の改善要望","takeaway":"このクラスタには、観光地における快適な空間や施設に関する意見が集まっています。訪れる人々は、広々としたイートインスペースや駐車場の充実を求めており、特に繁忙期の混雑やコロナ禍での不安を感じています。また、景色やインテリアの変化を楽しむことができる環境が求められており、観光客や地元の人々がリラックスできる空間の重要性が強調されています。","value":12,"parent":"1_2","density_rank_percentile":0.7777777777777778},{"level":2,"id":"2_9","label":"接客の質と顧客体験の向上","takeaway":"このクラスタには、店舗のスタッフによる接客の質に関する意見が集まっています。多くのコメントがスタッフの親切さや丁寧な対応を称賛しており、顧客がリピートしたいと感じる要因となっています。一方で、レジの混雑や会計の優先順位に関する不満も見受けられ、接客の良さと店舗運営の改善点が共存していることが示されています。全体として、顧客はスタッフの笑顔や対応に感謝しつつ、より良い体験を求めていることが伺えます。","value":18,"parent":"1_2","density_rank_percentile":0.3611111111111111},{"level":2,"id":"2_20","label":"大震災後の大船渡市の復興と地域活性化","takeaway":"このクラスタには、大震災後の大船渡市における復興活動や地域の活性化に関する意見が集まっています。特に、かもめテラスを中心とした観光地の魅力や、地域の努力による街づくりの重要性が強調されています。訪問者は、大船渡の文化や自然を楽しみながら、地域経済の活性化に貢献したいという思いを持っており、復興の進展を願う声が多く見られます。また、観光地としての価値や、地域の賑わいを感じることができる場所としての大船渡の魅力が語られています。","value":14,"parent":"1_5","density_rank_percentile":0.0555555555555555},{"level":2,"id":"2_1","label":"多彩なお菓子の楽しみと選択肢の豊富さ","takeaway":"このクラスタには、和菓子や洋菓子、焼き菓子、ソフトクリームなど、さまざまなお菓子が豊富に揃っていることへの喜びや楽しさが表現されています。特に、日持ちするお菓子やお土産に適した商品が多く、選ぶ楽しさや美味しさが強調されています。また、子供が遊べる場所があることや、特定の商品のおすすめも含まれており、訪れる人々が気軽に楽しめる環境が整っていることが伺えます。","value":12,"parent":"1_6","density_rank_percentile":0.3333333333333333},{"level":2,"id":"2_13","label":"可愛らしいパンとお土産の魅力","takeaway":"このクラスタには、可愛らしいパンや手作りの美味しいパンに関する意見が集まっています。特に、焼きたてのパンやおしゃれな外観の店舗、さらにはお土産としてのパンの購入に対する期待が表れています。また、パンと一緒に他のお土産や甘味も楽しむことができる点が強調されており、訪れる人々がその魅力を感じている様子が伺えます。","value":10,"parent":"1_6","density_rank_percentile":0.1666666666666666},{"level":2,"id":"2_24","label":"大船渡の美味しいスイーツ体験","takeaway":"このクラスタには、大船渡周辺でのスイーツ体験に関する意見が集まっています。特に、焼きたての「みたらし団子」やソフトクリームに対する高い評価が目立ちます。多くの人が、みたらし団子とソフトクリームの組み合わせや、他のスイーツとの相性について語っており、地域の名物としての魅力を伝えています。また、かき氷やどら焼きなど、他のスイーツも含めた多様な体験が共有されており、訪れる価値があることを示唆しています。","value":13,"parent":"1_3","density_rank_percentile":0.2777777777777778},{"level":2,"id":"2_19","label":"さいとう製菓の多様なお菓子と特産品","takeaway":"このクラスタには、さいとう製菓が提供する多様なお菓子や特産品に関する情報が集まっています。特に、かもめのたまごが有名であり、直営店でしか味わえない特別な商品があることが強調されています。また、パンやケーキ、ソフトクリームなど、他の多様な商品も取り扱っており、訪れる人々がゆっくりとお土産を選ぶことができる活気ある店舗の雰囲気が伝わってきます。","value":6,"parent":"1_6","density_rank_percentile":0.7222222222222222},{"level":2,"id":"2_0","label":"かもめソフトの多様な味わいと評価","takeaway":"このクラスタには、かもめソフトに関する様々な意見が集まっています。利用者は、かもめソフトの味や種類についての感想を共有し、特にラズベリーやレモンなどの季節限定フレーバーに対する評価が見られます。また、濃厚さや甘さのバランスについての意見もあり、全体的にかもめソフトの美味しさが強調されています。地元の特産品としての魅力や、他のスイーツとの比較も行われており、かもめソフトが地域の食文化において重要な位置を占めていることが伺えます。","value":15,"parent":"1_3","density_rank_percentile":0.4166666666666667},{"level":2,"id":"2_10","label":"ソフトクリームの多様な味わいと美味しさ","takeaway":"このクラスタには、さまざまな種類のソフトクリームに対する評価が集まっています。あっさりした味わいから濃厚なもの、さらには限定フレーバーやトッピングとの組み合わせまで、食べる楽しみが多様であることが強調されています。特に、餡との相性や地域特有のソフトクリームの美味しさが語られ、全体としてソフトクリームが持つ魅力とその美味しさに対する期待が表現されています。","value":16,"parent":"1_3","density_rank_percentile":0.4444444444444444},{"level":2,"id":"2_11","label":"かもめのたまごの多様性と直営店の魅力","takeaway":"このクラスタには、かもめのたまごの豊富な種類や直営店の特別な商品に関する意見が集まっています。利用者は、直営店でしか手に入らない限定バージョンや、様々なフレーバーのかもめのたまごに驚きと喜びを感じており、特に総本店の品揃えの豊富さやお洒落な店舗の雰囲気を楽しんでいます。また、かもめのたまごへの愛着や再訪の意欲も表現されており、体験ラボへの興味も示されています。","value":16,"parent":"1_4","density_rank_percentile":0.6944444444444444},{"level":2,"id":"2_6","label":"カモメソフトの美味しさと家族での楽しみ","takeaway":"このクラスタには、カモメソフトに関するポジティブな体験や感想が集まっています。参加者は、カモメソフトの味やトッピングの美味しさを称賛し、特に家族や子供たちと一緒に楽しむ様子が描かれています。また、サイズやカップの提案もあり、より良い体験を求める声が見受けられます。全体として、カモメソフトは多くの人々に愛され、楽しさを共有するアイスクリームとして位置づけられています。","value":18,"parent":"1_3","density_rank_percentile":0.0833333333333333},{"level":2,"id":"2_4","label":"イートインでのスイーツ体験と商品選びの楽しさ","takeaway":"このクラスタには、イートインでのスイーツ体験に関するポジティブな意見が集まっています。クッキーシューやソフトクリーム、お団子などの美味しさや、店内の清潔感、商品選びの楽しさが強調されています。また、焼き立てのシュークリームや、給湯器の紅茶との相性についての言及もあり、イートインでの食事が特別な体験であることが示されています。さらに、テイクアウトの際の注意点や、人気商品の供給に関する疑問も含まれており、全体としてスイーツを楽しむための多様な視点が反映されています。","value":12,"parent":"1_3","density_rank_percentile":0.9444444444444444},{"level":2,"id":"2_15","label":"飲食店における無料飲料サービスの魅力","takeaway":"このクラスタには、飲食店やカフェにおける無料の飲料サービスに対するポジティブな意見が集まっています。利用者は、紅茶や緑茶、ほうじ茶などの無料提供を通じて、リラックスした時間を過ごすことができることを評価しています。また、イートインスペースやフリーWi-Fiの利用が可能であることも、快適な休憩を促進する要因となっています。これにより、飲食と共に心地よいひとときを楽しむことができるという点が強調されています。","value":13,"parent":"1_1","density_rank_percentile":0.2222222222222222},{"level":2,"id":"2_32","label":"清潔感と快適さを重視した店舗体験","takeaway":"このクラスタには、店舗の清潔感や快適さに関するポジティブな意見が集まっています。利用者は、店内外の美しさや清潔さ、感染防止対策が施されていることを高く評価しており、快適に買い物を楽しめる環境が整っていることに感謝しています。また、店員の親切さやコミュニティ感覚も強調されており、訪れるたびに心地よい体験ができることが期待されています。","value":15,"parent":"1_2","density_rank_percentile":0.25},{"level":2,"id":"2_31","label":"岩手の名物と佐々木朗希選手に関連する観光スポット","takeaway":"このクラスタには、岩手県の特産品や観光名所、特に佐々木朗希選手に関連する情報が集まっています。陸前高田市や大船渡市における佐々木選手の存在が強調され、彼のサイン入りユニフォームやコラボ商品であるかもめの玉子が紹介されています。また、かもめの玉子の総本店やその周辺の飲食施設についても言及されており、観光客が楽しめる食文化や地域の魅力が伝わっています。","value":6,"parent":"1_5","density_rank_percentile":0.8611111111111112},{"level":2,"id":"2_25","label":"多様なお菓子体験とお土産の魅力","takeaway":"このクラスタには、和洋の菓子やソフトクリーム、体験コーナーなど、さまざまなお菓子に関する情報が集まっています。お洒落で華やかな店内は、特に若い層を意識したコンセプトであり、秋限定の商品やお土産に適したアイテムが豊富に揃っています。また、ガラスケースからの注文や詰め合わせのルールに関するエピソードも含まれており、訪れる人々の体験が多様であることが示されています。全体として、便利さと楽しさを兼ね備えたお菓子の世界が描かれています。","value":11,"parent":"1_6","density_rank_percentile":0.3888888888888889},{"level":2,"id":"2_23","label":"楽しい買い物体験と多様なお土産の魅力","takeaway":"このクラスタには、買い物の楽しさや多様なお土産の魅力に関するポジティブな意見が集まっています。特に、色とりどりの商品の存在や、賑やかな雰囲気の中でのショッピング体験が強調されており、訪れる人々が楽しみながら選ぶことができる環境が整っていることが伺えます。また、新しい店舗やオシャレな雰囲気も、買い物をより一層楽しいものにしています。","value":14,"parent":"1_2","density_rank_percentile":0.75},{"level":2,"id":"2_30","label":"子供向けのかもめの玉子デコレーション体験","takeaway":"このクラスタには、子供たちが参加できるかもめの玉子のデコレーション体験に関する情報が集まっています。土日には特に体験コーナーが設けられ、家族連れにとって楽しいアクティビティとして推奨されています。参加者はオリジナルのかもめの玉子を作ることができ、予約が必要な場合もあるため、事前の確認が重要です。子供たちが楽しむ姿や、親子での体験を通じて、思い出を作る機会が提供されています。","value":9,"parent":"1_4","density_rank_percentile":0.0277777777777777},{"level":2,"id":"2_7","label":"カフェでのリラックスした食体験","takeaway":"このクラスタには、駐車場があるカフェでの食事や休憩に関するポジティブな体験が集まっています。訪れた人々は、ソフトクリームやお団子、コーヒーなどの甘味を楽しみながら、明るく広いスペースでリラックスできる環境を評価しています。また、カフェスペースはオフィスワークにも利用できるため、ちょっとした休憩や作業にも適していることが強調されています。全体として、清潔感のあるオシャレな空間で、心地よい時間を過ごすことができるという共通の感想が見受けられます。","value":12,"parent":"1_1","density_rank_percentile":1},{"level":2,"id":"2_27","label":"かもめの玉子とその関連商品に対する高評価","takeaway":"このクラスタには、かもめの玉子やそのバリエーションである「りんごかもめ」や「ショコらん」など、東北地方のお土産としての人気商品に対する好評が集まっています。訪問者は、これらのお菓子が美味しいだけでなく、特別な思い出や家族との共有の場面での喜びを感じており、再訪や購入の意欲が高いことが伺えます。また、試食やお店の雰囲気、他の美味しい商品との出会いも、全体的な満足度を高めています。","value":11,"parent":"1_4","density_rank_percentile":0.8055555555555556},{"level":2,"id":"2_29","label":"さいとう製菓の魅力的な店舗体験","takeaway":"このクラスタには、さいとう製菓の店舗に関するポジティブな意見が集まっています。店舗内の清潔感やオシャレなデザイン、遊びスペースや多様な商品ラインナップ（和菓子、ケーキ、パン、ソフトクリーム）に対する評価が見られます。訪問者は、商品の魅力を楽しむだけでなく、快適な空間での体験を重視しており、店舗の雰囲気や商品への期待感が強調されています。","value":7,"parent":"1_6","density_rank_percentile":0.6388888888888888},{"level":2,"id":"2_21","label":"地域の名物和菓子とスイーツの美味しさ","takeaway":"このクラスタには、特定の地域で提供される和菓子やスイーツの美味しさに関する意見が集まっています。特に、彼岸のおはぎやぼた餅、どら焼き、イカスミ煎餅ウニのせなど、地域特有の伝統的な和菓子が高く評価されており、他のお菓子も同様に美味しいとされています。利用者は、これらのスイーツが持つ独自の味わいや、スーパーでは味わえない特別な体験を楽しんでいることが伺えます。","value":6,"parent":"1_6","density_rank_percentile":0.1944444444444444}],"comments":{},"propertyMap":{},"translations":{},"overview":"この調査では、かもめの玉子や地域特産品に関する多様な意見が集約され、消費者の体験や地域活性化の重要性が強調されています。特に、かもめの玉子の魅力や地域の観光スポット、スイーツ文化が評価され、訪問者はリラックスした食体験を楽しんでいます。また、家族向けの快適なショッピング環境やサービス向上のニーズも明らかになり、地域経済の発展に寄与する意見が多く見られました。","config":{"name":"794f022e-2086-48ca-8e49-d442049627c0","input":"794f022e-2086-48ca-8e49-d442049627c0","question":"かもめテラスのGoogle Mapsレビュー","intro":"このAIが作成したレポートはGoogle Mapsのレビューに依拠している\n分析対象となったデータの件数は183件で、これらのデータに対してOpenAI APIを用いて443件の意見（議論）を抽出し、クラスタリングを行った。\n","model":"gpt-4o-mini","is_pubcom":true,"extraction":{"prompt":"/system\nあなたは専門的なリサーチアシスタントで、整理された議論のデータセットを作成するお手伝いをする役割です。\n人工知能に関する公開協議を実施した状況を想定しています。一般市民から寄せられた議論の例を提示しますので、それらをより簡潔で読みやすい形に整理するお手伝いをお願いします。必要な場合は2つの別個の議論に分割することもできますが、多くの場合は1つの議論にまとめる方が望ましいでしょう。\n結果は整形されたJSON形式の文字列リストとして返してください。\n要約は必ず日本語で作成してください。\n\n/human\n\nAIテクノロジーは、そのライフサイクル全体における環境負荷を削減することに焦点を当てて開発されるべきです。\n\n/ai\n\n[\n\"AIテクノロジーの環境負荷削減に焦点を当てるべき\"\n]\n\n/human\n\nAIの能力、限界、倫理的考慮事項について、一般市民を教育する協調的な取り組みが必要です。\n\n/ai\n\n[\n\"AIの能力について一般市民を教育すべき\",\n\"AIの限界と倫理的考慮事項について一般市民を教育すべき\"\n]\n\n/human\n\nAIはスマートホームやビルのエネルギー効率と居住者の快適性を最適化できます。\n\n/ai\n\n[\n\"AIはスマートホームやビルのエネルギー効率と居住者の快適性を最適化できる\"\n]\n\n/human\n\nAIはエネルギーグリッドを最適化し、無駄や炭素排出を削減できます。\n\n/ai\n\n[\n\"AIはエネルギーグリッドを最適化して無駄と炭素排出を削減できる\"\n]\n","workers":30,"limit":183,"properties":[],"categories":{},"category_batch_size":5,"source_code":"$17","model":"gpt-4o-mini"},"hierarchical_clustering":{"cluster_nums":[6,36],"source_code":"$18"},"hierarchical_initial_labelling":{"prompt":"あなたはKJ法が得意なデータ分析者です。userのinputはグループに集まったラベルです。なぜそのラベルが一つのグループであるか解説して、それから表札をつけてください。\n出力はJSONとし、フォーマットは以下のサンプルを参考にしてください。\n\n# サンプルの入出力\n## 入力例\n最近、AIアシスタントが医療診断サポートの実用化に向けた具体的な成果を発表し、医療現場の未来に明るい希望が見えてきました。患者として、この技術進歩に感謝しています。\nAI医療支援システムが、学会でもしっかり議論されるようになり、開発者が医療従事者の本当のニーズに応える姿勢に期待しています。\n技術カンファレンスを通じて、AIエンジニアが医療分野に全力で取り組む姿勢が伝わってきます。具体的な応用事例を目にするたび、医療の未来への希望が膨らみます。\n\n## 出力例\n{{\n   \"label\": \"医療現場を支えるAI技術の具体的応用への期待\",\n   \"description\": \"このクラスタには、医療診断や患者支援など、実際の医療課題に対してAI技術が具体的かつ効果的に貢献する可能性を支持する前向きな意見が集まっています。利用者は、学会や技術カンファレンスを通じて、現場のニーズに即したAIソリューションや支援システムが実現されることを期待し、医療の未来の発展に向けた技術革新を応援しています。\"\n}}\n","sampling_num":30,"workers":30,"source_code":"$19","model":"gpt-4o-mini"},"hierarchical_merge_labelling":{"prompt":"分割されすぎたクラスタを統合する必要があるので、統合後の名称を考えて出力して。\n\n# 指示\n* 統合前のクラスタの名称・説明および統合後のクラスタに属するデータ点のサンプルを与えるので、これらに基づいて統合後のクラスタの名称を出力してください\n   * 統合後のクラスタ名において、統合前のクラスタ名をそのまま使うことは避けてください。\n* 出力例に記載したJSONのフォーマットに従って出力してください\n\n# サンプルの入出力\n## 入力例（クラスタラベル:説明文）\n- AI技術の環境影響に関する懸念: このクラスタは、AI技術の開発・運用に伴う環境負荷に対する批判的な意見を集約したものです。市民からは、大規模モデルの学習時のエネルギー消費や、データセンターの冷却システムによる環境負荷などに対する強い懸念が表明されています。\n- AI開発の持続可能性への疑問: このクラスタは、AI技術開発全般における持続可能性に対する疑問を示す意見をまとめたものです。エネルギー消費の増大や資源利用の効率性に疑問を持つ声が多く、より環境に配慮した技術開発アプローチを求める意見が特徴です。\n- AI運用の炭素排出量: このクラスタは、AIシステムの運用時における炭素排出量が予想以上に大きい点に対する懸念や不満を反映しています。クラウドサービスの利用拡大やモデル推論時のエネルギー消費、そしてそれに伴う環境への長期的影響が強調されています。\n## 出力例\n{{\n   \"label\": \"AI技術のエネルギー効率と環境持続可能性\",\n   \"description\": \"このクラスタは、AI技術の開発・運用における環境への影響と持続可能性に対する懸念を集約しています。市民は、技術革新の議論の中で、エネルギー効率と炭素排出削減を最優先すべきだとの期待と、現行のAI開発手法に対する環境面での改善要求を強く表明しており、より持続可能で環境に配慮したAI技術の発展を求める声が反映されています。\"\n}}\n","sampling_num":30,"workers":30,"source_code":"$1a","model":"gpt-4o-mini"},"hierarchical_overview":{"prompt":"/system \n\nあなたはシンクタンクで働く専門のリサーチアシスタントです。\nチームは特定のテーマに関してパブリック・コンサルテーションを実施し、異なる選択肢のクラスターを分析し始めています。\nこれからクラスターのリストとその簡単な分析が提供されます。\nあなたの仕事は、調査結果の簡潔な要約を返すことです。要約は非常に簡潔に（最大で1段落、最大4文）まとめ、無意味な言葉を避けてください。\n出力は日本語で行ってください。\n","source_code":"$1b","model":"gpt-4o-mini"},"hierarchical_aggregation":{"sampling_num":30,"hidden_properties":{},"source_code":"$1c"},"output_dir":"794f022e-2086-48ca-8e49-d442049627c0","skip-interaction":true,"without-html":true,"embedding":{"model":"text-embedding-3-small","source_code":"import pandas as pd\nfrom tqdm import tqdm\n\nfrom services.llm import request_to_embed\n\n\ndef embedding(config):\n    model = config[\"embedding\"][\"model\"]\n\n    dataset = config[\"output_dir\"]\n    path = f\"outputs/{dataset}/embeddings.pkl\"\n    arguments = pd.read_csv(f\"outputs/{dataset}/args.csv\", usecols=[\"arg-id\", \"argument\"])\n    embeddings = []\n    batch_size = 1000\n    for i in tqdm(range(0, len(arguments), batch_size)):\n        args = arguments[\"argument\"].tolist()[i : i + batch_size]\n        embeds = request_to_embed(args, model)\n        embeddings.extend(embeds)\n    df = pd.DataFrame([{\"arg-id\": arguments.iloc[i][\"arg-id\"], \"embedding\": e} for i, e in enumerate(embeddings)])\n    df.to_pickle(path)\n"},"hierarchical_visualization":{"replacements":[],"source_code":"import subprocess\n\n\ndef hierarchical_visualization(config):\n    output_dir = config[\"output_dir\"]\n    cwd = \"../report\"\n    command = f\"REPORT={output_dir} npm run build\"\n\n    try:\n        process = subprocess.Popen(\n            command,\n            shell=True,\n            cwd=cwd,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            universal_newlines=True,\n        )\n        while True:\n            output_line = process.stdout.readline()\n            if output_line == \"\" and process.poll() is not None:\n                break\n            if output_line:\n                print(output_line.strip())\n        process.wait()\n        errors = process.stderr.read()\n        if errors:\n            print(\"Errors:\")\n            print(errors)\n    except subprocess.CalledProcessError as e:\n        print(\"Error: \", e)\n"},"plan":[{"step":"extraction","run":true,"reason":"not trace of previous run"},{"step":"embedding","run":true,"reason":"not trace of previous run"},{"step":"hierarchical_clustering","run":true,"reason":"not trace of previous run"},{"step":"hierarchical_initial_labelling","run":true,"reason":"not trace of previous run"},{"step":"hierarchical_merge_labelling","run":true,"reason":"not trace of previous run"},{"step":"hierarchical_overview","run":true,"reason":"not trace of previous run"},{"step":"hierarchical_aggregation","run":true,"reason":"not trace of previous run"},{"step":"hierarchical_visualization","run":false,"reason":"skipping html output"}],"status":"running","start_time":"2025-04-17T08:03:50.976465","completed_jobs":[{"step":"extraction","completed":"2025-04-17T08:04:20.526454","duration":29.549286,"params":{"prompt":"/system\nあなたは専門的なリサーチアシスタントで、整理された議論のデータセットを作成するお手伝いをする役割です。\n人工知能に関する公開協議を実施した状況を想定しています。一般市民から寄せられた議論の例を提示しますので、それらをより簡潔で読みやすい形に整理するお手伝いをお願いします。必要な場合は2つの別個の議論に分割することもできますが、多くの場合は1つの議論にまとめる方が望ましいでしょう。\n結果は整形されたJSON形式の文字列リストとして返してください。\n要約は必ず日本語で作成してください。\n\n/human\n\nAIテクノロジーは、そのライフサイクル全体における環境負荷を削減することに焦点を当てて開発されるべきです。\n\n/ai\n\n[\n\"AIテクノロジーの環境負荷削減に焦点を当てるべき\"\n]\n\n/human\n\nAIの能力、限界、倫理的考慮事項について、一般市民を教育する協調的な取り組みが必要です。\n\n/ai\n\n[\n\"AIの能力について一般市民を教育すべき\",\n\"AIの限界と倫理的考慮事項について一般市民を教育すべき\"\n]\n\n/human\n\nAIはスマートホームやビルのエネルギー効率と居住者の快適性を最適化できます。\n\n/ai\n\n[\n\"AIはスマートホームやビルのエネルギー効率と居住者の快適性を最適化できる\"\n]\n\n/human\n\nAIはエネルギーグリッドを最適化し、無駄や炭素排出を削減できます。\n\n/ai\n\n[\n\"AIはエネルギーグリッドを最適化して無駄と炭素排出を削減できる\"\n]\n","workers":30,"limit":183,"properties":[],"categories":{},"category_batch_size":5,"source_code":"$1d","model":"gpt-4o-mini"}},{"step":"embedding","completed":"2025-04-17T08:04:22.564843","duration":2.037052,"params":{"model":"text-embedding-3-small","source_code":"import pandas as pd\nfrom tqdm import tqdm\n\nfrom services.llm import request_to_embed\n\n\ndef embedding(config):\n    model = config[\"embedding\"][\"model\"]\n\n    dataset = config[\"output_dir\"]\n    path = f\"outputs/{dataset}/embeddings.pkl\"\n    arguments = pd.read_csv(f\"outputs/{dataset}/args.csv\", usecols=[\"arg-id\", \"argument\"])\n    embeddings = []\n    batch_size = 1000\n    for i in tqdm(range(0, len(arguments), batch_size)):\n        args = arguments[\"argument\"].tolist()[i : i + batch_size]\n        embeds = request_to_embed(args, model)\n        embeddings.extend(embeds)\n    df = pd.DataFrame([{\"arg-id\": arguments.iloc[i][\"arg-id\"], \"embedding\": e} for i, e in enumerate(embeddings)])\n    df.to_pickle(path)\n"}},{"step":"hierarchical_clustering","completed":"2025-04-17T08:04:27.815633","duration":5.250191,"params":{"cluster_nums":[6,36],"source_code":"$1e"}},{"step":"hierarchical_initial_labelling","completed":"2025-04-17T08:04:37.281374","duration":9.465097,"params":{"prompt":"あなたはKJ法が得意なデータ分析者です。userのinputはグループに集まったラベルです。なぜそのラベルが一つのグループであるか解説して、それから表札をつけてください。\n出力はJSONとし、フォーマットは以下のサンプルを参考にしてください。\n\n# サンプルの入出力\n## 入力例\n最近、AIアシスタントが医療診断サポートの実用化に向けた具体的な成果を発表し、医療現場の未来に明るい希望が見えてきました。患者として、この技術進歩に感謝しています。\nAI医療支援システムが、学会でもしっかり議論されるようになり、開発者が医療従事者の本当のニーズに応える姿勢に期待しています。\n技術カンファレンスを通じて、AIエンジニアが医療分野に全力で取り組む姿勢が伝わってきます。具体的な応用事例を目にするたび、医療の未来への希望が膨らみます。\n\n## 出力例\n{{\n   \"label\": \"医療現場を支えるAI技術の具体的応用への期待\",\n   \"description\": \"このクラスタには、医療診断や患者支援など、実際の医療課題に対してAI技術が具体的かつ効果的に貢献する可能性を支持する前向きな意見が集まっています。利用者は、学会や技術カンファレンスを通じて、現場のニーズに即したAIソリューションや支援システムが実現されることを期待し、医療の未来の発展に向けた技術革新を応援しています。\"\n}}\n","sampling_num":30,"workers":30,"source_code":"$1f","model":"gpt-4o-mini"}},{"step":"hierarchical_merge_labelling","completed":"2025-04-17T08:04:42.355851","duration":5.072986,"params":{"prompt":"分割されすぎたクラスタを統合する必要があるので、統合後の名称を考えて出力して。\n\n# 指示\n* 統合前のクラスタの名称・説明および統合後のクラスタに属するデータ点のサンプルを与えるので、これらに基づいて統合後のクラスタの名称を出力してください\n   * 統合後のクラスタ名において、統合前のクラスタ名をそのまま使うことは避けてください。\n* 出力例に記載したJSONのフォーマットに従って出力してください\n\n# サンプルの入出力\n## 入力例（クラスタラベル:説明文）\n- AI技術の環境影響に関する懸念: このクラスタは、AI技術の開発・運用に伴う環境負荷に対する批判的な意見を集約したものです。市民からは、大規模モデルの学習時のエネルギー消費や、データセンターの冷却システムによる環境負荷などに対する強い懸念が表明されています。\n- AI開発の持続可能性への疑問: このクラスタは、AI技術開発全般における持続可能性に対する疑問を示す意見をまとめたものです。エネルギー消費の増大や資源利用の効率性に疑問を持つ声が多く、より環境に配慮した技術開発アプローチを求める意見が特徴です。\n- AI運用の炭素排出量: このクラスタは、AIシステムの運用時における炭素排出量が予想以上に大きい点に対する懸念や不満を反映しています。クラウドサービスの利用拡大やモデル推論時のエネルギー消費、そしてそれに伴う環境への長期的影響が強調されています。\n## 出力例\n{{\n   \"label\": \"AI技術のエネルギー効率と環境持続可能性\",\n   \"description\": \"このクラスタは、AI技術の開発・運用における環境への影響と持続可能性に対する懸念を集約しています。市民は、技術革新の議論の中で、エネルギー効率と炭素排出削減を最優先すべきだとの期待と、現行のAI開発手法に対する環境面での改善要求を強く表明しており、より持続可能で環境に配慮したAI技術の発展を求める声が反映されています。\"\n}}\n","sampling_num":30,"workers":30,"source_code":"$20","model":"gpt-4o-mini"}},{"step":"hierarchical_overview","completed":"2025-04-17T08:04:45.969515","duration":3.612751,"params":{"prompt":"/system \n\nあなたはシンクタンクで働く専門のリサーチアシスタントです。\nチームは特定のテーマに関してパブリック・コンサルテーションを実施し、異なる選択肢のクラスターを分析し始めています。\nこれからクラスターのリストとその簡単な分析が提供されます。\nあなたの仕事は、調査結果の簡潔な要約を返すことです。要約は非常に簡潔に（最大で1段落、最大4文）まとめ、無意味な言葉を避けてください。\n出力は日本語で行ってください。\n","source_code":"$21","model":"gpt-4o-mini"}}],"lock_until":"2025-04-17T08:09:45.972066","current_job":"hierarchical_aggregation","current_job_started":"2025-04-17T08:04:45.972053","current_job_progress":null,"current_jop_tasks":null},"comment_num":183}}],["$","$L22",null,{"result":"$8:0:props:children:2:props:result"}],["$","$L12",null,{"w":"fit-content","mx":"auto","children":["$","$L6",null,{"href":"/","children":["$","$L7",null,{"variant":"outline","size":"md","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-chevron-left","children":[["$","path","1wnfg3",{"d":"m15 18-6-6 6-6"}],"$undefined"]}],"一覧へ戻る"]}]}]}],["$","$L23",null,{"my":12,"maxW":"750px","mx":"auto"}],["$","$L24",null,{"meta":"$8:0:props:children:0:props:meta"}]]}],["$","footer",null,{"children":["$","$L25",null,{"direction":{"base":"column","lg":"row"},"justify":"space-between","maxW":"800px","mx":"auto","children":[["$","$L26",null,{"gap":5,"justify":"center","align":"center","children":[["$","$L14",null,{"fontWeight":"bold","fontSize":"lg","children":"テスト環境"}],false,false]}],["$","$L26",null,{"justify":"center","children":["$","$L27",null,{"placement":"bottom","children":[["$","$L28",null,{}],["$","$L29",null,{"children":["$","$L14",null,{"className":"textLink","cursor":"pointer","children":"デジタル民主主義2030プロジェクトについて"}]}],["$","$L2a",null,{"disabled":false,"container":"$undefined","children":["$","$L2b",null,{"padding":"$undefined","children":["$","$L2c",null,{"ref":"$undefined","roundedTop":"md","p":5,"asChild":false,"children":[["$","$L2d",null,{"children":["$","$L2e",null,{"fontSize":"2xl","fontWeight":"bold","textAlign":"center","className":"gradientColor","children":"デジタル民主主義2030プロジェクト"}]}],["$","$L2f",null,{"textAlign":"center","children":[["$","$L12",null,{"mb":8,"maxW":"700px","mx":"auto","children":[["$","$L13",null,{"size":"lg","mb":2,"textAlign":"center","children":"プロジェクトについて"}],["$","$L14",null,{"children":"2030年には、情報技術により民主主義のあり方はアップデートされており、一人ひとりの声が政治・行政に届き、適切に合意形成・政策反映されていくような社会が当たり前になる──そんな未来を目指して立ち上げられたのがデジタル民主主義2030プロジェクトです。 AIやデジタル技術の進化により、これまで不可能だった新しい形の市民参加や政策運営が可能になるはずだという信念に基づいています。"}],["$","$L6",null,{"href":"https://dd2030.org","target":"_blank","rel":"noreferrer noopener","children":["$","$L26",null,{"justify":"center","mt":2,"children":[["$","$L14",null,{"className":"textLink","children":"プロジェクトについての詳細はこちら"}],["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-external-link","children":[["$","path","1q9fwt",{"d":"M15 3h6v6"}],["$","path","gplh6r",{"d":"M10 14 21 3"}],["$","path","a6xqqp",{"d":"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}],"$undefined"]}]]}]}]]}],["$","$L12",null,{"mb":8,"maxW":"700px","mx":"auto","children":[["$","$L13",null,{"size":"lg","mb":2,"textAlign":"center","children":"免責"}],["$","$L14",null,{"mb":2,"children":"このレポート内容に関する質問や意見はレポート発行責任者へお問い合わせください。"}],["$","$L14",null,{"children":"大規模言語モデル（LLM）にはバイアスがあり、信頼性の低い結果を生成することが知られています。私たちはこれらの問題を軽減する方法に積極的に取り組んでいますが、現段階ではいかなる保証も提供することはできません。特に重要な決定を下す際は、本アプリの出力結果のみに依存せず、必ず内容を検証してください。"}]]}],["$","$L12",null,{"mb":8,"maxW":"700px","mx":"auto","children":[["$","$L13",null,{"size":"lg","mb":2,"textAlign":"center","children":"謝辞"}],["$","$L14",null,{"children":["このプロジェクトは"," ",["$","a",null,{"className":"textLink","href":"https://ai.objectives.institute/","target":"_blank","rel":"noreferrer","children":"AI Objectives Institute"}]," ","が開発した"," ",["$","a",null,{"className":"textLink","href":"https://github.com/AIObjectives/talk-to-the-city-reports","target":"_blank","rel":"noreferrer","children":"Talk to the City"}]," ","を参考に開発されています。",["$","br",null,{}],"ライセンスに基づいてソースコードを一部活用し、機能追加や改善を実施しています。"]}]]}],["$","$L30",null,{"children":["$","$L7",null,{"variant":"outline","children":"閉じる"}]}]]}]]}]}]}]]}]}]]}]}]]
b:null
f:[["$","title","0",{"children":"かもめテラスのGoogle Mapsレビュー - テスト環境"}],["$","meta","1",{"name":"description","content":"この調査では、かもめの玉子や地域特産品に関する多様な意見が集約され、消費者の体験や地域活性化の重要性が強調されています。特に、かもめの玉子の魅力や地域の観光スポット、スイーツ文化が評価され、訪問者はリラックスした食体験を楽しんでいます。また、家族向けの快適なショッピング環境やサービス向上のニーズも明らかになり、地域経済の発展に寄与する意見が多く見られました。"}],["$","meta","2",{"property":"og:title","content":"かもめテラスのGoogle Mapsレビュー - テスト環境"}],["$","meta","3",{"property":"og:description","content":"この調査では、かもめの玉子や地域特産品に関する多様な意見が集約され、消費者の体験や地域活性化の重要性が強調されています。特に、かもめの玉子の魅力や地域の観光スポット、スイーツ文化が評価され、訪問者はリラックスした食体験を楽しんでいます。また、家族向けの快適なショッピング環境やサービス向上のニーズも明らかになり、地域経済の発展に寄与する意見が多く見られました。"}],["$","meta","4",{"property":"og:image","content":"http://localhost:3000/794f022e-2086-48ca-8e49-d442049627c0/opengraph-image.png"}],["$","meta","5",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","6",{"name":"twitter:title","content":"かもめテラスのGoogle Mapsレビュー - テスト環境"}],["$","meta","7",{"name":"twitter:description","content":"この調査では、かもめの玉子や地域特産品に関する多様な意見が集約され、消費者の体験や地域活性化の重要性が強調されています。特に、かもめの玉子の魅力や地域の観光スポット、スイーツ文化が評価され、訪問者はリラックスした食体験を楽しんでいます。また、家族向けの快適なショッピング環境やサービス向上のニーズも明らかになり、地域経済の発展に寄与する意見が多く見られました。"}],["$","meta","8",{"name":"twitter:image","content":"http://localhost:3000/794f022e-2086-48ca-8e49-d442049627c0/opengraph-image.png"}]]
