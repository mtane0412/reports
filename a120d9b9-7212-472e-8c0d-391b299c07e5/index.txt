1:"$Sreact.fragment"
2:I[67315,["785","static/chunks/785-bf8eaad2e6817186.js","451","static/chunks/451-ff68bb1f8be23e5c.js","98","static/chunks/98-ceb6bd4957f64cef.js","108","static/chunks/108-145d964849b57510.js","177","static/chunks/app/layout-1f31a56c71888f2f.js"],"Provider"]
3:I[87555,[],""]
4:I[31295,[],""]
5:I[32176,["785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","335","static/chunks/app/%5Bslug%5D/error-ed750438367dde98.js"],"default"]
6:I[6874,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],""]
7:I[38567,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"Button"]
9:I[59665,[],"OutletBoundary"]
c:I[59665,[],"ViewportBoundary"]
e:I[59665,[],"MetadataBoundary"]
10:I[26614,[],""]
:HL["/reports/_next/static/css/9aa33c77ef4c0fa8.css","style"]
0:{"P":null,"b":"PKP_DFJej_V3t5uQy9efT","p":"/reports","c":["","a120d9b9-7212-472e-8c0d-391b299c07e5",""],"i":false,"f":[[["",{"children":[["slug","a120d9b9-7212-472e-8c0d-391b299c07e5","d"],{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/reports/_next/static/css/9aa33c77ef4c0fa8.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"suppressHydrationWarning":true,"lang":"ja","children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/reports/meta/icon.png","sizes":"any"}],false]}],["$","body",null,{"children":["$","$L2",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}]]}],{"children":[["slug","a120d9b9-7212-472e-8c0d-391b299c07e5","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$5","errorStyles":[],"errorScripts":[],"template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","p",null,{"children":"ページが見つかりませんでした"}],["$","$L6",null,{"href":"/","children":["$","$L7",null,{"children":"トップに戻る"}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L8","$undefined",null,["$","$L9",null,{"children":["$La","$Lb",null]}]]}],{},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","FvKX9SQabDoJL84mZIkwB",{"children":[["$","$Lc",null,{"children":"$Ld"}],null]}],["$","$Le",null,{"children":"$Lf"}]]}],false]],"m":"$undefined","G":["$10","$undefined"],"s":false,"S":true}
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
a:null
11:I[90754,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"Header"]
12:I[81068,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"Box"]
13:I[17921,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"Heading"]
14:I[90310,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"Text"]
15:I[7684,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"Icon"]
16:I[68264,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"ClientContainer"]
22:I[91925,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"Analysis"]
23:I[91548,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"Separator"]
24:I[12498,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"About"]
25:I[38639,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"Stack"]
26:I[97377,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"HStack"]
27:I[30220,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"DrawerRoot"]
28:I[30220,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"DrawerBackdrop"]
29:I[30220,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"DrawerTrigger"]
2a:I[70318,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"Portal"]
2b:I[30220,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"DrawerPositioner"]
2c:I[30220,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"DrawerContent"]
2d:I[30220,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"DrawerHeader"]
2e:I[30220,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"DrawerTitle"]
2f:I[30220,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"DrawerBody"]
30:I[30220,["150","static/chunks/59650de3-481cc0c44db376d7.js","785","static/chunks/785-bf8eaad2e6817186.js","567","static/chunks/567-5def3a78145d78b3.js","451","static/chunks/451-ff68bb1f8be23e5c.js","874","static/chunks/874-3fb57fb0f9cdc472.js","98","static/chunks/98-ceb6bd4957f64cef.js","299","static/chunks/299-7527e558eef9c80d.js","22","static/chunks/22-7988931263da9a67.js","3","static/chunks/3-425bcb2852dbeab9.js","182","static/chunks/app/%5Bslug%5D/page-bed5a9e8f3c9b31d.js"],"DrawerActionTrigger"]
17:T13f1,import concurrent.futures
import json
import logging
import re

import pandas as pd
from tqdm import tqdm

from services.category_classification import classify_args
from services.llm import request_to_chat_openai
from services.parse_json_list import parse_response
from utils import update_progress

COMMA_AND_SPACE_AND_RIGHT_BRACKET = re.compile(r",\s*(\])")


def _validate_property_columns(property_columns: list[str], comments: pd.DataFrame) -> None:
    if not all(property in comments.columns for property in property_columns):
        raise ValueError(f"Properties {property_columns} not found in comments. Columns are {comments.columns}")


def extraction(config):
    dataset = config["output_dir"]
    path = f"outputs/{dataset}/args.csv"
    model = config["extraction"]["model"]
    prompt = config["extraction"]["prompt"]
    workers = config["extraction"]["workers"]
    limit = config["extraction"]["limit"]
    property_columns = config["extraction"]["properties"]

    # カラム名だけを読み込み、必要なカラムが含まれているか確認する
    comments = pd.read_csv(f"inputs/{config['input']}.csv", nrows=0)
    _validate_property_columns(property_columns, comments)
    # エラーが出なかった場合、すべての行を読み込む
    comments = pd.read_csv(
        f"inputs/{config['input']}.csv", usecols=["comment-id", "comment-body"] + config["extraction"]["properties"]
    )
    comment_ids = (comments["comment-id"].values)[:limit]
    comments.set_index("comment-id", inplace=True)
    results = pd.DataFrame()
    update_progress(config, total=len(comment_ids))

    argument_map = {}
    relation_rows = []

    for i in tqdm(range(0, len(comment_ids), workers)):
        batch = comment_ids[i : i + workers]
        batch_inputs = [comments.loc[id]["comment-body"] for id in batch]
        batch_results = extract_batch(batch_inputs, prompt, model, workers)

        for comment_id, extracted_args in zip(batch, batch_results, strict=False):
            for j, arg in enumerate(extracted_args):
                if arg not in argument_map:
                    # argumentテーブルに追加
                    arg_id = f"A{comment_id}_{j}"
                    argument_map[arg] = {
                        "arg-id": arg_id,
                        "argument": arg,
                    }
                else:
                    arg_id = argument_map[arg]["arg-id"]

                # relationテーブルにcommentとargの関係を追加
                relation_row = {
                    "arg-id": arg_id,
                    "comment-id": comment_id,
                }
                relation_rows.append(relation_row)

        update_progress(config, incr=len(batch))

    # DataFrame化
    results = pd.DataFrame(argument_map.values())
    relation_df = pd.DataFrame(relation_rows)

    if results.empty:
        raise RuntimeError("result is empty, maybe bad prompt")

    classification_categories = config["extraction"]["categories"]
    if classification_categories:
        results = classify_args(results, config, workers)

    results.to_csv(path, index=False)
    # comment-idとarg-idの関係を保存
    relation_df.to_csv(f"outputs/{dataset}/relations.csv", index=False)


logging.basicConfig(level=logging.ERROR)


def extract_batch(batch, prompt, model, workers):
    with concurrent.futures.ThreadPoolExecutor(max_workers=workers) as executor:
        futures_with_index = [
            (i, executor.submit(extract_arguments, input, prompt, model)) for i, input in enumerate(batch)
        ]

        done, not_done = concurrent.futures.wait([f for _, f in futures_with_index], timeout=30)
        results = [[] for _ in range(len(batch))]

        for _, future in futures_with_index:
            if future in not_done and not future.cancelled():
                future.cancel()

        for i, future in futures_with_index:
            if future in done:
                try:
                    result = future.result()
                    results[i] = result
                except Exception as e:
                    logging.error(f"Task {future} failed with error: {e}")
                    results[i] = []
        return results


def extract_by_llm(input, prompt, model):
    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": input},
    ]
    response = request_to_chat_openai(messages=messages, model=model)
    return response


def extract_arguments(input, prompt, model, retries=1):
    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": input},
    ]
    try:
        response = request_to_chat_openai(messages=messages, model=model, is_json=False)
        items = parse_response(response)
        items = filter(None, items)  # omit empty strings
        return items
    except json.decoder.JSONDecodeError as e:
        print("JSON error:", e)
        print("Input was:", input)
        print("Response was:", response)
        print("Silently giving up on trying to generate valid list.")
        return []
18:T1149,"""Cluster the arguments using UMAP + HDBSCAN and GPT-4."""

from importlib import import_module

import numpy as np
import pandas as pd
import scipy.cluster.hierarchy as sch
from sklearn.cluster import KMeans


def hierarchical_clustering(config):
    UMAP = import_module("umap").UMAP

    dataset = config["output_dir"]
    path = f"outputs/{dataset}/hierarchical_clusters.csv"
    arguments_df = pd.read_csv(f"outputs/{dataset}/args.csv", usecols=["arg-id", "argument"])
    embeddings_df = pd.read_pickle(f"outputs/{dataset}/embeddings.pkl")
    embeddings_array = np.asarray(embeddings_df["embedding"].values.tolist())
    cluster_nums = config["hierarchical_clustering"]["cluster_nums"]

    n_samples = embeddings_array.shape[0]
    # デフォルト設定は15
    default_n_neighbors = 15

    # テスト等サンプルが少なすぎる場合、n_neighborsの設定値を下げる
    if n_samples <= default_n_neighbors:
        n_neighbors = max(2, n_samples - 1)  # 最低2以上
    else:
        n_neighbors = default_n_neighbors

    umap_model = UMAP(random_state=42, n_components=2, n_neighbors=n_neighbors)
    # TODO 詳細エラーメッセージを加える
    # 以下のエラーの場合、おそらく元の意見件数が少なすぎることが原因
    # TypeError: Cannot use scipy.linalg.eigh for sparse A with k >= N. Use scipy.linalg.eigh(A.toarray()) or reduce k.
    umap_embeds = umap_model.fit_transform(embeddings_array)

    cluster_results = hierarchical_clustering_embeddings(
        umap_embeds=umap_embeds,
        cluster_nums=cluster_nums,
    )
    result_df = pd.DataFrame(
        {
            "arg-id": arguments_df["arg-id"],
            "argument": arguments_df["argument"],
            "x": umap_embeds[:, 0],
            "y": umap_embeds[:, 1],
        }
    )

    for cluster_level, final_labels in enumerate(cluster_results.values(), start=1):
        result_df[f"cluster-level-{cluster_level}-id"] = [f"{cluster_level}_{label}" for label in final_labels]

    result_df.to_csv(path, index=False)


def generate_cluster_count_list(min_clusters: int, max_clusters: int):
    cluster_counts = []
    current = min_clusters
    cluster_counts.append(current)

    if min_clusters == max_clusters:
        return cluster_counts

    while True:
        next_double = current * 2
        next_triple = current * 3

        if next_double >= max_clusters:
            if cluster_counts[-1] != max_clusters:
                cluster_counts.append(max_clusters)
            break

        # 次の倍はまだ max_clusters に収まるが、3倍だと超える
        # -> (次の倍は細かすぎるので)スキップして max_clusters に飛ぶ
        if next_triple > max_clusters:
            cluster_counts.append(max_clusters)
            break

        cluster_counts.append(next_double)
        current = next_double

    return cluster_counts


def merge_clusters_with_hierarchy(
    cluster_centers: np.ndarray,
    kmeans_labels: np.ndarray,
    umap_array: np.ndarray,
    n_cluster_cut: int,
):
    Z = sch.linkage(cluster_centers, method="ward")
    cluster_labels_merged = sch.fcluster(Z, t=n_cluster_cut, criterion="maxclust")

    n_samples = umap_array.shape[0]
    final_labels = np.zeros(n_samples, dtype=int)

    for i in range(n_samples):
        original_label = kmeans_labels[i]
        final_labels[i] = cluster_labels_merged[original_label]

    return final_labels


def hierarchical_clustering_embeddings(
    umap_embeds,
    cluster_nums,
):
    # 最大分割数でクラスタリングを実施
    print("start initial clustering")
    initial_cluster_num = cluster_nums[-1]
    kmeans_model = KMeans(n_clusters=initial_cluster_num, random_state=42)
    kmeans_model.fit(umap_embeds)
    print("end initial clustering")

    results = {}
    print("start hierarchical clustering")
    cluster_nums.sort()
    print(cluster_nums)
    for n_cluster_cut in cluster_nums[:-1]:
        print("n_cluster_cut: ", n_cluster_cut)
        final_labels = merge_clusters_with_hierarchy(
            cluster_centers=kmeans_model.cluster_centers_,
            kmeans_labels=kmeans_model.labels_,
            umap_array=umap_embeds,
            n_cluster_cut=n_cluster_cut,
        )
        results[n_cluster_cut] = final_labels

    results[initial_cluster_num] = kmeans_model.labels_
    print("end hierarchical clustering")

    return results
19:T142a,import json
from concurrent.futures import ThreadPoolExecutor
from functools import partial
from typing import TypedDict

import pandas as pd

from services.llm import request_to_chat_openai


class LabellingResult(TypedDict):
    """各クラスタのラベリング結果を表す型"""

    cluster_id: str  # クラスタのID
    label: str  # クラスタのラベル名
    description: str  # クラスタの説明文


def hierarchical_initial_labelling(config: dict) -> None:
    """階層的クラスタリングの初期ラベリングを実行する

    Args:
        config: 設定情報を含む辞書
            - output_dir: 出力ディレクトリ名
            - hierarchical_initial_labelling: 初期ラベリングの設定
                - sampling_num: サンプリング数
                - prompt: LLMへのプロンプト
                - model: 使用するLLMモデル名
                - workers: 並列処理のワーカー数
    """
    dataset = config["output_dir"]
    path = f"outputs/{dataset}/hierarchical_initial_labels.csv"
    clusters_argument_df = pd.read_csv(f"outputs/{dataset}/hierarchical_clusters.csv")

    cluster_id_columns = [col for col in clusters_argument_df.columns if col.startswith("cluster-level-")]
    initial_cluster_id_column = cluster_id_columns[-1]
    sampling_num = config["hierarchical_initial_labelling"]["sampling_num"]
    initial_labelling_prompt = config["hierarchical_initial_labelling"]["prompt"]
    model = config["hierarchical_initial_labelling"]["model"]
    workers = config["hierarchical_initial_labelling"]["workers"]

    initial_label_df = initial_labelling(
        initial_labelling_prompt,
        clusters_argument_df,
        sampling_num,
        model,
        workers,
    )
    print("start initial labelling")
    initial_clusters_argument_df = clusters_argument_df.merge(
        initial_label_df,
        left_on=initial_cluster_id_column,
        right_on="cluster_id",
        how="left",
    ).rename(
        columns={
            "label": f"{initial_cluster_id_column.replace('-id', '')}-label",
            "description": f"{initial_cluster_id_column.replace('-id', '')}-description",
        }
    )
    print("end initial labelling")
    initial_clusters_argument_df.to_csv(path, index=False)


def initial_labelling(
    prompt: str,
    clusters_df: pd.DataFrame,
    sampling_num: int,
    model: str,
    workers: int,
) -> pd.DataFrame:
    """各クラスタに対して初期ラベリングを実行する

    Args:
        prompt: LLMへのプロンプト
        clusters_df: クラスタリング結果のDataFrame
        sampling_num: 各クラスタからサンプリングする意見の数
        model: 使用するLLMモデル名
        workers: 並列処理のワーカー数

    Returns:
        各クラスタのラベリング結果を含むDataFrame
    """
    cluster_columns = [col for col in clusters_df.columns if col.startswith("cluster-level-")]
    initial_cluster_column = cluster_columns[-1]
    cluster_ids = clusters_df[initial_cluster_column].unique()
    process_func = partial(
        process_initial_labelling,
        df=clusters_df,
        prompt=prompt,
        sampling_num=sampling_num,
        target_column=initial_cluster_column,
        model=model,
    )
    with ThreadPoolExecutor(max_workers=workers) as executor:
        results = list(executor.map(process_func, cluster_ids))
    return pd.DataFrame(results)


def process_initial_labelling(
    cluster_id: str,
    df: pd.DataFrame,
    prompt: str,
    sampling_num: int,
    target_column: str,
    model: str,
) -> LabellingResult:
    """個別のクラスタに対してラベリングを実行する

    Args:
        cluster_id: 処理対象のクラスタID
        df: クラスタリング結果のDataFrame
        prompt: LLMへのプロンプト
        sampling_num: サンプリングする意見の数
        target_column: クラスタIDが格納されている列名
        model: 使用するLLMモデル名

    Returns:
        クラスタのラベリング結果
    """
    cluster_data = df[df[target_column] == cluster_id]
    sampling_num = min(sampling_num, len(cluster_data))
    cluster = cluster_data.sample(sampling_num)
    input = "\n".join(cluster["argument"].values)
    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": input},
    ]
    try:
        response = request_to_chat_openai(messages=messages, model=model, is_json=True)
        response_json = json.loads(response)
        return LabellingResult(
            cluster_id=cluster_id,
            label=response_json.get("label", "エラーでラベル名が取得できませんでした"),
            description=response_json.get("description", "エラーで解説が取得できませんでした"),
        )
    except Exception as e:
        print(e)
        return LabellingResult(
            cluster_id=cluster_id,
            label="エラーでラベル名が取得できませんでした",
            description="エラーで解説が取得できませんでした",
        )
1a:T2fa5,import json
from concurrent.futures import ThreadPoolExecutor
from dataclasses import dataclass
from functools import partial

import numpy as np
import pandas as pd
from tqdm import tqdm

from services.llm import request_to_chat_openai


@dataclass
class ClusterColumns:
    """同一階層のクラスター関連のカラム名を管理するクラス"""

    id: str
    label: str
    description: str

    @classmethod
    def from_id_column(cls, id_column: str) -> "ClusterColumns":
        """ID列名から関連するカラム名を生成"""
        return cls(
            id=id_column,
            label=id_column.replace("-id", "-label"),
            description=id_column.replace("-id", "-description"),
        )


@dataclass
class ClusterValues:
    """対象クラスタのlabel/descriptionを管理するクラス"""

    label: str
    description: str

    def to_prompt_text(self) -> str:
        return f"- {self.label}: {self.description}"


def hierarchical_merge_labelling(config: dict) -> None:
    """階層的クラスタリングの結果に対してマージラベリングを実行する

    Args:
        config: 設定情報を含む辞書
            - output_dir: 出力ディレクトリ名
            - hierarchical_merge_labelling: マージラベリングの設定
                - sampling_num: サンプリング数
                - prompt: LLMへのプロンプト
                - model: 使用するLLMモデル名
                - workers: 並列処理のワーカー数
    """
    dataset = config["output_dir"]
    merge_path = f"outputs/{dataset}/hierarchical_merge_labels.csv"
    clusters_df = pd.read_csv(f"outputs/{dataset}/hierarchical_initial_labels.csv")

    cluster_id_columns: list[str] = _filter_id_columns(clusters_df.columns)
    # ボトムクラスタのラベル・説明とクラスタid付きの各argumentを入力し、各階層のクラスタラベル・説明を生成し、argumentに付けたdfを作成
    merge_result_df = merge_labelling(
        clusters_df=clusters_df,
        cluster_id_columns=sorted(cluster_id_columns, reverse=True),
        config=config,
    )
    # 上記のdfから各クラスタのlevel, id, label, description, valueを取得してdfを作成
    melted_df = melt_cluster_data(merge_result_df)
    # 上記のdfに親子関係を追加
    parent_child_df = _build_parent_child_mapping(merge_result_df, cluster_id_columns)
    melted_df = melted_df.merge(parent_child_df, on=["level", "id"], how="left")
    density_df = calculate_cluster_density(melted_df, config)
    density_df.to_csv(merge_path, index=False)


def _build_parent_child_mapping(df: pd.DataFrame, cluster_id_columns: list[str]):
    """クラスタ間の親子関係をマッピングする

    Args:
        df: クラスタリング結果のDataFrame
        cluster_id_columns: クラスタIDのカラム名のリスト

    Returns:
        親子関係のマッピング情報を含むDataFrame
    """
    results = []
    top_cluster_column = cluster_id_columns[0]
    top_cluster_values = df[top_cluster_column].unique()
    for c in top_cluster_values:
        results.append(
            {
                "level": 1,
                "id": c,
                "parent": "0",  # aggregationで追加する全体クラスタのid
            }
        )

    for idx in range(len(cluster_id_columns) - 1):
        current_column = cluster_id_columns[idx]
        children_column = cluster_id_columns[idx + 1]
        current_level = current_column.replace("-id", "").replace("cluster-level-", "")
        # 現在のレベルのクラスタid
        current_cluster_values = df[current_column].unique()
        for current_id in current_cluster_values:
            children_ids = df.loc[df[current_column] == current_id, children_column].unique()
            for child_id in children_ids:
                results.append(
                    {
                        "level": int(current_level) + 1,
                        "id": child_id,
                        "parent": current_id,
                    }
                )
    return pd.DataFrame(results)


def _filter_id_columns(columns: list[str]) -> list[str]:
    """クラスタIDのカラム名をフィルタリングする

    Args:
        columns: 全カラム名のリスト

    Returns:
        クラスタIDのカラム名のリスト
    """
    return [col for col in columns if col.startswith("cluster-level-") and col.endswith("-id")]


def melt_cluster_data(df: pd.DataFrame) -> pd.DataFrame:
    """クラスタデータを行形式に変換する

    cluster-level-n-(id|label|description) を行形式 (level, id, label, description, value) にまとめる。
    [cluster-level-n-id, cluster-level-n-label, cluster-level-n-description] を [level, id, label, description, value(件数)] に変換する。

    Args:
        df: クラスタリング結果のDataFrame

    Returns:
        行形式に変換されたDataFrame
    """
    id_columns: list[str] = _filter_id_columns(df.columns)
    levels: set[int] = {int(col.replace("cluster-level-", "").replace("-id", "")) for col in id_columns}
    all_rows: list[dict] = []

    # levelごとに各クラスタの出現件数を集計・縦持ちにする
    for level in levels:
        cluster_columns = ClusterColumns.from_id_column(f"cluster-level-{level}-id")
        # クラスタidごとの件数集計
        level_count_df = df.groupby(cluster_columns.id).size().reset_index(name="value")

        level_unique_val_df = df[
            [cluster_columns.id, cluster_columns.label, cluster_columns.description]
        ].drop_duplicates()
        level_unique_val_df = level_unique_val_df.merge(level_count_df, on=cluster_columns.id, how="left")
        level_unique_vals = [
            {
                "level": level,
                "id": row[cluster_columns.id],
                "label": row[cluster_columns.label],
                "description": row[cluster_columns.description],
                "value": row["value"],
            }
            for _, row in level_unique_val_df.iterrows()
        ]
        all_rows.extend(level_unique_vals)
    return pd.DataFrame(all_rows)


def merge_labelling(clusters_df: pd.DataFrame, cluster_id_columns: list[str], config) -> pd.DataFrame:
    """階層的なクラスタのマージラベリングを実行する

    Args:
        clusters_df: クラスタリング結果のDataFrame
        cluster_id_columns: クラスタIDのカラム名のリスト
        config: 設定情報を含む辞書

    Returns:
        マージラベリング結果を含むDataFrame
    """
    for idx in tqdm(range(len(cluster_id_columns) - 1)):
        previous_columns = ClusterColumns.from_id_column(cluster_id_columns[idx])
        current_columns = ClusterColumns.from_id_column(cluster_id_columns[idx + 1])

        process_fn = partial(
            process_merge_labelling,
            result_df=clusters_df,
            current_columns=current_columns,
            previous_columns=previous_columns,
            config=config,
        )

        current_cluster_ids = sorted(clusters_df[current_columns.id].unique())
        with ThreadPoolExecutor(max_workers=config["hierarchical_merge_labelling"]["workers"]) as executor:
            responses = list(
                tqdm(
                    executor.map(process_fn, current_cluster_ids),
                    total=len(current_cluster_ids),
                )
            )

        current_result_df = pd.DataFrame(responses)
        clusters_df = clusters_df.merge(current_result_df, on=[current_columns.id])
    return clusters_df


def process_merge_labelling(
    target_cluster_id: str,
    result_df: pd.DataFrame,
    current_columns: ClusterColumns,
    previous_columns: ClusterColumns,
    config,
):
    """個別のクラスタに対してマージラベリングを実行する

    Args:
        target_cluster_id: 処理対象のクラスタID
        result_df: クラスタリング結果のDataFrame
        current_columns: 現在のレベルのカラム情報
        previous_columns: 前のレベルのカラム情報
        config: 設定情報を含む辞書

    Returns:
        マージラベリング結果を含む辞書
    """

    def filter_previous_values(df: pd.DataFrame, previous_columns: ClusterColumns) -> list[ClusterValues]:
        """前のレベルのクラスタ情報を取得する"""
        previous_records = df[df[current_columns.id] == target_cluster_id][
            [previous_columns.label, previous_columns.description]
        ].drop_duplicates()
        previous_values = [
            ClusterValues(
                label=row[previous_columns.label],
                description=row[previous_columns.description],
            )
            for _, row in previous_records.iterrows()
        ]
        return previous_values

    previous_values = filter_previous_values(result_df, previous_columns)
    if len(previous_values) == 1:
        return {
            current_columns.id: target_cluster_id,
            current_columns.label: previous_values[0].label,
            current_columns.description: previous_values[0].description,
        }
    elif len(previous_values) == 0:
        raise ValueError(f"クラスタ {target_cluster_id} には前のレベルのクラスタが存在しません。")

    current_cluster_data = result_df[result_df[current_columns.id] == target_cluster_id]
    sampling_num = min(
        config["hierarchical_merge_labelling"]["sampling_num"],
        len(current_cluster_data),
    )
    sampled_data = current_cluster_data.sample(sampling_num)
    sampled_argument_text = "\n".join(sampled_data["argument"].values)
    cluster_text = "\n".join([value.to_prompt_text() for value in previous_values])
    messages = [
        {"role": "system", "content": config["hierarchical_merge_labelling"]["prompt"]},
        {
            "role": "user",
            "content": "クラスタラベル\n" + cluster_text + "\n" + "クラスタの意見\n" + sampled_argument_text,
        },
    ]
    try:
        response = request_to_chat_openai(
            messages=messages,
            model=config["hierarchical_merge_labelling"]["model"],
            is_json=True,
        )
        response_json = json.loads(response)
        return {
            current_columns.id: target_cluster_id,
            current_columns.label: response_json.get("label", "エラーでラベル名が取得できませんでした"),
            current_columns.description: response_json.get("description", "エラーで解説が取得できませんでした"),
        }
    except Exception as e:
        print(f"エラーが発生しました: {e}")
        return {
            current_columns.id: target_cluster_id,
            current_columns.label: "エラーでラベル名が取得できませんでした",
            current_columns.description: "エラーで解説が取得できませんでした",
        }


def calculate_cluster_density(melted_df: pd.DataFrame, config: dict):
    """クラスタ内の密度計算"""
    hierarchical_cluster_df = pd.read_csv(f"outputs/{config['output_dir']}/hierarchical_clusters.csv")

    densities = []
    for level, c_id in zip(melted_df["level"], melted_df["id"], strict=False):
        cluster_embeds = hierarchical_cluster_df[hierarchical_cluster_df[f"cluster-level-{level}-id"] == c_id][
            ["x", "y"]
        ].values
        density = calculate_density(cluster_embeds)
        densities.append(density)

    # 密度のランクを計算
    melted_df["density"] = densities
    melted_df["density_rank"] = melted_df.groupby("level")["density"].rank(ascending=False, method="first")
    melted_df["density_rank_percentile"] = melted_df.groupby("level")["density_rank"].transform(lambda x: x / len(x))
    return melted_df


def calculate_density(embeds: np.ndarray):
    """平均距離に基づいて密度を計算"""
    center = np.mean(embeds, axis=0)
    distances = np.linalg.norm(embeds - center, axis=1)
    avg_distance = np.mean(distances)
    density = 1 / (avg_distance + 1e-10)
    return density
1b:T4c0,"""Create summaries for the clusters."""

import pandas as pd

from services.llm import request_to_chat_openai


def hierarchical_overview(config):
    dataset = config["output_dir"]
    path = f"outputs/{dataset}/hierarchical_overview.txt"

    hierarchical_label_df = pd.read_csv(f"outputs/{dataset}/hierarchical_merge_labels.csv")

    prompt = config["hierarchical_overview"]["prompt"]
    model = config["hierarchical_overview"]["model"]

    # TODO: level1で固定にしているが、設定で変えられるようにする
    target_level = 1
    target_records = hierarchical_label_df[hierarchical_label_df["level"] == target_level]
    ids = target_records["id"].to_list()
    labels = target_records["label"].to_list()
    descriptions = target_records["description"].to_list()
    target_records.set_index("id", inplace=True)

    input = ""
    for i, _ in enumerate(ids):
        input += f"# Cluster {i}/{len(ids)}: {labels[i]}\n\n"
        input += descriptions[i] + "\n\n"

    messages = [{"role": "user", "content": prompt}, {"role": "user", "content": input}]
    response = request_to_chat_openai(messages=messages, model=model)

    with open(path, "w") as file:
        file.write(response)
1c:T22d3,"""Generate a convenient JSON output file."""

import json
from collections import defaultdict
from pathlib import Path
from typing import TypedDict

import pandas as pd

ROOT_DIR = Path(__file__).parent.parent.parent.parent
CONFIG_DIR = ROOT_DIR / "scatter" / "pipeline" / "configs"


class Argument(TypedDict):
    arg_id: str
    argument: str
    comment_id: str
    x: float
    y: float
    p: float
    cluster_ids: list[str]


class Cluster(TypedDict):
    level: int
    id: str
    label: str
    takeaway: str
    value: int
    parent: str
    density_rank_percentile: float | None


def hierarchical_aggregation(config):
    path = f"outputs/{config['output_dir']}/hierarchical_result.json"
    results = {
        "arguments": [],
        "clusters": [],
        "comments": {},
        "propertyMap": {},
        "translations": {},
        "overview": "",
        "config": config,
    }

    arguments = pd.read_csv(f"outputs/{config['output_dir']}/args.csv")
    arguments.set_index("arg-id", inplace=True)
    arg_num = len(arguments)
    relation_df = pd.read_csv(f"outputs/{config['output_dir']}/relations.csv")
    comments = pd.read_csv(f"inputs/{config['input']}.csv")
    clusters = pd.read_csv(f"outputs/{config['output_dir']}/hierarchical_clusters.csv")
    labels = pd.read_csv(f"outputs/{config['output_dir']}/hierarchical_merge_labels.csv")

    hidden_properties_map: dict[str, list[str]] = config["hierarchical_aggregation"]["hidden_properties"]

    results["arguments"] = _build_arguments(clusters)
    results["clusters"] = _build_cluster_value(labels, arg_num)
    # NOTE: 属性に応じたコメントフィルタ機能が実装されておらず、全てのコメントが含まれてしまうので、コメントアウト
    # results["comments"] = _build_comments_value(
    #     comments, arguments, hidden_properties_map
    # )
    results["comment_num"] = len(comments)
    results["translations"] = _build_translations(config)
    # 属性情報のカラムは、元データに対して指定したカラムとclassificationするカテゴリを合わせたもの
    results["propertyMap"] = _build_property_map(arguments, hidden_properties_map, config)

    with open(f"outputs/{config['output_dir']}/hierarchical_overview.txt") as f:
        overview = f.read()
    print("overview")
    print(overview)
    results["overview"] = overview

    with open(path, "w") as file:
        json.dump(results, file, indent=2, ensure_ascii=False)
    # TODO: サンプリングロジックを実装したいが、現状は全件抽出
    create_custom_intro(config)
    if config["is_pubcom"]:
        add_original_comments(labels, arguments, relation_df, clusters, config)


def create_custom_intro(config):
    dataset = config["output_dir"]
    args_path = f"outputs/{dataset}/args.csv"
    comments = pd.read_csv(f"inputs/{config['input']}.csv")
    result_path = f"outputs/{dataset}/hierarchical_result.json"

    input_count = len(comments)
    args_count = len(pd.read_csv(args_path))
    processed_num = min(input_count, config["extraction"]["limit"])

    print(f"Input count: {input_count}")
    print(f"Args count: {args_count}")

    base_custom_intro = """{intro}
分析対象となったデータの件数は{processed_num}件で、これらのデータに対してOpenAI APIを用いて{args_count}件の意見（議論）を抽出し、クラスタリングを行った。
"""

    intro = config["intro"]
    custom_intro = base_custom_intro.format(intro=intro, processed_num=processed_num, args_count=args_count)

    with open(result_path) as f:
        result = json.load(f)
    result["config"]["intro"] = custom_intro
    with open(result_path, "w") as f:
        json.dump(result, f, indent=2, ensure_ascii=False)


def add_original_comments(labels, arguments, relation_df, clusters, config):
    # 大カテゴリ（cluster-level-1）に該当するラベルだけ抽出
    labels_lv1 = labels[labels["level"] == 1][["id", "label"]].rename(
        columns={"id": "cluster-level-1-id", "label": "category_label"}
    )

    # arguments と clusters をマージ（カテゴリ情報付与）
    merged = arguments.merge(clusters[["arg-id", "cluster-level-1-id"]], on="arg-id").merge(
        labels_lv1, on="cluster-level-1-id", how="left"
    )

    # relation_df と結合
    merged = merged.merge(relation_df, on="arg-id", how="left")

    # 元コメント取得
    comments = pd.read_csv(f"inputs/{config['input']}.csv")
    comments["comment-id"] = comments["comment-id"].astype(str)
    merged["comment-id"] = merged["comment-id"].astype(str)

    # 元コメント本文などとマージ
    final_df = merged.merge(comments, on="comment-id", how="left")

    # 必要カラムのみ整形
    final_cols = ["comment-id", "comment-body", "arg-id", "argument", "cluster-level-1-id", "category_label"]
    for col in ["source", "url"]:
        if col in comments.columns:
            final_cols.append(col)

    final_df = final_df[final_cols]
    final_df = final_df.rename(
        columns={
            "cluster-level-1-id": "category_id",
            "category_label": "category",
            "arg-id": "arg_id",
            "argument": "argument",
            "comment-body": "original-comment",
        }
    )

    # 保存
    final_df.to_csv(f"outputs/{config['output_dir']}/final_result_with_comments.csv", index=False)


def _build_arguments(clusters: pd.DataFrame) -> list[Argument]:
    cluster_columns = [col for col in clusters.columns if col.startswith("cluster-level-") and "id" in col]

    arguments: list[Argument] = []
    for _, row in clusters.iterrows():
        cluster_ids = ["0"]
        for cluster_column in cluster_columns:
            cluster_ids.append(row[cluster_column])
        argument: Argument = {
            "arg_id": row["arg-id"],
            "argument": row["argument"],
            "x": row["x"],
            "y": row["y"],
            "p": 0,  # NOTE: 一旦全部0でいれる
            "cluster_ids": cluster_ids,
        }
        arguments.append(argument)
    return arguments


def _build_cluster_value(melted_labels: pd.DataFrame, total_num: int) -> list[Cluster]:
    results: list[Cluster] = [
        Cluster(
            level=0,
            id="0",
            label="全体",
            takeaway="",
            value=total_num,
            parent="",
            density_rank_percentile=0,
        )
    ]

    for _, melted_label in melted_labels.iterrows():
        cluster_value = Cluster(
            level=melted_label["level"],
            id=melted_label["id"],
            label=melted_label["label"],
            takeaway=melted_label["description"],
            value=melted_label["value"],
            parent=melted_label.get("parent", "全体"),
            density_rank_percentile=melted_label.get("density_rank_percentile"),
        )
        results.append(cluster_value)
    return results


def _build_comments_value(
    comments: pd.DataFrame,
    arguments: pd.DataFrame,
    hidden_properties_map: dict[str, list[str]],
):
    comment_dict: dict[str, dict[str, str]] = {}
    useful_comment_ids = set(arguments["comment-id"].values)
    for _, row in comments.iterrows():
        id = row["comment-id"]
        if id in useful_comment_ids:
            res = {"comment": row["comment-body"]}
            should_skip = any(row[prop] in hidden_values for prop, hidden_values in hidden_properties_map.items())
            if should_skip:
                continue
            comment_dict[str(id)] = res

    return comment_dict


def _build_translations(config):
    languages = list(config.get("translation", {}).get("languages", []))
    if len(languages) > 0:
        with open(f"outputs/{config['output_dir']}/translations.json") as f:
            translations = f.read()
        return json.loads(translations)
    return {}


def _build_property_map(
    arguments: pd.DataFrame, hidden_properties_map: dict[str, list[str]], config: dict
) -> dict[str, dict[str, str]]:
    property_columns = list(hidden_properties_map.keys()) + list(config["extraction"]["categories"].keys())
    property_map = defaultdict(dict)

    # 指定された property_columns が arguments に存在するかチェック
    missing_cols = [col for col in property_columns if col not in arguments.columns]
    if missing_cols:
        raise ValueError(
            f"指定されたカラム {missing_cols} が args.csv に存在しません。"
            "設定ファイルaggregation / hidden_propertiesから該当カラムを取り除いてください。"
        )

    for prop in property_columns:
        for arg_id, row in arguments.iterrows():
            # LLMによるcategory classificationがうまく行かず、NaNの場合はNoneにする
            property_map[prop][arg_id] = row[prop] if not pd.isna(row[prop]) else None
    return property_map
1d:T13f1,import concurrent.futures
import json
import logging
import re

import pandas as pd
from tqdm import tqdm

from services.category_classification import classify_args
from services.llm import request_to_chat_openai
from services.parse_json_list import parse_response
from utils import update_progress

COMMA_AND_SPACE_AND_RIGHT_BRACKET = re.compile(r",\s*(\])")


def _validate_property_columns(property_columns: list[str], comments: pd.DataFrame) -> None:
    if not all(property in comments.columns for property in property_columns):
        raise ValueError(f"Properties {property_columns} not found in comments. Columns are {comments.columns}")


def extraction(config):
    dataset = config["output_dir"]
    path = f"outputs/{dataset}/args.csv"
    model = config["extraction"]["model"]
    prompt = config["extraction"]["prompt"]
    workers = config["extraction"]["workers"]
    limit = config["extraction"]["limit"]
    property_columns = config["extraction"]["properties"]

    # カラム名だけを読み込み、必要なカラムが含まれているか確認する
    comments = pd.read_csv(f"inputs/{config['input']}.csv", nrows=0)
    _validate_property_columns(property_columns, comments)
    # エラーが出なかった場合、すべての行を読み込む
    comments = pd.read_csv(
        f"inputs/{config['input']}.csv", usecols=["comment-id", "comment-body"] + config["extraction"]["properties"]
    )
    comment_ids = (comments["comment-id"].values)[:limit]
    comments.set_index("comment-id", inplace=True)
    results = pd.DataFrame()
    update_progress(config, total=len(comment_ids))

    argument_map = {}
    relation_rows = []

    for i in tqdm(range(0, len(comment_ids), workers)):
        batch = comment_ids[i : i + workers]
        batch_inputs = [comments.loc[id]["comment-body"] for id in batch]
        batch_results = extract_batch(batch_inputs, prompt, model, workers)

        for comment_id, extracted_args in zip(batch, batch_results, strict=False):
            for j, arg in enumerate(extracted_args):
                if arg not in argument_map:
                    # argumentテーブルに追加
                    arg_id = f"A{comment_id}_{j}"
                    argument_map[arg] = {
                        "arg-id": arg_id,
                        "argument": arg,
                    }
                else:
                    arg_id = argument_map[arg]["arg-id"]

                # relationテーブルにcommentとargの関係を追加
                relation_row = {
                    "arg-id": arg_id,
                    "comment-id": comment_id,
                }
                relation_rows.append(relation_row)

        update_progress(config, incr=len(batch))

    # DataFrame化
    results = pd.DataFrame(argument_map.values())
    relation_df = pd.DataFrame(relation_rows)

    if results.empty:
        raise RuntimeError("result is empty, maybe bad prompt")

    classification_categories = config["extraction"]["categories"]
    if classification_categories:
        results = classify_args(results, config, workers)

    results.to_csv(path, index=False)
    # comment-idとarg-idの関係を保存
    relation_df.to_csv(f"outputs/{dataset}/relations.csv", index=False)


logging.basicConfig(level=logging.ERROR)


def extract_batch(batch, prompt, model, workers):
    with concurrent.futures.ThreadPoolExecutor(max_workers=workers) as executor:
        futures_with_index = [
            (i, executor.submit(extract_arguments, input, prompt, model)) for i, input in enumerate(batch)
        ]

        done, not_done = concurrent.futures.wait([f for _, f in futures_with_index], timeout=30)
        results = [[] for _ in range(len(batch))]

        for _, future in futures_with_index:
            if future in not_done and not future.cancelled():
                future.cancel()

        for i, future in futures_with_index:
            if future in done:
                try:
                    result = future.result()
                    results[i] = result
                except Exception as e:
                    logging.error(f"Task {future} failed with error: {e}")
                    results[i] = []
        return results


def extract_by_llm(input, prompt, model):
    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": input},
    ]
    response = request_to_chat_openai(messages=messages, model=model)
    return response


def extract_arguments(input, prompt, model, retries=1):
    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": input},
    ]
    try:
        response = request_to_chat_openai(messages=messages, model=model, is_json=False)
        items = parse_response(response)
        items = filter(None, items)  # omit empty strings
        return items
    except json.decoder.JSONDecodeError as e:
        print("JSON error:", e)
        print("Input was:", input)
        print("Response was:", response)
        print("Silently giving up on trying to generate valid list.")
        return []
1e:T1149,"""Cluster the arguments using UMAP + HDBSCAN and GPT-4."""

from importlib import import_module

import numpy as np
import pandas as pd
import scipy.cluster.hierarchy as sch
from sklearn.cluster import KMeans


def hierarchical_clustering(config):
    UMAP = import_module("umap").UMAP

    dataset = config["output_dir"]
    path = f"outputs/{dataset}/hierarchical_clusters.csv"
    arguments_df = pd.read_csv(f"outputs/{dataset}/args.csv", usecols=["arg-id", "argument"])
    embeddings_df = pd.read_pickle(f"outputs/{dataset}/embeddings.pkl")
    embeddings_array = np.asarray(embeddings_df["embedding"].values.tolist())
    cluster_nums = config["hierarchical_clustering"]["cluster_nums"]

    n_samples = embeddings_array.shape[0]
    # デフォルト設定は15
    default_n_neighbors = 15

    # テスト等サンプルが少なすぎる場合、n_neighborsの設定値を下げる
    if n_samples <= default_n_neighbors:
        n_neighbors = max(2, n_samples - 1)  # 最低2以上
    else:
        n_neighbors = default_n_neighbors

    umap_model = UMAP(random_state=42, n_components=2, n_neighbors=n_neighbors)
    # TODO 詳細エラーメッセージを加える
    # 以下のエラーの場合、おそらく元の意見件数が少なすぎることが原因
    # TypeError: Cannot use scipy.linalg.eigh for sparse A with k >= N. Use scipy.linalg.eigh(A.toarray()) or reduce k.
    umap_embeds = umap_model.fit_transform(embeddings_array)

    cluster_results = hierarchical_clustering_embeddings(
        umap_embeds=umap_embeds,
        cluster_nums=cluster_nums,
    )
    result_df = pd.DataFrame(
        {
            "arg-id": arguments_df["arg-id"],
            "argument": arguments_df["argument"],
            "x": umap_embeds[:, 0],
            "y": umap_embeds[:, 1],
        }
    )

    for cluster_level, final_labels in enumerate(cluster_results.values(), start=1):
        result_df[f"cluster-level-{cluster_level}-id"] = [f"{cluster_level}_{label}" for label in final_labels]

    result_df.to_csv(path, index=False)


def generate_cluster_count_list(min_clusters: int, max_clusters: int):
    cluster_counts = []
    current = min_clusters
    cluster_counts.append(current)

    if min_clusters == max_clusters:
        return cluster_counts

    while True:
        next_double = current * 2
        next_triple = current * 3

        if next_double >= max_clusters:
            if cluster_counts[-1] != max_clusters:
                cluster_counts.append(max_clusters)
            break

        # 次の倍はまだ max_clusters に収まるが、3倍だと超える
        # -> (次の倍は細かすぎるので)スキップして max_clusters に飛ぶ
        if next_triple > max_clusters:
            cluster_counts.append(max_clusters)
            break

        cluster_counts.append(next_double)
        current = next_double

    return cluster_counts


def merge_clusters_with_hierarchy(
    cluster_centers: np.ndarray,
    kmeans_labels: np.ndarray,
    umap_array: np.ndarray,
    n_cluster_cut: int,
):
    Z = sch.linkage(cluster_centers, method="ward")
    cluster_labels_merged = sch.fcluster(Z, t=n_cluster_cut, criterion="maxclust")

    n_samples = umap_array.shape[0]
    final_labels = np.zeros(n_samples, dtype=int)

    for i in range(n_samples):
        original_label = kmeans_labels[i]
        final_labels[i] = cluster_labels_merged[original_label]

    return final_labels


def hierarchical_clustering_embeddings(
    umap_embeds,
    cluster_nums,
):
    # 最大分割数でクラスタリングを実施
    print("start initial clustering")
    initial_cluster_num = cluster_nums[-1]
    kmeans_model = KMeans(n_clusters=initial_cluster_num, random_state=42)
    kmeans_model.fit(umap_embeds)
    print("end initial clustering")

    results = {}
    print("start hierarchical clustering")
    cluster_nums.sort()
    print(cluster_nums)
    for n_cluster_cut in cluster_nums[:-1]:
        print("n_cluster_cut: ", n_cluster_cut)
        final_labels = merge_clusters_with_hierarchy(
            cluster_centers=kmeans_model.cluster_centers_,
            kmeans_labels=kmeans_model.labels_,
            umap_array=umap_embeds,
            n_cluster_cut=n_cluster_cut,
        )
        results[n_cluster_cut] = final_labels

    results[initial_cluster_num] = kmeans_model.labels_
    print("end hierarchical clustering")

    return results
1f:T142a,import json
from concurrent.futures import ThreadPoolExecutor
from functools import partial
from typing import TypedDict

import pandas as pd

from services.llm import request_to_chat_openai


class LabellingResult(TypedDict):
    """各クラスタのラベリング結果を表す型"""

    cluster_id: str  # クラスタのID
    label: str  # クラスタのラベル名
    description: str  # クラスタの説明文


def hierarchical_initial_labelling(config: dict) -> None:
    """階層的クラスタリングの初期ラベリングを実行する

    Args:
        config: 設定情報を含む辞書
            - output_dir: 出力ディレクトリ名
            - hierarchical_initial_labelling: 初期ラベリングの設定
                - sampling_num: サンプリング数
                - prompt: LLMへのプロンプト
                - model: 使用するLLMモデル名
                - workers: 並列処理のワーカー数
    """
    dataset = config["output_dir"]
    path = f"outputs/{dataset}/hierarchical_initial_labels.csv"
    clusters_argument_df = pd.read_csv(f"outputs/{dataset}/hierarchical_clusters.csv")

    cluster_id_columns = [col for col in clusters_argument_df.columns if col.startswith("cluster-level-")]
    initial_cluster_id_column = cluster_id_columns[-1]
    sampling_num = config["hierarchical_initial_labelling"]["sampling_num"]
    initial_labelling_prompt = config["hierarchical_initial_labelling"]["prompt"]
    model = config["hierarchical_initial_labelling"]["model"]
    workers = config["hierarchical_initial_labelling"]["workers"]

    initial_label_df = initial_labelling(
        initial_labelling_prompt,
        clusters_argument_df,
        sampling_num,
        model,
        workers,
    )
    print("start initial labelling")
    initial_clusters_argument_df = clusters_argument_df.merge(
        initial_label_df,
        left_on=initial_cluster_id_column,
        right_on="cluster_id",
        how="left",
    ).rename(
        columns={
            "label": f"{initial_cluster_id_column.replace('-id', '')}-label",
            "description": f"{initial_cluster_id_column.replace('-id', '')}-description",
        }
    )
    print("end initial labelling")
    initial_clusters_argument_df.to_csv(path, index=False)


def initial_labelling(
    prompt: str,
    clusters_df: pd.DataFrame,
    sampling_num: int,
    model: str,
    workers: int,
) -> pd.DataFrame:
    """各クラスタに対して初期ラベリングを実行する

    Args:
        prompt: LLMへのプロンプト
        clusters_df: クラスタリング結果のDataFrame
        sampling_num: 各クラスタからサンプリングする意見の数
        model: 使用するLLMモデル名
        workers: 並列処理のワーカー数

    Returns:
        各クラスタのラベリング結果を含むDataFrame
    """
    cluster_columns = [col for col in clusters_df.columns if col.startswith("cluster-level-")]
    initial_cluster_column = cluster_columns[-1]
    cluster_ids = clusters_df[initial_cluster_column].unique()
    process_func = partial(
        process_initial_labelling,
        df=clusters_df,
        prompt=prompt,
        sampling_num=sampling_num,
        target_column=initial_cluster_column,
        model=model,
    )
    with ThreadPoolExecutor(max_workers=workers) as executor:
        results = list(executor.map(process_func, cluster_ids))
    return pd.DataFrame(results)


def process_initial_labelling(
    cluster_id: str,
    df: pd.DataFrame,
    prompt: str,
    sampling_num: int,
    target_column: str,
    model: str,
) -> LabellingResult:
    """個別のクラスタに対してラベリングを実行する

    Args:
        cluster_id: 処理対象のクラスタID
        df: クラスタリング結果のDataFrame
        prompt: LLMへのプロンプト
        sampling_num: サンプリングする意見の数
        target_column: クラスタIDが格納されている列名
        model: 使用するLLMモデル名

    Returns:
        クラスタのラベリング結果
    """
    cluster_data = df[df[target_column] == cluster_id]
    sampling_num = min(sampling_num, len(cluster_data))
    cluster = cluster_data.sample(sampling_num)
    input = "\n".join(cluster["argument"].values)
    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": input},
    ]
    try:
        response = request_to_chat_openai(messages=messages, model=model, is_json=True)
        response_json = json.loads(response)
        return LabellingResult(
            cluster_id=cluster_id,
            label=response_json.get("label", "エラーでラベル名が取得できませんでした"),
            description=response_json.get("description", "エラーで解説が取得できませんでした"),
        )
    except Exception as e:
        print(e)
        return LabellingResult(
            cluster_id=cluster_id,
            label="エラーでラベル名が取得できませんでした",
            description="エラーで解説が取得できませんでした",
        )
20:T2fa5,import json
from concurrent.futures import ThreadPoolExecutor
from dataclasses import dataclass
from functools import partial

import numpy as np
import pandas as pd
from tqdm import tqdm

from services.llm import request_to_chat_openai


@dataclass
class ClusterColumns:
    """同一階層のクラスター関連のカラム名を管理するクラス"""

    id: str
    label: str
    description: str

    @classmethod
    def from_id_column(cls, id_column: str) -> "ClusterColumns":
        """ID列名から関連するカラム名を生成"""
        return cls(
            id=id_column,
            label=id_column.replace("-id", "-label"),
            description=id_column.replace("-id", "-description"),
        )


@dataclass
class ClusterValues:
    """対象クラスタのlabel/descriptionを管理するクラス"""

    label: str
    description: str

    def to_prompt_text(self) -> str:
        return f"- {self.label}: {self.description}"


def hierarchical_merge_labelling(config: dict) -> None:
    """階層的クラスタリングの結果に対してマージラベリングを実行する

    Args:
        config: 設定情報を含む辞書
            - output_dir: 出力ディレクトリ名
            - hierarchical_merge_labelling: マージラベリングの設定
                - sampling_num: サンプリング数
                - prompt: LLMへのプロンプト
                - model: 使用するLLMモデル名
                - workers: 並列処理のワーカー数
    """
    dataset = config["output_dir"]
    merge_path = f"outputs/{dataset}/hierarchical_merge_labels.csv"
    clusters_df = pd.read_csv(f"outputs/{dataset}/hierarchical_initial_labels.csv")

    cluster_id_columns: list[str] = _filter_id_columns(clusters_df.columns)
    # ボトムクラスタのラベル・説明とクラスタid付きの各argumentを入力し、各階層のクラスタラベル・説明を生成し、argumentに付けたdfを作成
    merge_result_df = merge_labelling(
        clusters_df=clusters_df,
        cluster_id_columns=sorted(cluster_id_columns, reverse=True),
        config=config,
    )
    # 上記のdfから各クラスタのlevel, id, label, description, valueを取得してdfを作成
    melted_df = melt_cluster_data(merge_result_df)
    # 上記のdfに親子関係を追加
    parent_child_df = _build_parent_child_mapping(merge_result_df, cluster_id_columns)
    melted_df = melted_df.merge(parent_child_df, on=["level", "id"], how="left")
    density_df = calculate_cluster_density(melted_df, config)
    density_df.to_csv(merge_path, index=False)


def _build_parent_child_mapping(df: pd.DataFrame, cluster_id_columns: list[str]):
    """クラスタ間の親子関係をマッピングする

    Args:
        df: クラスタリング結果のDataFrame
        cluster_id_columns: クラスタIDのカラム名のリスト

    Returns:
        親子関係のマッピング情報を含むDataFrame
    """
    results = []
    top_cluster_column = cluster_id_columns[0]
    top_cluster_values = df[top_cluster_column].unique()
    for c in top_cluster_values:
        results.append(
            {
                "level": 1,
                "id": c,
                "parent": "0",  # aggregationで追加する全体クラスタのid
            }
        )

    for idx in range(len(cluster_id_columns) - 1):
        current_column = cluster_id_columns[idx]
        children_column = cluster_id_columns[idx + 1]
        current_level = current_column.replace("-id", "").replace("cluster-level-", "")
        # 現在のレベルのクラスタid
        current_cluster_values = df[current_column].unique()
        for current_id in current_cluster_values:
            children_ids = df.loc[df[current_column] == current_id, children_column].unique()
            for child_id in children_ids:
                results.append(
                    {
                        "level": int(current_level) + 1,
                        "id": child_id,
                        "parent": current_id,
                    }
                )
    return pd.DataFrame(results)


def _filter_id_columns(columns: list[str]) -> list[str]:
    """クラスタIDのカラム名をフィルタリングする

    Args:
        columns: 全カラム名のリスト

    Returns:
        クラスタIDのカラム名のリスト
    """
    return [col for col in columns if col.startswith("cluster-level-") and col.endswith("-id")]


def melt_cluster_data(df: pd.DataFrame) -> pd.DataFrame:
    """クラスタデータを行形式に変換する

    cluster-level-n-(id|label|description) を行形式 (level, id, label, description, value) にまとめる。
    [cluster-level-n-id, cluster-level-n-label, cluster-level-n-description] を [level, id, label, description, value(件数)] に変換する。

    Args:
        df: クラスタリング結果のDataFrame

    Returns:
        行形式に変換されたDataFrame
    """
    id_columns: list[str] = _filter_id_columns(df.columns)
    levels: set[int] = {int(col.replace("cluster-level-", "").replace("-id", "")) for col in id_columns}
    all_rows: list[dict] = []

    # levelごとに各クラスタの出現件数を集計・縦持ちにする
    for level in levels:
        cluster_columns = ClusterColumns.from_id_column(f"cluster-level-{level}-id")
        # クラスタidごとの件数集計
        level_count_df = df.groupby(cluster_columns.id).size().reset_index(name="value")

        level_unique_val_df = df[
            [cluster_columns.id, cluster_columns.label, cluster_columns.description]
        ].drop_duplicates()
        level_unique_val_df = level_unique_val_df.merge(level_count_df, on=cluster_columns.id, how="left")
        level_unique_vals = [
            {
                "level": level,
                "id": row[cluster_columns.id],
                "label": row[cluster_columns.label],
                "description": row[cluster_columns.description],
                "value": row["value"],
            }
            for _, row in level_unique_val_df.iterrows()
        ]
        all_rows.extend(level_unique_vals)
    return pd.DataFrame(all_rows)


def merge_labelling(clusters_df: pd.DataFrame, cluster_id_columns: list[str], config) -> pd.DataFrame:
    """階層的なクラスタのマージラベリングを実行する

    Args:
        clusters_df: クラスタリング結果のDataFrame
        cluster_id_columns: クラスタIDのカラム名のリスト
        config: 設定情報を含む辞書

    Returns:
        マージラベリング結果を含むDataFrame
    """
    for idx in tqdm(range(len(cluster_id_columns) - 1)):
        previous_columns = ClusterColumns.from_id_column(cluster_id_columns[idx])
        current_columns = ClusterColumns.from_id_column(cluster_id_columns[idx + 1])

        process_fn = partial(
            process_merge_labelling,
            result_df=clusters_df,
            current_columns=current_columns,
            previous_columns=previous_columns,
            config=config,
        )

        current_cluster_ids = sorted(clusters_df[current_columns.id].unique())
        with ThreadPoolExecutor(max_workers=config["hierarchical_merge_labelling"]["workers"]) as executor:
            responses = list(
                tqdm(
                    executor.map(process_fn, current_cluster_ids),
                    total=len(current_cluster_ids),
                )
            )

        current_result_df = pd.DataFrame(responses)
        clusters_df = clusters_df.merge(current_result_df, on=[current_columns.id])
    return clusters_df


def process_merge_labelling(
    target_cluster_id: str,
    result_df: pd.DataFrame,
    current_columns: ClusterColumns,
    previous_columns: ClusterColumns,
    config,
):
    """個別のクラスタに対してマージラベリングを実行する

    Args:
        target_cluster_id: 処理対象のクラスタID
        result_df: クラスタリング結果のDataFrame
        current_columns: 現在のレベルのカラム情報
        previous_columns: 前のレベルのカラム情報
        config: 設定情報を含む辞書

    Returns:
        マージラベリング結果を含む辞書
    """

    def filter_previous_values(df: pd.DataFrame, previous_columns: ClusterColumns) -> list[ClusterValues]:
        """前のレベルのクラスタ情報を取得する"""
        previous_records = df[df[current_columns.id] == target_cluster_id][
            [previous_columns.label, previous_columns.description]
        ].drop_duplicates()
        previous_values = [
            ClusterValues(
                label=row[previous_columns.label],
                description=row[previous_columns.description],
            )
            for _, row in previous_records.iterrows()
        ]
        return previous_values

    previous_values = filter_previous_values(result_df, previous_columns)
    if len(previous_values) == 1:
        return {
            current_columns.id: target_cluster_id,
            current_columns.label: previous_values[0].label,
            current_columns.description: previous_values[0].description,
        }
    elif len(previous_values) == 0:
        raise ValueError(f"クラスタ {target_cluster_id} には前のレベルのクラスタが存在しません。")

    current_cluster_data = result_df[result_df[current_columns.id] == target_cluster_id]
    sampling_num = min(
        config["hierarchical_merge_labelling"]["sampling_num"],
        len(current_cluster_data),
    )
    sampled_data = current_cluster_data.sample(sampling_num)
    sampled_argument_text = "\n".join(sampled_data["argument"].values)
    cluster_text = "\n".join([value.to_prompt_text() for value in previous_values])
    messages = [
        {"role": "system", "content": config["hierarchical_merge_labelling"]["prompt"]},
        {
            "role": "user",
            "content": "クラスタラベル\n" + cluster_text + "\n" + "クラスタの意見\n" + sampled_argument_text,
        },
    ]
    try:
        response = request_to_chat_openai(
            messages=messages,
            model=config["hierarchical_merge_labelling"]["model"],
            is_json=True,
        )
        response_json = json.loads(response)
        return {
            current_columns.id: target_cluster_id,
            current_columns.label: response_json.get("label", "エラーでラベル名が取得できませんでした"),
            current_columns.description: response_json.get("description", "エラーで解説が取得できませんでした"),
        }
    except Exception as e:
        print(f"エラーが発生しました: {e}")
        return {
            current_columns.id: target_cluster_id,
            current_columns.label: "エラーでラベル名が取得できませんでした",
            current_columns.description: "エラーで解説が取得できませんでした",
        }


def calculate_cluster_density(melted_df: pd.DataFrame, config: dict):
    """クラスタ内の密度計算"""
    hierarchical_cluster_df = pd.read_csv(f"outputs/{config['output_dir']}/hierarchical_clusters.csv")

    densities = []
    for level, c_id in zip(melted_df["level"], melted_df["id"], strict=False):
        cluster_embeds = hierarchical_cluster_df[hierarchical_cluster_df[f"cluster-level-{level}-id"] == c_id][
            ["x", "y"]
        ].values
        density = calculate_density(cluster_embeds)
        densities.append(density)

    # 密度のランクを計算
    melted_df["density"] = densities
    melted_df["density_rank"] = melted_df.groupby("level")["density"].rank(ascending=False, method="first")
    melted_df["density_rank_percentile"] = melted_df.groupby("level")["density_rank"].transform(lambda x: x / len(x))
    return melted_df


def calculate_density(embeds: np.ndarray):
    """平均距離に基づいて密度を計算"""
    center = np.mean(embeds, axis=0)
    distances = np.linalg.norm(embeds - center, axis=1)
    avg_distance = np.mean(distances)
    density = 1 / (avg_distance + 1e-10)
    return density
21:T4c0,"""Create summaries for the clusters."""

import pandas as pd

from services.llm import request_to_chat_openai


def hierarchical_overview(config):
    dataset = config["output_dir"]
    path = f"outputs/{dataset}/hierarchical_overview.txt"

    hierarchical_label_df = pd.read_csv(f"outputs/{dataset}/hierarchical_merge_labels.csv")

    prompt = config["hierarchical_overview"]["prompt"]
    model = config["hierarchical_overview"]["model"]

    # TODO: level1で固定にしているが、設定で変えられるようにする
    target_level = 1
    target_records = hierarchical_label_df[hierarchical_label_df["level"] == target_level]
    ids = target_records["id"].to_list()
    labels = target_records["label"].to_list()
    descriptions = target_records["description"].to_list()
    target_records.set_index("id", inplace=True)

    input = ""
    for i, _ in enumerate(ids):
        input += f"# Cluster {i}/{len(ids)}: {labels[i]}\n\n"
        input += descriptions[i] + "\n\n"

    messages = [{"role": "user", "content": prompt}, {"role": "user", "content": input}]
    response = request_to_chat_openai(messages=messages, model=model)

    with open(path, "w") as file:
        file.write(response)
8:[["$","div",null,{"className":"container","children":[["$","$L11",null,{"meta":{"reporter":"テスト環境","message":"これは動作確認のためのテスト用のメタデータです。レポートの作成者に関する情報等を、public/meta/custom/metadata.jsonに記載することで、レポート上で情報を表示することができます。","webLink":null,"privacyLink":null,"termsLink":null,"brandColor":"#2577B1","isDefault":true}}],["$","$L12",null,{"mx":"auto","maxW":"750px","mb":10,"children":[["$","$L13",null,{"textAlign":"center","fontSize":"xl","mb":5,"children":"Report"}],["$","$L13",null,{"as":"h2","size":"4xl","mb":2,"className":"headingColor","children":"人々は「東日本大震災、体育館避難所で起きたこと」を読んでどのように反応したか"}],["$","$L14",null,{"fontWeight":"bold","fontSize":"xl","mb":2,"children":[["$","$L15",null,{"mr":1,"children":["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":20,"height":20,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-messages-square","children":[["$","path","p1xzt8",{"d":"M14 9a2 2 0 0 1-2 2H6l-4 4V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2z"}],["$","path","1cx29u",{"d":"M18 9h2a2 2 0 0 1 2 2v11l-4-4h-6a2 2 0 0 1-2-2v-1"}],"$undefined"]}]}],"309","件"]}],["$","p",null,{"children":"各クラスタの意見は、情報の価値や地域防災力の強化、震災からの教訓、炊き出し支援の質、非常時の平等とリーダーシップに焦点を当てています。情報共有や地域の協力が防災において重要であることが強調され、過去の経験を活かした防災意識の向上が求められています。また、支援活動の質や持続可能性、非常時における平等な行動の重要性も指摘されており、全体としてコミュニティの連携とリーダーシップの強化が必要とされています。"}]]}],["$","$L16",null,{"result":{"arguments":[{"arg_id":"Acsv-1_0","argument":"今から気にしなければならないことがある","x":6.9615917,"y":7.0376353,"p":0,"cluster_ids":["0","1_1","2_17"]},{"arg_id":"Acsv-2_0","argument":"数年前に読んだ内容は今も教訓として色あせない。語り継がれて欲しい。","x":4.884435,"y":5.3071494,"p":0,"cluster_ids":["0","1_1","2_28"]},{"arg_id":"Acsv-3_0","argument":"防災に関する取り組みや教育が重要である","x":10.320328,"y":6.7008405,"p":0,"cluster_ids":["0","1_2","2_1"]},{"arg_id":"Acsv-4_0","argument":"貴重な実務的な経験談を多くの人が読むことで、現場での共通意識作りが楽になると思う。広まってほしい。","x":7.4323997,"y":6.0668035,"p":0,"cluster_ids":["0","1_1","2_13"]},{"arg_id":"Acsv-5_0","argument":"東日本大震災で21000人が命を失い、または行方不明となった。私は岩手県陸前高田市の避難所で二ヶ月間生活し、避難所運営を経験した。","x":12.0076685,"y":7.735641,"p":0,"cluster_ids":["0","1_3","2_35"]},{"arg_id":"Acsv-6_0","argument":"日付: 2015年6月25日","x":5.438457,"y":5.2976522,"p":0,"cluster_ids":["0","1_1","2_2"]},{"arg_id":"Acsv-7_0","argument":"読んだことを忘れているので再度ブックマークする必要がある","x":4.734431,"y":5.129059,"p":0,"cluster_ids":["0","1_1","2_28"]},{"arg_id":"Acsv-8_0","argument":"震災に関心のある人は、一度これを通して読んでみると良い","x":11.340905,"y":6.3833566,"p":0,"cluster_ids":["0","1_3","2_19"]},{"arg_id":"Acsv-9_0","argument":"地震が起きた際に「何か力になりたい」と思う人は、善意が必ずしも良い方向に働かないことを理解するべきである。","x":11.124988,"y":6.0899186,"p":0,"cluster_ids":["0","1_3","2_19"]},{"arg_id":"Acsv-10_0","argument":"地震が起きた際に「何か力になりたい」と思う人は、善意が必ずしも良い方向に働かないことを理解するべき","x":11.01523,"y":6.173518,"p":0,"cluster_ids":["0","1_3","2_19"]},{"arg_id":"Acsv-11_0","argument":"これはマニュアルとしても通用する永久保存版だと思う","x":6.567555,"y":5.8248754,"p":0,"cluster_ids":["0","1_1","2_27"]},{"arg_id":"Acsv-12_0","argument":"ものすごく参考になる体験記","x":7.336719,"y":6.069359,"p":0,"cluster_ids":["0","1_1","2_13"]},{"arg_id":"Acsv-13_0","argument":"これは印刷して家族に読ませたい","x":4.6830134,"y":6.156977,"p":0,"cluster_ids":["0","1_1","2_12"]},{"arg_id":"Acsv-14_0","argument":"明日は我が身という考え方が重要である","x":6.613949,"y":6.7508283,"p":0,"cluster_ids":["0","1_1","2_11"]},{"arg_id":"Acsv-15_0","argument":"都市の籠城戦に近い経験をされたと思う","x":11.382268,"y":7.826129,"p":0,"cluster_ids":["0","1_3","2_29"]},{"arg_id":"Acsv-16_0","argument":"スタッフが毎日やりくりして食材を計算して調理していたが、気が抜けてしまった","x":10.525218,"y":10.531463,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-16_1","argument":"手に入らない調味料がほとんどなくなっている状況は団体にとって問題である","x":10.952127,"y":10.127457,"p":0,"cluster_ids":["0","1_4","2_24"]},{"arg_id":"Acsv-17_0","argument":"大船渡の寿司屋が被災3日目にネタがだめになる前に握り始めたことは素晴らしい","x":11.728945,"y":8.091088,"p":0,"cluster_ids":["0","1_3","2_35"]},{"arg_id":"Acsv-18_0","argument":"記録してくださったことに感謝する","x":7.5989985,"y":5.3140697,"p":0,"cluster_ids":["0","1_1","2_25"]},{"arg_id":"Acsv-19_0","argument":"玄関に「避難しました」の札が下げてあり、それに助けられたと感じる。もしその札がなければ、記録もなかったかもしれず、考えると鳥肌が立つ。","x":10.884064,"y":8.722631,"p":0,"cluster_ids":["0","1_3","2_15"]},{"arg_id":"Acsv-20_0","argument":"興味深かった","x":6.372852,"y":7.6350985,"p":0,"cluster_ids":["0","1_1","2_17"]},{"arg_id":"Acsv-21_0","argument":"このまとめは丁寧で親切である","x":6.0464916,"y":6.4405994,"p":0,"cluster_ids":["0","1_1","2_21"]},{"arg_id":"Acsv-21_1","argument":"定期的にこういう話題が上がることは平和ボケしている私にとって助かる","x":7.2237496,"y":7.424105,"p":0,"cluster_ids":["0","1_1","2_17"]},{"arg_id":"Acsv-22_0","argument":"善意だけの支援は時に迷惑をかけることがあることを記憶しておくべき","x":9.118587,"y":9.868118,"p":0,"cluster_ids":["0","1_4","2_41"]},{"arg_id":"Acsv-23_0","argument":"日本国民全員に読んでほしい","x":4.70215,"y":5.941988,"p":0,"cluster_ids":["0","1_1","2_12"]},{"arg_id":"Acsv-24_0","argument":"陸前高田市米崎小学校の体育館で二ヶ月間の避難所生活をしながら避難所運営をした経験についての寄稿","x":11.909675,"y":7.7641973,"p":0,"cluster_ids":["0","1_3","2_35"]},{"arg_id":"Acsv-25_0","argument":"次世代に継承していきたい知見について考えるべき","x":6.846643,"y":5.880192,"p":0,"cluster_ids":["0","1_1","2_4"]},{"arg_id":"Acsv-26_0","argument":"プライバシーがないのは厳しいと感じる","x":8.036242,"y":7.412488,"p":0,"cluster_ids":["0","1_1","2_22"]},{"arg_id":"Acsv-26_1","argument":"持ち物による強弱を作らないことが重要","x":7.0811276,"y":8.785164,"p":0,"cluster_ids":["0","1_5","2_9"]},{"arg_id":"Acsv-27_0","argument":"逃げない選択肢は他人を危険に晒すことを考慮すべき","x":7.668456,"y":10.884174,"p":0,"cluster_ids":["0","1_5","2_7"]},{"arg_id":"Acsv-28_0","argument":"東日本大震災の体育館避難所では、手を貸す必要のある方がいた","x":12.092529,"y":7.4462976,"p":0,"cluster_ids":["0","1_3","2_33"]},{"arg_id":"Acsv-28_1","argument":"夜間にトイレに行くと、戻るべき家族が寝ている状況があった","x":9.975246,"y":9.060361,"p":0,"cluster_ids":["0","1_4","2_38"]},{"arg_id":"Acsv-29_0","argument":"夕飯時に炊き出しに来た団体が出してくれた料理が美味しかった","x":10.313226,"y":10.281745,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-29_1","argument":"翌日用に仕込んでおいた芋や葉物が全てなくなり、缶詰も使われてしまった","x":10.71324,"y":10.391463,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-30_0","argument":"皆で食べることができ、炊事担当者も一緒に食べられることが幸せだった","x":10.159603,"y":10.177923,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-31_0","argument":"大きな地震の後の避難所運営についての話","x":11.341402,"y":7.607937,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-32_0","argument":"心に留め、皆に伝えていくべき記事である","x":5.526682,"y":6.0023947,"p":0,"cluster_ids":["0","1_1","2_42"]},{"arg_id":"Acsv-33_0","argument":"この知見は非常に重要であり、教科書に掲載すべきである","x":6.422786,"y":5.6012406,"p":0,"cluster_ids":["0","1_1","2_27"]},{"arg_id":"Acsv-34_0","argument":"防災に関する取り組みを強化すべき","x":10.481315,"y":6.671686,"p":0,"cluster_ids":["0","1_2","2_1"]},{"arg_id":"Acsv-35_0","argument":"逃げない選択肢は他人を危険に晒す可能性があることを考慮すべき","x":7.7103534,"y":10.87537,"p":0,"cluster_ids":["0","1_5","2_7"]},{"arg_id":"Acsv-36_0","argument":"阪神淡路の頃と比べて改善されており、当時の知見が生かされている","x":11.911716,"y":6.495527,"p":0,"cluster_ids":["0","1_3","2_20"]},{"arg_id":"Acsv-36_1","argument":"地方部の人口規模が成り立っている要因である","x":9.1847315,"y":6.7860203,"p":0,"cluster_ids":["0","1_2","2_46"]},{"arg_id":"Acsv-36_2","argument":"大都市圏では避難者の数が多く、同様には回せないだろう","x":10.836159,"y":7.817611,"p":0,"cluster_ids":["0","1_3","2_8"]},{"arg_id":"Acsv-37_0","argument":"避難所運営や炊き出し支援に関する教訓は共有されるべき","x":10.652759,"y":8.055351,"p":0,"cluster_ids":["0","1_3","2_8"]},{"arg_id":"Acsv-38_0","argument":"岩手県陸前高田市米崎小学校の体育館で二ヶ月間避難所生活をし、避難所運営を経験した","x":11.962278,"y":7.8158426,"p":0,"cluster_ids":["0","1_3","2_35"]},{"arg_id":"Acsv-39_0","argument":"コミュニティへの関わり方に関する知見は役立つ。特に避難所ではさらに有用だと感じた。","x":10.3612385,"y":7.352625,"p":0,"cluster_ids":["0","1_2","2_23"]},{"arg_id":"Acsv-40_0","argument":"私たちは被災者にも支援者にもなり得る。貴重な記録は定期的に読み返したい","x":11.213313,"y":6.699263,"p":0,"cluster_ids":["0","1_3","2_37"]},{"arg_id":"Acsv-41_0","argument":"避難所運営での困難や心がけ、被災経験者の支援、管理のない配布会の問題についての意見がある。","x":10.408405,"y":7.9114404,"p":0,"cluster_ids":["0","1_3","2_8"]},{"arg_id":"Acsv-41_1","argument":"炊き出しの問題を桃鉄の貧乏神に例え、「あなたのためにおいしいご飯を作ってあげたのねん！」という表現が使われている。","x":9.973298,"y":10.118245,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-42_0","argument":"ストックしていた食材や調味料が支援者に使われ、予定が変わった","x":10.436909,"y":10.298134,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-42_1","argument":"「お話し相手」というボランティアが前の家族に聞いた内容を次の家族に話してしまう","x":9.70942,"y":9.3815155,"p":0,"cluster_ids":["0","1_4","2_31"]},{"arg_id":"Acsv-42_2","argument":"逃げないという選択肢は他人も危険に晒す","x":7.588212,"y":10.925354,"p":0,"cluster_ids":["0","1_5","2_7"]},{"arg_id":"Acsv-43_0","argument":"避難所運営で心がけたこと","x":10.948941,"y":8.058939,"p":0,"cluster_ids":["0","1_3","2_29"]},{"arg_id":"Acsv-44_0","argument":"隣で起きた災害のレベルについての情報が重要である","x":10.065474,"y":6.8946514,"p":0,"cluster_ids":["0","1_2","2_23"]},{"arg_id":"Acsv-44_1","argument":"救急隊や避難情報についての認識が必要である","x":10.104427,"y":7.1700425,"p":0,"cluster_ids":["0","1_2","2_23"]},{"arg_id":"Acsv-44_2","argument":"支援になっていない支援については慎重に考えるべき","x":9.117465,"y":9.698252,"p":0,"cluster_ids":["0","1_4","2_41"]},{"arg_id":"Acsv-45_0","argument":"おもしろい","x":5.7983465,"y":6.703603,"p":0,"cluster_ids":["0","1_1","2_21"]},{"arg_id":"Acsv-45_1","argument":"すごい","x":5.7971277,"y":6.620366,"p":0,"cluster_ids":["0","1_1","2_21"]},{"arg_id":"Acsv-46_0","argument":"名刺入れ、ペン、ノート、パソコンなどのビジネスツールは重要である","x":7.9769936,"y":8.868611,"p":0,"cluster_ids":["0","1_5","2_36"]},{"arg_id":"Acsv-47_0","argument":"多くの人に読んでほしい内容である","x":5.0573406,"y":6.1937513,"p":0,"cluster_ids":["0","1_1","2_47"]},{"arg_id":"Acsv-48_0","argument":"「誰かがやってくれる」という考えは、家族や大切な人を危険に晒すことを理解すべき","x":7.64752,"y":10.514307,"p":0,"cluster_ids":["0","1_5","2_32"]},{"arg_id":"Acsv-49_0","argument":"物資は見えるところに置くべき","x":7.1595783,"y":8.872309,"p":0,"cluster_ids":["0","1_5","2_9"]},{"arg_id":"Acsv-49_1","argument":"役員は最初に物資を取らないべき","x":7.503548,"y":8.642306,"p":0,"cluster_ids":["0","1_5","2_36"]},{"arg_id":"Acsv-49_2","argument":"決まったことの説明は全員が揃った時に行うべき","x":6.274205,"y":6.908544,"p":0,"cluster_ids":["0","1_1","2_11"]},{"arg_id":"Acsv-49_3","argument":"持ち物による強弱を作らないべき","x":7.0539985,"y":8.849522,"p":0,"cluster_ids":["0","1_5","2_9"]},{"arg_id":"Acsv-50_0","argument":"地震の影響で再びわき出てきた水が非常に助かった","x":11.599531,"y":6.767171,"p":0,"cluster_ids":["0","1_3","2_37"]},{"arg_id":"Acsv-51_0","argument":"必読。明日の自分に関わる重要な内容である","x":5.312515,"y":5.3921423,"p":0,"cluster_ids":["0","1_1","2_2"]},{"arg_id":"Acsv-52_0","argument":"3月15日過ぎにプレスカブで物資を運んでいた。昨年、空いた荷台に座布団を敷いて乗ってもらったばあさんから手紙が届き、わんちゃんと共に元気であることが伝えられた。無事に過ごしてほしい。","x":11.139161,"y":8.427137,"p":0,"cluster_ids":["0","1_3","2_15"]},{"arg_id":"Acsv-53_0","argument":"被災地では管理者のいる所は整然としていたが、管理者のいない所では混乱が起きると整然とするのに手間と時間がかかる","x":9.303588,"y":7.8869667,"p":0,"cluster_ids":["0","1_2","2_14"]},{"arg_id":"Acsv-54_0","argument":"広く読まれることを望む","x":4.8893,"y":6.113739,"p":0,"cluster_ids":["0","1_1","2_47"]},{"arg_id":"Acsv-55_0","argument":"防災に関する参考情報が必要","x":10.152699,"y":6.571389,"p":0,"cluster_ids":["0","1_2","2_49"]},{"arg_id":"Acsv-56_0","argument":"混乱の中で秩序を保つことは難しい","x":8.98363,"y":7.66164,"p":0,"cluster_ids":["0","1_2","2_43"]},{"arg_id":"Acsv-56_1","argument":"持ち物で強弱を作らないことに気づくのは難しい","x":7.033747,"y":8.829637,"p":0,"cluster_ids":["0","1_5","2_9"]},{"arg_id":"Acsv-57_0","argument":"詳細なまとめを作成し、多くの人と共有できるようにすべき","x":6.073728,"y":6.5098777,"p":0,"cluster_ids":["0","1_1","2_21"]},{"arg_id":"Acsv-58_0","argument":"自治組織の立ち上がりや初期の避難所の様子を思い出し、別の場所での経験を振り返った","x":11.357854,"y":7.857875,"p":0,"cluster_ids":["0","1_3","2_29"]},{"arg_id":"Acsv-59_0","argument":"炊き出し支援者に備蓄食料を使われるのは非常識だ","x":10.09416,"y":10.082339,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-60_0","argument":"すごいまとめだ","x":6.0505543,"y":6.4827075,"p":0,"cluster_ids":["0","1_1","2_21"]},{"arg_id":"Acsv-61_0","argument":"持ち物による強弱を作らないことを心がける","x":7.100478,"y":8.89654,"p":0,"cluster_ids":["0","1_5","2_9"]},{"arg_id":"Acsv-63_0","argument":"炊き出し支援の話が不快である。十分な資源がないのに何を考えているのか","x":9.730882,"y":9.863185,"p":0,"cluster_ids":["0","1_4","2_31"]},{"arg_id":"Acsv-64_0","argument":"貴重なノウハウや体験を共有すべきだが、役に立つ日が来ないことを願っている。しかし、もしその日が来たら役に立たなければならない。","x":7.237462,"y":6.2474527,"p":0,"cluster_ids":["0","1_1","2_13"]},{"arg_id":"Acsv-65_0","argument":"ローカルにデータを保存するべき","x":6.7341065,"y":5.7088165,"p":0,"cluster_ids":["0","1_1","2_27"]},{"arg_id":"Acsv-66_0","argument":"炊き出しボランティアが備蓄を勝手に使ったことに対する感謝の意を表明","x":9.584514,"y":10.248076,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-67_0","argument":"困った炊き出し支援で、勝手に翌日以降分の食糧を使う例がある。善意で行っている人もいるが、やられた方はたまらない。","x":9.996441,"y":10.2351,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-68_0","argument":"支援のあり方について考えさせられるほどリアルである","x":9.05291,"y":9.660197,"p":0,"cluster_ids":["0","1_4","2_41"]},{"arg_id":"Acsv-69_0","argument":"後で考えたい","x":6.1666207,"y":5.9134803,"p":0,"cluster_ids":["0","1_1","2_45"]},{"arg_id":"Acsv-70_0","argument":"人助けを謳ったあくどい団体には注意が必要","x":8.749303,"y":9.579765,"p":0,"cluster_ids":["0","1_4","2_5"]},{"arg_id":"Acsv-71_0","argument":"避難所の体験談、運営の改善点、被災者への支援に関する意見が含まれている。大規模災害に備えるための貴重な情報である。","x":10.884556,"y":7.504368,"p":0,"cluster_ids":["0","1_3","2_8"]},{"arg_id":"Acsv-72_0","argument":"東日本大震災における体育館避難所での出来事についての考察","x":12.049376,"y":7.504267,"p":0,"cluster_ids":["0","1_3","2_33"]},{"arg_id":"Acsv-73_0","argument":"シノドスの人が適切な人に依頼し、しっかりとまとめたことは素晴らしい","x":6.183076,"y":6.376978,"p":0,"cluster_ids":["0","1_1","2_21"]},{"arg_id":"Acsv-74_0","argument":"東日本大震災に関する情報はありがたいと感じる","x":11.84834,"y":6.7279863,"p":0,"cluster_ids":["0","1_3","2_20"]},{"arg_id":"Acsv-75_0","argument":"様々なことに気づける人がいることに驚き","x":7.586241,"y":6.822529,"p":0,"cluster_ids":["0","1_1","2_30"]},{"arg_id":"Acsv-76_0","argument":"自分がこのような状況になったら平常心でいられるか不安である","x":7.5287995,"y":7.834479,"p":0,"cluster_ids":["0","1_5","2_48"]},{"arg_id":"Acsv-77_0","argument":"瀬戸内寂聴の言葉に共感し、戦後の混乱時には奪うことが正しかったと感じるが、現代ではその考え方に疑問を持つ。","x":8.0584,"y":7.313192,"p":0,"cluster_ids":["0","1_1","2_22"]},{"arg_id":"Acsv-78_0","argument":"消防団のように普段から組織作りをしておくことが重要","x":9.603785,"y":7.395102,"p":0,"cluster_ids":["0","1_2","2_40"]},{"arg_id":"Acsv-79_0","argument":"情報共有に感謝する","x":7.7817717,"y":5.40368,"p":0,"cluster_ids":["0","1_1","2_25"]},{"arg_id":"Acsv-80_0","argument":"体験を一次資料として公開することは重要である","x":7.304631,"y":5.9358006,"p":0,"cluster_ids":["0","1_1","2_13"]},{"arg_id":"Acsv-81_0","argument":"気が利いている","x":6.705632,"y":7.6283383,"p":0,"cluster_ids":["0","1_1","2_17"]},{"arg_id":"Acsv-82_0","argument":"ブクマ数から日本中の関心が薄れていないことがわかる","x":8.92895,"y":6.7586803,"p":0,"cluster_ids":["0","1_2","2_10"]},{"arg_id":"Acsv-82_1","argument":"役に立つ情報を求める声がある","x":6.967252,"y":7.7382298,"p":0,"cluster_ids":["0","1_1","2_17"]},{"arg_id":"Acsv-82_2","argument":"支援団体の活動がそのまま活かされる","x":8.906878,"y":9.540276,"p":0,"cluster_ids":["0","1_4","2_5"]},{"arg_id":"Acsv-83_0","argument":"亡くなった方々のご冥福をお祈りし、貴重な教訓を自分のものにするべき","x":7.1804376,"y":5.694222,"p":0,"cluster_ids":["0","1_1","2_13"]},{"arg_id":"Acsv-84_0","argument":"災害についての理解を深めるべき","x":10.744848,"y":6.38094,"p":0,"cluster_ids":["0","1_3","2_19"]},{"arg_id":"Acsv-85_0","argument":"避難所経営の事例についての感謝の意を表明","x":11.021184,"y":8.045876,"p":0,"cluster_ids":["0","1_3","2_29"]},{"arg_id":"Acsv-86_0","argument":"役員には役得があるべきだが、現実的には難しいと思う","x":7.355336,"y":8.027001,"p":0,"cluster_ids":["0","1_5","2_48"]},{"arg_id":"Acsv-86_1","argument":"迷惑な活動をしている人々もノウハウがなかったのではないか","x":7.375403,"y":6.491738,"p":0,"cluster_ids":["0","1_1","2_30"]},{"arg_id":"Acsv-87_0","argument":"炊き出し支援の団体は避難所の食材を全て使うべき","x":10.282861,"y":10.002216,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-87_1","argument":"日本人は管理者がいないと整然と行動できないことがある","x":8.560581,"y":8.002482,"p":0,"cluster_ids":["0","1_5","2_34"]},{"arg_id":"Acsv-87_2","argument":"傾聴ボランティアによる個人情報漏洩の懸念","x":9.986418,"y":7.388954,"p":0,"cluster_ids":["0","1_2","2_40"]},{"arg_id":"Acsv-88_0","argument":"すごいノウハウの塊で、参考にして改善できれば役に立つ。自治会の参考文献として日本中に広めるべき","x":6.519089,"y":6.08334,"p":0,"cluster_ids":["0","1_1","2_4"]},{"arg_id":"Acsv-89_0","argument":"炊き出しの際に相手の予定を壊す行為は迷惑であり、やらない方が良い","x":8.28975,"y":10.635108,"p":0,"cluster_ids":["0","1_5","2_32"]},{"arg_id":"Acsv-89_1","argument":"ボランティア活動が独善的な自慰行為になっている","x":9.420319,"y":10.355183,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-89_2","argument":"『避難しました』札は防災袋にセットして販売すべき","x":10.870381,"y":8.64637,"p":0,"cluster_ids":["0","1_3","2_15"]},{"arg_id":"Acsv-90_0","argument":"逃げない選択肢は他人を危険に晒す","x":7.6603003,"y":10.9230175,"p":0,"cluster_ids":["0","1_5","2_7"]},{"arg_id":"Acsv-91_0","argument":"情報が役に立った","x":6.8290935,"y":7.5454707,"p":0,"cluster_ids":["0","1_1","2_17"]},{"arg_id":"Acsv-92_0","argument":"具体的で率直な記事で、調味料や娯楽の重要性、運営グッズや避難札の使い方が述べられている","x":11.087869,"y":9.600529,"p":0,"cluster_ids":["0","1_4","2_24"]},{"arg_id":"Acsv-92_1","argument":"非常時には見える化と平等が重要であるが、リーダーシップを取り私心なく動ける人材は得難い","x":7.912993,"y":7.8876023,"p":0,"cluster_ids":["0","1_5","2_0"]},{"arg_id":"Acsv-93_0","argument":"南海トラフに備える必要がある","x":10.790889,"y":8.367055,"p":0,"cluster_ids":["0","1_3","2_15"]},{"arg_id":"Acsv-94_0","argument":"貴重かつ重要な記録である","x":7.584842,"y":5.5172644,"p":0,"cluster_ids":["0","1_1","2_25"]},{"arg_id":"Acsv-95_0","argument":"震災発生から避難所運営までの行動と考え方を明確に記録すべき","x":11.266261,"y":7.477228,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-96_0","argument":"神戸在住の3巻を読んでほしい","x":4.659326,"y":5.8753242,"p":0,"cluster_ids":["0","1_1","2_12"]},{"arg_id":"Acsv-96_1","argument":"阪神大震災の当時の話が載っている","x":11.88101,"y":6.7758527,"p":0,"cluster_ids":["0","1_3","2_20"]},{"arg_id":"Acsv-97_0","argument":"記録を残してくれることに感謝している","x":7.5501437,"y":5.2300715,"p":0,"cluster_ids":["0","1_1","2_25"]},{"arg_id":"Acsv-98_0","argument":"よく読むことが重要である","x":4.936282,"y":5.700565,"p":0,"cluster_ids":["0","1_1","2_12"]},{"arg_id":"Acsv-99_0","argument":"参考にしたい","x":6.1991024,"y":5.862618,"p":0,"cluster_ids":["0","1_1","2_45"]},{"arg_id":"Acsv-100_0","argument":"ドラマよりも感情的に訴える内容がある","x":7.422089,"y":7.16878,"p":0,"cluster_ids":["0","1_1","2_30"]},{"arg_id":"Acsv-101_0","argument":"後でじっくりと読みたい","x":4.501452,"y":5.6621075,"p":0,"cluster_ids":["0","1_1","2_12"]},{"arg_id":"Acsv-102_0","argument":"多くの人に読んでもらいたいと思う","x":4.927908,"y":6.2800074,"p":0,"cluster_ids":["0","1_1","2_47"]},{"arg_id":"Acsv-103_0","argument":"知識ではなく、命と引き換えに得た貴重な知恵を大切にしなければならない","x":6.8719587,"y":6.1417556,"p":0,"cluster_ids":["0","1_1","2_4"]},{"arg_id":"Acsv-104_0","argument":"記録に残してくれてありがとう","x":7.524519,"y":5.238148,"p":0,"cluster_ids":["0","1_1","2_25"]},{"arg_id":"Acsv-105_0","argument":"避難所生活での配慮や工夫、困ったことや助かったことについての貴重なレポート","x":11.230967,"y":8.034153,"p":0,"cluster_ids":["0","1_3","2_29"]},{"arg_id":"Acsv-106_0","argument":"運営にあたり、様々な事を考慮していたことが分かる","x":8.754671,"y":8.236472,"p":0,"cluster_ids":["0","1_5","2_34"]},{"arg_id":"Acsv-107_0","argument":"絶対プリントアウトさせるマンの応用力がすごい","x":6.5050426,"y":6.4237924,"p":0,"cluster_ids":["0","1_1","2_11"]},{"arg_id":"Acsv-108_0","argument":"つらいと感じることがある","x":8.017984,"y":7.436422,"p":0,"cluster_ids":["0","1_1","2_22"]},{"arg_id":"Acsv-109_0","argument":"体験談やノウハウはもっと広く知られるべき","x":7.5419583,"y":6.073159,"p":0,"cluster_ids":["0","1_1","2_13"]},{"arg_id":"Acsv-110_0","argument":"岩手の津波被災時の状況とその後の避難所生活についてまとめた記事","x":11.856783,"y":7.8634324,"p":0,"cluster_ids":["0","1_3","2_35"]},{"arg_id":"Acsv-111_0","argument":"災害時の教科書が必要","x":10.579137,"y":6.4257274,"p":0,"cluster_ids":["0","1_2","2_49"]},{"arg_id":"Acsv-112_0","argument":"素晴らしい記事をもっと多くの人に見てもらうために、大手メディアで取り上げてもらいたい","x":5.509472,"y":6.381296,"p":0,"cluster_ids":["0","1_1","2_42"]},{"arg_id":"Acsv-113_0","argument":"感謝の意を表す","x":7.63187,"y":5.1947813,"p":0,"cluster_ids":["0","1_1","2_25"]},{"arg_id":"Acsv-114_0","argument":"ロジスティクスに関連する話である","x":7.2682486,"y":5.9958253,"p":0,"cluster_ids":["0","1_1","2_13"]},{"arg_id":"Acsv-115_0","argument":"厳しい環境での組織運営ノウハウは国家と企業に共通するが、運営方法には違いがあるかもしれない。違いがあっても良い理由は何か？","x":8.869145,"y":8.113619,"p":0,"cluster_ids":["0","1_5","2_34"]},{"arg_id":"Acsv-116_0","argument":"ボランティアには善意が盾になっているため、公認制度が必要である。実績や教育の徹底を踏まえ、一定期間はボランティアを絞った方が良いかもしれない。","x":9.312669,"y":10.304981,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-117_0","argument":"高齢者が「自分は歳だから次は逃げなくても良い」と言うことがあるが、足腰の弱い人や寝たきりの人を助けようとした消防団員や近所の人のことを思い出してほしい","x":7.8237705,"y":10.404161,"p":0,"cluster_ids":["0","1_5","2_32"]},{"arg_id":"Acsv-118_0","argument":"定期的に読まなければならない記事である","x":5.0740633,"y":5.438609,"p":0,"cluster_ids":["0","1_1","2_2"]},{"arg_id":"Acsv-119_0","argument":"調味料は盲点であり、次回があっては困るが、何かあった時に役立つ情報を覚えておきたい","x":11.247489,"y":9.839718,"p":0,"cluster_ids":["0","1_4","2_24"]},{"arg_id":"Acsv-120_0","argument":"いつ来るかわからないので、しっかり読んでおくべき","x":4.459375,"y":5.6054697,"p":0,"cluster_ids":["0","1_1","2_12"]},{"arg_id":"Acsv-121_0","argument":"避難所での組織・ルール作りが優れており、特に事前に用意された『「避難しました」の札』が印象的で、周知されていたことが真似できない点である","x":11.017833,"y":8.334185,"p":0,"cluster_ids":["0","1_3","2_15"]},{"arg_id":"Acsv-122_0","argument":"貴重な経験則を残していただきありがとうございます","x":7.3124404,"y":5.8402653,"p":0,"cluster_ids":["0","1_1","2_13"]},{"arg_id":"Acsv-124_0","argument":"記事は公平、公正、持続性について触れているが、備蓄食糧を使う団体の意図が疑問である。","x":10.297641,"y":9.786757,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-125_0","argument":"震災時の避難所運営について感心した。万が一の参考になる良記事。","x":11.452938,"y":7.557127,"p":0,"cluster_ids":["0","1_3","2_6"]},{"arg_id":"Acsv-126_0","argument":"体験談や資料は非常に価値があり、体験しないとわからないノウハウは特に貴重である","x":7.5822396,"y":6.05219,"p":0,"cluster_ids":["0","1_1","2_13"]},{"arg_id":"Acsv-127_0","argument":"みんなに読んでほしいと思う記事がある","x":5.1448145,"y":6.115653,"p":0,"cluster_ids":["0","1_1","2_47"]},{"arg_id":"Acsv-128_0","argument":"つなぎ目に洗剤を溶かした水を塗り、ガス漏れがないことを確認した","x":9.8098545,"y":8.8576975,"p":0,"cluster_ids":["0","1_4","2_38"]},{"arg_id":"Acsv-130_0","argument":"炊き出し支援で避難所側の食料を使うことに疑問を感じる","x":10.332707,"y":9.892928,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-131_0","argument":"支援を受ける際に「何に困っていますか？何が必要ですか？」という問いが困難である。答えは「全てに困っています。生活に必要な物全てが無いのです。」","x":9.454791,"y":9.494849,"p":0,"cluster_ids":["0","1_4","2_31"]},{"arg_id":"Acsv-132_0","argument":"後世に残すべき知恵は必読である","x":6.6165676,"y":5.841291,"p":0,"cluster_ids":["0","1_1","2_27"]},{"arg_id":"Acsv-133_0","argument":"前半が泣けるほど感情的である","x":7.610373,"y":7.228566,"p":0,"cluster_ids":["0","1_1","2_22"]},{"arg_id":"Acsv-134_0","argument":"これは全世代にとって有益な記事である","x":5.858357,"y":6.388397,"p":0,"cluster_ids":["0","1_1","2_21"]},{"arg_id":"Acsv-135_0","argument":"避難所運営での良かった点と悪かった点についての意見がある。特に、2ページ目の「何に困っていますか？何が必要ですか？」という問いが最も困難である。回答は「全てに困っています。生活に必要な物が全て不足しています」となる。","x":10.541754,"y":8.166673,"p":0,"cluster_ids":["0","1_3","2_8"]},{"arg_id":"Acsv-136_0","argument":"実際に体験しないと分からないことが多いので、こうして情報を残してくれると有り難い","x":7.240664,"y":6.4180584,"p":0,"cluster_ids":["0","1_1","2_13"]},{"arg_id":"Acsv-137_0","argument":"トンデモボランティアを作り出さないために、ボランティアガイドラインが必要","x":9.29283,"y":10.282287,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-138_0","argument":"炊き出しボランティアは自分で原材料を用意するべきだと思っていた","x":9.853637,"y":10.38317,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-138_1","argument":"避難所の食料を使い尽くすのは問題である","x":10.7372055,"y":9.296678,"p":0,"cluster_ids":["0","1_3","2_15"]},{"arg_id":"Acsv-139_0","argument":"貴重な文章を広めて共有すべき","x":5.860217,"y":6.280913,"p":0,"cluster_ids":["0","1_1","2_21"]},{"arg_id":"Acsv-140_0","argument":"持ち物による強弱を作らないことは良い考えであり、役得を無くすことを徹底したからだと思う","x":7.1618385,"y":8.792008,"p":0,"cluster_ids":["0","1_5","2_9"]},{"arg_id":"Acsv-141_0","argument":"マネジメントに関する有用な知見が凝縮されている","x":6.818827,"y":6.445535,"p":0,"cluster_ids":["0","1_1","2_4"]},{"arg_id":"Acsv-142_0","argument":"個人の取り組みが驚くべき成果を上げている。避難札や子供部屋の工夫、良かったことと悪かったことを赤裸々に共有することで、次に役立つ情報が得られる。","x":11.231518,"y":7.8547683,"p":0,"cluster_ids":["0","1_3","2_29"]},{"arg_id":"Acsv-143_0","argument":"人と強弱を作らないことや役員を最初に取らないことは、組織づくりにおいて重要である","x":7.638554,"y":8.473436,"p":0,"cluster_ids":["0","1_5","2_36"]},{"arg_id":"Acsv-143_1","argument":"この考えが生まれたのは、防災士であったことが影響しているのかもしれない","x":10.296485,"y":6.225256,"p":0,"cluster_ids":["0","1_2","2_49"]},{"arg_id":"Acsv-144_0","argument":"津波が来ることを直感で感じるのは日本人特有かもしれない","x":8.707179,"y":6.920497,"p":0,"cluster_ids":["0","1_2","2_10"]},{"arg_id":"Acsv-145_0","argument":"名刺入れやノート、筆記具、マジックペン、模造紙、パソコンなどの運営キットを備蓄物資に加えるべき","x":8.292441,"y":8.979744,"p":0,"cluster_ids":["0","1_5","2_26"]},{"arg_id":"Acsv-145_1","argument":"運営キットを尼やアスクルと組んで寄付できるようにするべき","x":8.754082,"y":8.814432,"p":0,"cluster_ids":["0","1_5","2_26"]},{"arg_id":"Acsv-146_0","argument":"難民キャンプの運営についての議論が必要","x":10.418976,"y":7.9443603,"p":0,"cluster_ids":["0","1_3","2_8"]},{"arg_id":"Acsv-148_0","argument":"激痛に苦しむ高齢者は、自分が助からないという思考に陥ることがある","x":7.974783,"y":9.963192,"p":0,"cluster_ids":["0","1_5","2_44"]},{"arg_id":"Acsv-148_1","argument":"痛みを抱える人には、避難の意思表示として玄関に「避難しました」の札を掲示することが提案される","x":10.97754,"y":8.717011,"p":0,"cluster_ids":["0","1_3","2_15"]},{"arg_id":"Acsv-149_0","argument":"全国の自治体の危機管理室に配布するのに適したレベルである","x":9.437592,"y":7.843911,"p":0,"cluster_ids":["0","1_2","2_14"]},{"arg_id":"Acsv-150_0","argument":"後でしっかり読むべき","x":4.7083983,"y":5.738918,"p":0,"cluster_ids":["0","1_1","2_12"]},{"arg_id":"Acsv-151_0","argument":"正常性バイアスについての認識が必要であり、関東での震災に備えて議論や思考を深めるべき","x":10.967542,"y":6.336199,"p":0,"cluster_ids":["0","1_3","2_19"]},{"arg_id":"Acsv-152_0","argument":"これはためになる","x":6.1814747,"y":6.5460377,"p":0,"cluster_ids":["0","1_1","2_21"]},{"arg_id":"Acsv-153_0","argument":"困った支援のくだりは重要であり、思い込みや勝手な判断は良くない","x":9.257224,"y":9.705827,"p":0,"cluster_ids":["0","1_4","2_41"]},{"arg_id":"Acsv-154_0","argument":"辛いという感情や体験についての議論が必要","x":7.8830366,"y":6.9298663,"p":0,"cluster_ids":["0","1_1","2_30"]},{"arg_id":"Acsv-155_0","argument":"必読であり、何度も読み返したい内容である","x":4.9656024,"y":5.2788167,"p":0,"cluster_ids":["0","1_1","2_28"]},{"arg_id":"Acsv-156_0","argument":"被災者の冷静な体験談を聞くことが最も効果的な防災策である","x":11.35562,"y":6.797685,"p":0,"cluster_ids":["0","1_3","2_37"]},{"arg_id":"Acsv-157_0","argument":"自発的という言葉は平和的な意味を持つ","x":7.7371387,"y":7.5021877,"p":0,"cluster_ids":["0","1_1","2_22"]},{"arg_id":"Acsv-158_0","argument":"文章からはわかりにくいが、背後には多くのストレスがあったと推測される","x":9.915623,"y":8.768717,"p":0,"cluster_ids":["0","1_4","2_38"]},{"arg_id":"Acsv-159_0","argument":"翌日用に仕込んでおいた芋や葉物が全てなくなり、翌々日用の缶詰もなくなった。ストックを全て使われてしまったことに驚きと不満を感じている。","x":10.738906,"y":10.328564,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-160_0","argument":"東日本大震災の体育館避難所での出来事についての考察","x":12.063839,"y":7.4628882,"p":0,"cluster_ids":["0","1_3","2_33"]},{"arg_id":"Acsv-161_0","argument":"みんなが読むべきである","x":4.8266525,"y":6.056613,"p":0,"cluster_ids":["0","1_1","2_12"]},{"arg_id":"Acsv-162_0","argument":"ときどき読み返したい","x":4.665206,"y":5.456656,"p":0,"cluster_ids":["0","1_1","2_28"]},{"arg_id":"Acsv-163_0","argument":"サバイバルな状況は予想の範囲内だが、人の行動は予測しきれない","x":8.011131,"y":8.238086,"p":0,"cluster_ids":["0","1_5","2_0"]},{"arg_id":"Acsv-164_0","argument":"防災関連のブログポストを書きたい","x":10.545837,"y":6.6876454,"p":0,"cluster_ids":["0","1_2","2_1"]},{"arg_id":"Acsv-165_0","argument":"独りよがりな善意は始末に負えないため、ボランティアをする人もそうでない人も読むべき","x":9.296886,"y":10.243888,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-166_0","argument":"都内では津波より火炎旋風の方が危険である","x":9.7173395,"y":6.7182374,"p":0,"cluster_ids":["0","1_2","2_46"]},{"arg_id":"Acsv-166_1","argument":"地域に数万人いるのに町内会がないため、防災対策に不安を感じる","x":9.444195,"y":6.823987,"p":0,"cluster_ids":["0","1_2","2_46"]},{"arg_id":"Acsv-167_0","argument":"体験談をまとめてアニュアル化し、後世に役立てるべき","x":7.283721,"y":6.097147,"p":0,"cluster_ids":["0","1_1","2_13"]},{"arg_id":"Acsv-168_0","argument":"カップ麺は大量のお湯を沸かすのが大変で、調味料は大事","x":11.006641,"y":10.092365,"p":0,"cluster_ids":["0","1_4","2_24"]},{"arg_id":"Acsv-168_1","argument":"観天望気の知識を身につけ、家具を固定し、常に災害警報の情報に気を配ることが重要","x":10.142232,"y":6.714157,"p":0,"cluster_ids":["0","1_2","2_49"]},{"arg_id":"Acsv-169_0","argument":"調味料は特に洋風のものが大事で、コンソメ、ブイヨン、ソース、ケチャップ、マヨネーズがあるとご飯が進む","x":11.094502,"y":9.970973,"p":0,"cluster_ids":["0","1_4","2_24"]},{"arg_id":"Acsv-170_0","argument":"淡々とした表現が逆に感情を引き起こす。すべての人に行き渡る手立てが必要だ。","x":7.6872377,"y":7.2783723,"p":0,"cluster_ids":["0","1_1","2_22"]},{"arg_id":"Acsv-171_0","argument":"実践的なノウハウが蓄積されている良記事であり、将来的に必要になる可能性があるため、読んでおくべき","x":6.686451,"y":6.132604,"p":0,"cluster_ids":["0","1_1","2_4"]},{"arg_id":"Acsv-172_0","argument":"良いエントリはもっと共有されるべき","x":5.890685,"y":6.388283,"p":0,"cluster_ids":["0","1_1","2_21"]},{"arg_id":"Acsv-173_0","argument":"防災士は町内会に一人は欲しい人材である","x":9.892695,"y":6.547218,"p":0,"cluster_ids":["0","1_2","2_49"]},{"arg_id":"Acsv-174_0","argument":"一度は読んでおくべき特別な文章である","x":5.0608706,"y":5.4984283,"p":0,"cluster_ids":["0","1_1","2_2"]},{"arg_id":"Acsv-175_0","argument":"新聞に掲載して多くの人に読んでもらうことで、幸せを感じる人が増えるのではないか。意識付けのためにも重要である。","x":5.185322,"y":6.291319,"p":0,"cluster_ids":["0","1_1","2_47"]},{"arg_id":"Acsv-176_0","argument":"非常事態でも平常時に大切とされるものは重要である","x":7.518219,"y":7.6006737,"p":0,"cluster_ids":["0","1_5","2_48"]},{"arg_id":"Acsv-176_1","argument":"平常時にポテンシャルを発揮できない人間は非常時でも役に立たない","x":7.496588,"y":7.9340763,"p":0,"cluster_ids":["0","1_5","2_48"]},{"arg_id":"Acsv-176_2","argument":"善意は無能の免罪符にはならない","x":9.056943,"y":10.059052,"p":0,"cluster_ids":["0","1_4","2_41"]},{"arg_id":"Acsv-177_0","argument":"支援する側にもマニュアルが必要である","x":8.849927,"y":9.741049,"p":0,"cluster_ids":["0","1_4","2_5"]},{"arg_id":"Acsv-177_1","argument":"手ぶらで支援に来ることや、大事な備蓄で炊き出しをすることは論外である","x":9.364928,"y":9.811647,"p":0,"cluster_ids":["0","1_4","2_41"]},{"arg_id":"Acsv-178_0","argument":"東京が被災した場合、煩い子供を隔離するべきとの意見が出るだろう","x":11.954169,"y":7.3374004,"p":0,"cluster_ids":["0","1_3","2_33"]},{"arg_id":"Acsv-179_0","argument":"ぜひ読むべき","x":4.7420816,"y":5.877523,"p":0,"cluster_ids":["0","1_1","2_12"]},{"arg_id":"Acsv-180_0","argument":"翌日用に仕込んでおいた芋や葉物が全てなくなり、翌々日用の缶詰もなくなった。ストックが全て使われてしまった。","x":10.680271,"y":10.360512,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-180_1","argument":"スタッフの一人が「二度と来ないでください」と叫んでいた。","x":7.686789,"y":10.389977,"p":0,"cluster_ids":["0","1_5","2_32"]},{"arg_id":"Acsv-181_0","argument":"逃げない選択肢が他人を危険に晒すことがあるが、これは助ける側の都合ではないか。逃げたくない人がいることを助ける側は理解する必要がある。","x":7.5152197,"y":10.747212,"p":0,"cluster_ids":["0","1_5","2_7"]},{"arg_id":"Acsv-182_0","argument":"小学校の「生活科」に適した案件に見える","x":7.1453876,"y":5.233112,"p":0,"cluster_ids":["0","1_1","2_39"]},{"arg_id":"Acsv-183_0","argument":"陸前高田市の消防団員の寄稿文は貴重な記録であるが、手記と災害マニュアルが混在しているのが気になる。別立てにすることで活用範囲が広がるのではないか。","x":10.864294,"y":6.9474645,"p":0,"cluster_ids":["0","1_2","2_1"]},{"arg_id":"Acsv-184_0","argument":"震災に備えて支援する側に立つために、短期間での成果を読んでよかった","x":11.436494,"y":6.8149242,"p":0,"cluster_ids":["0","1_3","2_37"]},{"arg_id":"Acsv-185_0","argument":"避難したことを示す札は重要であり、誰かを巻き込まないために覚えておくべき","x":10.912787,"y":8.661428,"p":0,"cluster_ids":["0","1_3","2_15"]},{"arg_id":"Acsv-186_0","argument":"避難所の運営や利用に関するノウハウが必要","x":10.520578,"y":7.734628,"p":0,"cluster_ids":["0","1_3","2_8"]},{"arg_id":"Acsv-187_0","argument":"日本に住むすべての人が一度は読んでおくべき内容がある。いつかの時に備えよう。","x":4.816374,"y":5.531068,"p":0,"cluster_ids":["0","1_1","2_28"]},{"arg_id":"Acsv-188_0","argument":"町内会は機能していないと感じる","x":9.3620405,"y":6.9989233,"p":0,"cluster_ids":["0","1_2","2_46"]},{"arg_id":"Acsv-188_1","argument":"各作業の取り纏めと指示をする中心人物を集めて運営役員を決めた","x":8.438998,"y":8.256422,"p":0,"cluster_ids":["0","1_5","2_34"]},{"arg_id":"Acsv-189_0","argument":"阪神大震災を経験した人たちの的確な意見が素晴らしい","x":11.812174,"y":6.715416,"p":0,"cluster_ids":["0","1_3","2_20"]},{"arg_id":"Acsv-190_0","argument":"風化しないためにブックマークするべき","x":4.7580223,"y":5.080295,"p":0,"cluster_ids":["0","1_1","2_28"]},{"arg_id":"Acsv-191_0","argument":"事前の備えが十分ではなかったが、創造性を働かせてやりくりしたことは評価できる","x":7.4662714,"y":9.012773,"p":0,"cluster_ids":["0","1_5","2_36"]},{"arg_id":"Acsv-192_0","argument":"途中がきつくて一気に読めなかった","x":4.4488935,"y":5.507301,"p":0,"cluster_ids":["0","1_1","2_28"]},{"arg_id":"Acsv-193_0","argument":"集団の秩序の形成にはたいへんな努力があったと思う","x":9.134685,"y":7.464707,"p":0,"cluster_ids":["0","1_2","2_43"]},{"arg_id":"Acsv-194_0","argument":"地震発生から避難所生活までの当事者の語る言葉の臨場感と内容のリアルさは素晴らしい","x":11.498722,"y":7.39206,"p":0,"cluster_ids":["0","1_3","2_18"]},{"arg_id":"Acsv-195_0","argument":"足腰の弱い人や寝たきりの人を助けようとした消防団員や近所の人の命の危険を考慮すべき","x":7.952295,"y":10.390667,"p":0,"cluster_ids":["0","1_5","2_32"]},{"arg_id":"Acsv-195_1","argument":"逃げない選択肢が他人を危険に晒す可能性を理解すべき","x":7.6197686,"y":10.805611,"p":0,"cluster_ids":["0","1_5","2_7"]},{"arg_id":"Acsv-196_0","argument":"長期保存を意識したカップ麺は多く届けられたが、200人分のお湯を沸かすのは容易ではない","x":10.76203,"y":10.313603,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-196_1","argument":"支援物資の偏りは難しく、情報が少ないとさらに問題が生じる","x":9.170244,"y":9.531975,"p":0,"cluster_ids":["0","1_4","2_41"]},{"arg_id":"Acsv-197_0","argument":"海の上でも揺れることに驚き。ケータイが無かった時代はどうだったのか気になる。","x":8.425979,"y":6.9007173,"p":0,"cluster_ids":["0","1_2","2_10"]},{"arg_id":"Acsv-197_1","argument":"防災士という資格を初めて知った。NPOが運営している資格なのか。","x":10.069608,"y":6.4177227,"p":0,"cluster_ids":["0","1_2","2_49"]},{"arg_id":"Acsv-198_0","argument":"タイトルに違和感がある。継続的に読み継がれるべき内容であるため、「避難所運営のノウハウ」が読み取れる方が良いのではないか。整理されていて示唆に富む良いテキストである。","x":10.480432,"y":8.122103,"p":0,"cluster_ids":["0","1_3","2_8"]},{"arg_id":"Acsv-199_0","argument":"必読","x":5.200256,"y":5.4100847,"p":0,"cluster_ids":["0","1_1","2_2"]},{"arg_id":"Acsv-200_0","argument":"場所とコミュニティの違いや季節の違いを考慮することは重要であり、貴重な知見である","x":8.209776,"y":6.4109797,"p":0,"cluster_ids":["0","1_2","2_10"]},{"arg_id":"Acsv-201_0","argument":"避難生活の大変さやボランティア活動の注意点についての有用な情報がある","x":10.663453,"y":7.624443,"p":0,"cluster_ids":["0","1_3","2_8"]},{"arg_id":"Acsv-201_1","argument":"災害時の支援を指揮する機関の設立は利権団体化の懸念があり難しい","x":10.10386,"y":7.1980996,"p":0,"cluster_ids":["0","1_2","2_23"]},{"arg_id":"Acsv-203_0","argument":"保管してある食材を勝手に使う炊出し団体について驚きがある","x":10.221167,"y":10.225938,"p":0,"cluster_ids":["0","1_4","2_3"]},{"arg_id":"Acsv-204_0","argument":"避難所運営において良いエントリが必要","x":10.786603,"y":7.9990907,"p":0,"cluster_ids":["0","1_3","2_8"]},{"arg_id":"Acsv-205_0","argument":"この場では、クズとよくできた人、惜しい人の差がはっきり見える","x":7.858035,"y":7.8909197,"p":0,"cluster_ids":["0","1_5","2_0"]},{"arg_id":"Acsv-205_1","argument":"自分がうまくできる自信がない","x":7.617637,"y":8.179352,"p":0,"cluster_ids":["0","1_5","2_48"]},{"arg_id":"Acsv-207_0","argument":"震災時には醤油・味噌・塩などの調味料を送るべき","x":11.264851,"y":9.81484,"p":0,"cluster_ids":["0","1_4","2_24"]},{"arg_id":"Acsv-208_0","argument":"支援する際にも支援される際にも参考になる","x":8.948545,"y":9.659258,"p":0,"cluster_ids":["0","1_4","2_5"]},{"arg_id":"Acsv-209_0","argument":"経験は何物にも勝る知恵である","x":6.939131,"y":6.2101984,"p":0,"cluster_ids":["0","1_1","2_4"]},{"arg_id":"Acsv-209_1","argument":"阪神淡路大震災や中越地震の経験者からの贅沢な支援に感謝","x":11.738497,"y":6.6713305,"p":0,"cluster_ids":["0","1_3","2_20"]},{"arg_id":"Acsv-210_0","argument":"地震が起きた時は逃げる選択肢を捨てないでほしい","x":7.572932,"y":11.026998,"p":0,"cluster_ids":["0","1_5","2_7"]},{"arg_id":"Acsv-211_0","argument":"「役得」と思われると、誰も耳を貸してくれなくなる","x":7.201102,"y":8.070062,"p":0,"cluster_ids":["0","1_5","2_48"]},{"arg_id":"Acsv-212_0","argument":"HQを運営するためには名刺入れやノート、筆記具、マジックペン、模造紙、パソコンなどの資材が必要","x":8.412078,"y":8.852348,"p":0,"cluster_ids":["0","1_5","2_26"]},{"arg_id":"Acsv-213_0","argument":"良い記事は細かく深い内容を持つべき","x":5.526231,"y":6.099776,"p":0,"cluster_ids":["0","1_1","2_42"]},{"arg_id":"Acsv-214_0","argument":"色々な方の見解や経験を広く知っておくことは重要である","x":7.823397,"y":6.3840175,"p":0,"cluster_ids":["0","1_1","2_30"]},{"arg_id":"Acsv-215_0","argument":"これは読んでおいた方がいい。次にどこかで発生した時に必ず役に立つ。","x":4.6277137,"y":5.904324,"p":0,"cluster_ids":["0","1_1","2_12"]},{"arg_id":"Acsv-216_0","argument":"善意の押し付けにならないために、情報共有の在り方は被災時に限らずどんな組織にも重要である","x":10.000371,"y":6.9765496,"p":0,"cluster_ids":["0","1_2","2_23"]},{"arg_id":"Acsv-217_0","argument":"リアルで後世に役立つ貴重なナレッジを提供すべき","x":6.9256005,"y":5.8501186,"p":0,"cluster_ids":["0","1_1","2_4"]},{"arg_id":"Acsv-219_0","argument":"災害によって社会基盤が破壊されると、サバイバビリティが重要になる。最終的には自主防災が必要で、原始の共同体が求められる。","x":10.44899,"y":6.7231855,"p":0,"cluster_ids":["0","1_2","2_1"]},{"arg_id":"Acsv-220_0","argument":"高血圧の人のための降圧剤と女性のための生理用品は必要である","x":8.1654825,"y":9.538896,"p":0,"cluster_ids":["0","1_5","2_44"]},{"arg_id":"Acsv-220_1","argument":"糖尿病の人がいる場合、移送が必要になるかもしれない","x":8.109734,"y":9.73512,"p":0,"cluster_ids":["0","1_5","2_44"]},{"arg_id":"Acsv-220_2","argument":"まずは病人のチェックを行うべき","x":7.9567204,"y":9.684716,"p":0,"cluster_ids":["0","1_5","2_44"]},{"arg_id":"Acsv-221_0","argument":"本当に忘れてはいけないことがある。何度も読んで心に刻んでおきたい","x":4.724258,"y":5.1543455,"p":0,"cluster_ids":["0","1_1","2_28"]},{"arg_id":"Acsv-222_0","argument":"地域には経験を共有しリーダーシップを取れる人が数人必要","x":8.718309,"y":6.739497,"p":0,"cluster_ids":["0","1_2","2_10"]},{"arg_id":"Acsv-222_1","argument":"防災士の国家資格化が必要","x":10.07241,"y":6.4188385,"p":0,"cluster_ids":["0","1_2","2_49"]},{"arg_id":"Acsv-222_2","argument":"募金は信頼できる団体に行い、迅速に行動を起こせるようにしたい","x":8.747551,"y":9.401614,"p":0,"cluster_ids":["0","1_4","2_5"]},{"arg_id":"Acsv-224_0","argument":"町会や学校での防災訓練は一時的なものであり、災害時のマネジメント担当を考えるべき","x":10.303413,"y":6.871451,"p":0,"cluster_ids":["0","1_2","2_1"]},{"arg_id":"Acsv-224_1","argument":"国や自治体の信頼性について疑問を持つべき","x":9.262647,"y":7.911026,"p":0,"cluster_ids":["0","1_2","2_14"]},{"arg_id":"Acsv-225_0","argument":"勉強になった","x":6.7433376,"y":8.39965,"p":0,"cluster_ids":["0","1_5","2_9"]},{"arg_id":"Acsv-226_0","argument":"短期間での組織化は素晴らしい成果であり、貴重な記録である","x":7.804292,"y":5.534334,"p":0,"cluster_ids":["0","1_1","2_25"]},{"arg_id":"Acsv-226_1","argument":"消防団はしょーもない操法を行っている場合ではない","x":9.798955,"y":7.6347094,"p":0,"cluster_ids":["0","1_2","2_40"]},{"arg_id":"Acsv-227_0","argument":"高齢の女性の一人暮らしの家に行った際、玄関に「避難しました」の札が下げており、その札が助けになった","x":10.819233,"y":8.786512,"p":0,"cluster_ids":["0","1_3","2_15"]},{"arg_id":"Acsv-228_0","argument":"持ち物による強弱を作らないという発想は良いアイディア","x":6.9600396,"y":8.717629,"p":0,"cluster_ids":["0","1_5","2_9"]},{"arg_id":"Acsv-229_0","argument":"前震災経験者の意見は非常に尊い","x":11.550134,"y":6.6323,"p":0,"cluster_ids":["0","1_3","2_37"]},{"arg_id":"Acsv-230_0","argument":"災害時の「その後」の知見が詰まったすばらしいエントリーで、ぜひ読むべき","x":11.218126,"y":6.556032,"p":0,"cluster_ids":["0","1_3","2_19"]},{"arg_id":"Acsv-231_0","argument":"人は目の前の不公平さに腹が立つ生き物であり、平等を心掛けることが重要","x":7.8467445,"y":7.965712,"p":0,"cluster_ids":["0","1_5","2_0"]},{"arg_id":"Acsv-232_0","argument":"とっさの場面で安定した組織作りができる人がコミュニティにいることが重要","x":9.048676,"y":7.2614646,"p":0,"cluster_ids":["0","1_2","2_43"]},{"arg_id":"Acsv-233_0","argument":"米崎小学校の体育館で二ヶ月間避難所生活をし、避難所運営を経験したことは具体的で素晴らしい。必読である。","x":11.898905,"y":7.7670364,"p":0,"cluster_ids":["0","1_3","2_35"]},{"arg_id":"Acsv-233_1","argument":"持ち物による強弱を作らないよう心掛けたことはよく実行できた。","x":6.9653335,"y":8.736817,"p":0,"cluster_ids":["0","1_5","2_9"]},{"arg_id":"Acsv-234_0","argument":"いつかの参考に","x":6.125307,"y":5.7806306,"p":0,"cluster_ids":["0","1_1","2_45"]},{"arg_id":"Acsv-235_0","argument":"調味料に関する話題が非常に興味深い","x":11.155416,"y":9.908275,"p":0,"cluster_ids":["0","1_4","2_24"]},{"arg_id":"Acsv-236_0","argument":"「避難しました」の札をみんなで作るべき","x":10.912146,"y":8.760879,"p":0,"cluster_ids":["0","1_3","2_15"]},{"arg_id":"Acsv-238_0","argument":"必読。","x":5.2225046,"y":5.3942156,"p":0,"cluster_ids":["0","1_1","2_2"]},{"arg_id":"Acsv-239_0","argument":"地震国に住んでいる以上、被災地以外の人々は体験談から学ぶべきである","x":11.180497,"y":6.4170876,"p":0,"cluster_ids":["0","1_3","2_19"]},{"arg_id":"Acsv-239_1","argument":"被災地での支援は自己満足ではなく、知識を持って＋αの支援が必要である","x":10.9422865,"y":6.72427,"p":0,"cluster_ids":["0","1_3","2_19"]},{"arg_id":"Acsv-240_0","argument":"陸前高田の避難所生活の経験と教訓について考えるべき","x":11.617195,"y":7.994847,"p":0,"cluster_ids":["0","1_3","2_35"]},{"arg_id":"Acsv-242_0","argument":"道徳よりも実例を多く見聞することが教育に向いている","x":7.082345,"y":5.4092155,"p":0,"cluster_ids":["0","1_1","2_39"]},{"arg_id":"Acsv-243_0","argument":"災害時は命を守ることが重要であり、資産や思い出の写真の電子化やクラウド化が役立つかもしれない","x":10.50444,"y":6.2846503,"p":0,"cluster_ids":["0","1_2","2_49"]},{"arg_id":"Acsv-244_0","argument":"この情報は素晴らしいので、もっと拡散して共有してほしい","x":5.817219,"y":6.3462977,"p":0,"cluster_ids":["0","1_1","2_21"]},{"arg_id":"Acsv-245_0","argument":"これは、今と地続きのことであり、終わってしまったことではない","x":6.229432,"y":6.7924385,"p":0,"cluster_ids":["0","1_1","2_11"]},{"arg_id":"Acsv-246_0","argument":"希少事例の経験は本当に貴重である","x":7.4266233,"y":5.8264923,"p":0,"cluster_ids":["0","1_1","2_13"]},{"arg_id":"Acsv-247_0","argument":"生死を分けるのは一瞬の判断であることを実感した","x":6.4524527,"y":7.0508485,"p":0,"cluster_ids":["0","1_1","2_11"]},{"arg_id":"Acsv-248_0","argument":"こういう事を小学校で広く教えてほしい","x":6.758737,"y":5.2875447,"p":0,"cluster_ids":["0","1_1","2_39"]},{"arg_id":"Acsv-249_0","argument":"地域の顔見知りが多い場所でもノウハウが必要だが、都心の隣人を知らない地域はさらに問題が深刻になる可能性がある","x":8.703495,"y":6.55024,"p":0,"cluster_ids":["0","1_2","2_10"]},{"arg_id":"Acsv-250_0","argument":"人間系のトラブル対策は、最初のムラが作られる時のようだ","x":7.684044,"y":8.730481,"p":0,"cluster_ids":["0","1_5","2_36"]},{"arg_id":"Acsv-251_0","argument":"小中学校の空調整備は、災害発生時の避難先としての有用性を向上させるべき","x":10.643758,"y":7.0656257,"p":0,"cluster_ids":["0","1_2","2_1"]},{"arg_id":"Acsv-252_0","argument":"困った炊き出し支援から感じる辛さ","x":9.606961,"y":9.602137,"p":0,"cluster_ids":["0","1_4","2_31"]},{"arg_id":"Acsv-253_0","argument":"葉物野菜が不足していたことに同意する","x":10.85103,"y":10.104973,"p":0,"cluster_ids":["0","1_4","2_24"]},{"arg_id":"Acsv-253_1","argument":"避難所で電気がなく、冷たいサトウのご飯を食べていたという体験を共有","x":11.792591,"y":8.245412,"p":0,"cluster_ids":["0","1_3","2_35"]},{"arg_id":"Acsv-254_0","argument":"体験者の言葉は重要であり、災害後の運営に関するアドバイスが印象に残っている","x":11.315645,"y":6.7159266,"p":0,"cluster_ids":["0","1_3","2_37"]},{"arg_id":"Acsv-255_1","argument":"逃げない選択肢が他人を危険に晒すことを理解してほしい","x":7.586163,"y":10.832537,"p":0,"cluster_ids":["0","1_5","2_7"]},{"arg_id":"Acsv-256_0","argument":"災害時には自己解決力が求められる。自衛隊や救助隊に頼るだけでは進展しないため、防災の準備が重要である。","x":10.441364,"y":6.786114,"p":0,"cluster_ids":["0","1_2","2_1"]},{"arg_id":"Acsv-257_0","argument":"万が一の時に備えて読み返したい名記事を読んでおくべき","x":4.9021416,"y":5.5282187,"p":0,"cluster_ids":["0","1_1","2_28"]},{"arg_id":"Acsv-258_0","argument":"減災は行政・地域・個人のすべての単位で取り組むべきであり、他人任せでは家族や大切な人を危険に晒すことになる","x":10.36558,"y":6.393426,"p":0,"cluster_ids":["0","1_2","2_49"]},{"arg_id":"Acsv-259_0","argument":"消防団の実践的知識が多くの人を救っていることに感謝すべき","x":9.781207,"y":7.6281433,"p":0,"cluster_ids":["0","1_2","2_40"]},{"arg_id":"Acsv-260_0","argument":"炊き出しボランティアの話や善意が支援すべき人を追い込むという貴重な証言を通じて、重要な視点を再考するべき","x":9.455337,"y":10.1874895,"p":0,"cluster_ids":["0","1_4","2_16"]},{"arg_id":"Acsv-261_0","argument":"ぐっと読ませる文章を書くことが重要である","x":5.0186424,"y":5.760102,"p":0,"cluster_ids":["0","1_1","2_12"]},{"arg_id":"Acsv-262_0","argument":"炊き出し支援にはありがたい支援と困った支援がある","x":9.602489,"y":9.785271,"p":0,"cluster_ids":["0","1_4","2_31"]},{"arg_id":"Acsv-262_1","argument":"物だけが届いて管理する人がいない配布会は問題である","x":9.332035,"y":8.266965,"p":0,"cluster_ids":["0","1_2","2_14"]},{"arg_id":"Acsv-262_2","argument":"情報が守られなかった支援も存在する","x":8.975783,"y":9.580544,"p":0,"cluster_ids":["0","1_4","2_5"]},{"arg_id":"Acsv-262_3","argument":"減災に取り組むのは誰なのかを考える必要がある","x":10.391532,"y":6.3079686,"p":0,"cluster_ids":["0","1_2","2_49"]},{"arg_id":"Acsv-263_0","argument":"読む価値があった","x":4.8267603,"y":5.803282,"p":0,"cluster_ids":["0","1_1","2_12"]},{"arg_id":"Acsv-264_0","argument":"東日本大震災の体育館避難所での出来事についての感想","x":12.065612,"y":7.392351,"p":0,"cluster_ids":["0","1_3","2_33"]}],"clusters":[{"level":0,"id":"0","label":"全体","takeaway":"","value":309,"parent":"","density_rank_percentile":0},{"level":1,"id":"1_1","label":"情報の価値と共有の重要性","takeaway":"このクラスタは、情報の重要性、知識の保存、そしてそれを他者と共有することの意義に関する意見を集約しています。参加者は、貴重な体験や教訓を再確認し、次世代に伝えることの重要性を強調しています。また、情報の質やその拡散が社会に与える影響についても考察されており、読書や記録の重要性が強調されています。全体として、情報を通じて人々の理解を深め、未来に備える姿勢が求められています。","value":104,"parent":"0","density_rank_percentile":1},{"level":1,"id":"1_2","label":"地域防災力の強化とコミュニティの役割","takeaway":"このクラスタは、地域における防災教育や自主防災力の強化、そしてコミュニティの重要性に関する意見を集約しています。災害時の自己解決力や情報共有の必要性、町内会や消防団の役割、さらには地域リーダーシップの重要性が強調されており、地域社会が一体となって防災に取り組むことの重要性が示されています。また、災害時の混乱を乗り越えるための組織的なリーダーシップや、実践的な防災対策の必要性も反映されています。","value":44,"parent":"0","density_rank_percentile":0.2},{"level":1,"id":"1_3","label":"震災から学ぶ避難所運営と防災意識の向上","takeaway":"このクラスタは、東日本大震災における避難所生活や運営に関する具体的な経験、教訓、そして防災意識の重要性を集約しています。参加者は、避難所での生活の実態や支援の重要性、地域の協力のあり方を振り返り、過去の震災から得た知見を未来の災害対策に活かす必要性を強調しています。また、避難時の意思表示や支援活動における知識の重要性についても意見が交わされ、より効果的な防災策の構築を目指す姿勢が見受けられます。","value":62,"parent":"0","density_rank_percentile":0.6},{"level":1,"id":"1_4","label":"炊き出し支援の質と持続可能な運営","takeaway":"このクラスタは、炊き出し支援における食材管理や支援の質、ボランティア活動の責任についての意見を集約しています。支援者と受け手の間でのコミュニケーション不足や、善意が時に逆効果をもたらす可能性が指摘されており、持続可能な支援の在り方や、調味料の重要性、支援活動の信頼性と透明性の必要性が強調されています。支援の質を向上させるためには、適切なマニュアルや教育が求められ、支援者自身の行動を見直すことが重要であるとの意見が反映されています。","value":51,"parent":"0","density_rank_percentile":0.4},{"level":1,"id":"1_5","label":"非常時における平等とリーダーシップの重要性","takeaway":"このクラスタは、非常時におけるリーダーシップの役割と、持ち物や選択肢による社会的な強弱を作らないことの重要性に関する意見を集約しています。参加者は、非常事態においても平等を重視し、他者の安全を考慮した行動が求められることを理解しています。また、組織運営における役員の役割や、運営に必要なビジネスツールの重要性についても言及されており、非常時における心の持ち方や準備の重要性が強調されています。","value":48,"parent":"0","density_rank_percentile":0.8},{"level":2,"id":"2_17","label":"情報の重要性と役立ち度に関する意識","takeaway":"このクラスタには、情報の価値や役立ち度に対する意識が集まっています。定期的に話題に上がることは、平和な状況にいる中での警鐘として機能し、気にかけるべき事柄を意識させる役割を果たしています。また、役に立つ情報を求める声や、実際に得た情報が興味深く役立ったという体験が共有されており、情報の重要性が強調されています。","value":6,"parent":"1_1","density_rank_percentile":0.98},{"level":2,"id":"2_28","label":"重要な知識や教訓を再確認するためのブックマーク","takeaway":"このクラスタには、過去に読んだ内容や教訓を再度確認し、心に刻むことの重要性を強調する意見が集まっています。利用者は、忘れがちな重要な情報を再度読み返すことで、知識を風化させず、未来に備える姿勢を持っています。また、必読の内容や名記事をブックマークすることで、いつでもアクセスできるようにし、他者にも伝えたいという願いが表れています。","value":9,"parent":"1_1","density_rank_percentile":0.78},{"level":2,"id":"2_1","label":"防災教育と地域の自主防災力の強化","takeaway":"このクラスタには、防災訓練や自主防災の重要性、地域社会における防災教育の必要性に関する意見が集まっています。災害時の自己解決力や社会基盤の維持、そして防災に向けた取り組みの強化が求められており、特に学校や地域コミュニティにおける防災教育の充実が重要視されています。また、消防団員の寄稿文や災害マニュアルの活用方法についての提案も含まれており、実践的な防災対策の必要性が強調されています。","value":8,"parent":"1_2","density_rank_percentile":0.66},{"level":2,"id":"2_13","label":"貴重な体験とノウハウの共有の重要性","takeaway":"このクラスタには、貴重な体験やノウハウを共有することの重要性に関する意見が集まっています。参加者は、実際の経験から得られた教訓や情報が、他者にとって非常に価値があると認識しており、特に希少な事例や実務的な知見が後世に役立つべきだと考えています。また、体験談を通じて共通意識を形成し、ロジスティクスや他の分野での実践的な知識を広めることが重要であると強調されています。","value":12,"parent":"1_1","density_rank_percentile":0.58},{"level":2,"id":"2_35","label":"東日本大震災における避難所生活とその教訓","takeaway":"このクラスタには、岩手県陸前高田市での避難所生活に関する具体的な体験や教訓が集まっています。避難所での厳しい状況や運営の経験を通じて、被災者の生活の実態や支援の重要性が強調されています。また、地域の人々がどのように協力し合い、困難を乗り越えようとしたかが語られ、震災から得られた教訓が未来の災害対策に活かされるべきであることが示唆されています。","value":8,"parent":"1_3","density_rank_percentile":0.68},{"level":2,"id":"2_2","label":"必読記事の重要性と影響","takeaway":"このクラスタには、特に重要で定期的に読まなければならない記事に関する意見が集まっています。参加者は、これらの記事が自身の未来や成長に直接的な影響を与えると認識しており、必ず一度は目を通すべき内容であると強調しています。日付が示すように、過去の情報でも今後の自分にとって価値のある知識として位置づけられています。","value":6,"parent":"1_1","density_rank_percentile":0.14},{"level":2,"id":"2_19","label":"地震時の支援に関する意識と知識の重要性","takeaway":"このクラスタには、地震や災害時の支援に対する善意が必ずしも効果的でないことを認識し、正常性バイアスや災害に関する知識の重要性を強調する意見が集まっています。参加者は、関東での震災に備え、議論や思考を深める必要性を感じており、被災地以外の人々も体験談から学ぶことが重要であると考えています。また、支援活動は自己満足ではなく、知識を持った上での実践的な支援が求められることを理解しています。","value":8,"parent":"1_3","density_rank_percentile":0.88},{"level":2,"id":"2_27","label":"知識の保存と伝承の重要性","takeaway":"このクラスタには、知識やデータをローカルに保存し、後世に伝えることの重要性に関する意見が集まっています。特に、知恵や知見がマニュアルや教科書として永久保存されるべきであるという考えが強調されています。これにより、未来の世代が過去の知識を活用し、学び続けることができるという期待が表れています。","value":4,"parent":"1_1","density_rank_percentile":0.24},{"level":2,"id":"2_12","label":"読書の重要性とその価値","takeaway":"このクラスタには、読書の重要性やその価値についての意見が集まっています。日本国民全員に読んでほしいという強い願望や、後でじっくりと読みたいという思いが表現されており、読むことが人々にとってどれほど重要であるかを示しています。また、特定の作品や情報が家族やコミュニティにとって役立つものであることを強調し、読書を通じて得られる知識や教訓が、将来の備えや成長に繋がることを訴えています。","value":12,"parent":"1_1","density_rank_percentile":0.64},{"level":2,"id":"2_11","label":"判断と準備の重要性に関する意識","takeaway":"このクラスタには、現在進行形での判断や行動の重要性に関する意見が集まっています。特に、生死を分ける瞬間的な判断や、全員が揃った時に行うべき説明の必要性が強調されています。また、予測不可能な事態に備えるための準備や、他者の応用力に対する感心も見受けられ、明日は我が身という考え方が重要であるとの認識が共有されています。","value":5,"parent":"1_1","density_rank_percentile":0.9},{"level":2,"id":"2_29","label":"避難所運営における経験と教訓の共有","takeaway":"このクラスタには、避難所の立ち上げや運営に関する具体的な経験や教訓が集まっています。参加者は、避難所での心がけや工夫、困難な状況での支援の重要性を振り返り、他者への感謝の意を表明しています。また、個人の取り組みがもたらした成果や、避難所生活での配慮についての貴重なレポートが含まれており、次回の避難所運営に役立つ情報を共有する姿勢が見受けられます。","value":6,"parent":"1_3","density_rank_percentile":0.5},{"level":2,"id":"2_3","label":"炊き出し支援における食材管理とその影響","takeaway":"このクラスタには、炊き出し支援における食材の管理や使用に関する問題が集まっています。特に、事前に準備された食材が無断で使用されることに対する驚きや不満が表現されており、支援者と避難所側の間でのコミュニケーション不足や理解の欠如が浮き彫りになっています。また、炊き出し支援の意義やその実施方法についての疑問も含まれており、持続可能な支援の在り方について考える必要性が示唆されています。","value":15,"parent":"1_4","density_rank_percentile":0.96},{"level":2,"id":"2_24","label":"調味料の重要性と災害時の備え","takeaway":"このクラスタには、カップ麺や料理における調味料の重要性、特に災害時における備えに関する意見が集まっています。調味料は料理の味を決定づけるだけでなく、非常時においても役立つ情報や備蓄の必要性が強調されています。また、洋風の調味料が特に重要であることや、震災時に必要な調味料の具体例が挙げられ、調味料の選定や運営グッズの活用についての考察がなされています。","value":8,"parent":"1_4","density_rank_percentile":0.7},{"level":2,"id":"2_25","label":"記録と情報共有への感謝","takeaway":"このクラスタには、記録や情報共有に対する感謝の意を表す意見が集まっています。参加者は、貴重な情報が記録され、共有されることの重要性を認識し、その成果を称賛しています。また、短期間での組織化がもたらした成果に対しても高い評価が寄せられており、記録を通じて得られる知識や情報の価値が強調されています。","value":7,"parent":"1_1","density_rank_percentile":0.32},{"level":2,"id":"2_15","label":"避難時の意思表示と防災意識の重要性","takeaway":"このクラスタには、避難時における意思表示としての「避難しました」の札の重要性や、避難所でのルール作り、地域の防災意識の向上に関する意見が集まっています。特に、札が助けとなった具体的な体験や、事前に準備された防災対策の効果が強調されており、地域社会全体での防災意識の向上が求められています。また、避難の意思表示を周知することや、物資の運搬に関するエピソードも含まれ、実際の防災活動の重要性が示されています。","value":10,"parent":"1_3","density_rank_percentile":0.76},{"level":2,"id":"2_21","label":"有益な情報の共有と拡散の重要性","takeaway":"このクラスタには、情報やまとめの質の高さを称賛し、それを広めることの重要性を強調する意見が集まっています。参加者は、良いエントリや貴重な文章が多くの人に届くべきだと考えており、特に全世代にとって有益な内容であることを評価しています。また、適切な人がしっかりとまとめたことに対する感謝の意も表れています。","value":11,"parent":"1_1","density_rank_percentile":0.46},{"level":2,"id":"2_41","label":"支援の質とその影響に関する考察","takeaway":"このクラスタには、善意の支援が時に逆効果をもたらす可能性や、支援のあり方についての深い考察が集まっています。支援が本当に必要とされる場面で、思い込みや勝手な判断がもたらす問題に対する警鐘が鳴らされており、特に支援物資の偏りや情報不足が引き起こす困難についての意見が強調されています。また、無計画な支援行動がもたらす影響についても言及されており、善意だけでは解決できない現実を認識する重要性が示されています。","value":7,"parent":"1_4","density_rank_percentile":0.42},{"level":2,"id":"2_4","label":"貴重な知恵とノウハウの継承","takeaway":"このクラスタには、経験や実践から得られた貴重な知恵やノウハウを重視し、それを次世代に継承する重要性についての意見が集まっています。参加者は、知識を単なる情報としてではなく、命と引き換えに得た貴重な資源として捉え、自治会や社会全体に広めるべきだと考えています。また、マネジメントや実践的な知見が未来に役立つことを強調し、後世に伝えるべき価値ある情報として位置づけています。","value":7,"parent":"1_1","density_rank_percentile":0.8},{"level":2,"id":"2_22","label":"プライバシーと感情の複雑な関係","takeaway":"このクラスタには、プライバシーの欠如や感情の表現に関する深い考察が集まっています。参加者は、感情的な体験や表現がどのように人々に影響を与えるかを探求し、特に現代社会におけるプライバシーの重要性を強調しています。また、歴史的な視点からの考察も含まれ、過去の出来事が現代の価値観にどのように影響を与えているかについての疑問が提起されています。","value":6,"parent":"1_1","density_rank_percentile":0.74},{"level":2,"id":"2_9","label":"持ち物による強弱を作らない意識の重要性","takeaway":"このクラスタには、持ち物による強弱を作らないことに関する意識や考え方が集まっています。参加者は、持ち物による社会的な格差や優劣を避けることが重要であると認識し、その実践を心掛けています。また、持ち物の見える化や役得を無くすことに対する前向きな姿勢が見受けられ、持ち物に依存しない価値観の形成を目指しています。","value":9,"parent":"1_5","density_rank_percentile":0.28},{"level":2,"id":"2_7","label":"逃げない選択肢がもたらす危険性の認識","takeaway":"このクラスタには、逃げない選択肢が他人に危険を及ぼす可能性についての懸念が集まっています。特に、緊急時や危険な状況において、個人の選択が周囲の人々に影響を与えることを理解し、助ける側がその選択を尊重しつつも、他者の安全を考慮する必要性が強調されています。地震などの緊急事態においては、逃げる選択肢を持つことが重要であるとの意見も見受けられ、個人の選択と他者の安全のバランスを取ることが求められています。","value":8,"parent":"1_5","density_rank_percentile":0.08},{"level":2,"id":"2_33","label":"東日本大震災における体育館避難所の経験と課題","takeaway":"このクラスタには、東日本大震災の体育館避難所における具体的な出来事や感想、考察が集まっています。避難所での人々の支援や、子供の騒音に関する意見など、避難生活の中での課題や感情が表現されています。参加者は、震災時の避難所の運営や人々の相互支援の重要性を認識し、今後の災害時における避難所の改善点について考えを深めています。","value":5,"parent":"1_3","density_rank_percentile":0.06},{"level":2,"id":"2_38","label":"家庭内のストレスと安全確認の重要性","takeaway":"このクラスタには、家庭内でのストレスや安全に関する状況が集まっています。文章からは、ストレスの存在が示唆されており、また、ガス漏れの確認や夜間のトイレ利用に関する記述があり、家庭の安全を確保するための行動が強調されています。これにより、家庭内の安心感やストレスの軽減が重要であることが示されています。","value":3,"parent":"1_4","density_rank_percentile":0.2},{"level":2,"id":"2_6","label":"震災後の避難所運営に関する考察と記録の重要性","takeaway":"このクラスタには、地震発生後の避難所運営に関する具体的な行動や考え方、そしてそれらを記録することの重要性についての意見が集まっています。震災時の避難所運営に感心したという声や、万が一の参考になる情報を求める姿勢が見受けられ、避難所運営の改善や次回の災害に備えるための知識の蓄積が強調されています。","value":3,"parent":"1_3","density_rank_percentile":0.1},{"level":2,"id":"2_42","label":"質の高い記事の重要性と広報の必要性","takeaway":"このクラスタには、記事の質や内容の深さ、そしてそれを広く伝えることの重要性に関する意見が集まっています。良い記事は詳細で深い情報を提供し、読者に価値をもたらすべきであるという考えが強調されています。また、素晴らしい記事をより多くの人に届けるためには、大手メディアでの取り上げが必要であるという期待が表れています。","value":3,"parent":"1_1","density_rank_percentile":0.3},{"level":2,"id":"2_20","label":"震災経験を活かした防災・復興への期待","takeaway":"このクラスタには、阪神大震災や中越地震、東日本大震災などの経験を通じて得られた知見や意見が集まっています。参加者は、過去の震災からの教訓が現在の防災や復興にどのように活かされているかに注目し、改善された点や支援の重要性を評価しています。また、震災経験者からの具体的な意見や情報が、今後の災害対策において貴重な資源であることを認識し、感謝の意を示しています。","value":5,"parent":"1_3","density_rank_percentile":0.12},{"level":2,"id":"2_46","label":"地域防災における町内会の重要性と課題","takeaway":"このクラスタには、地域の防災対策に関する懸念や意見が集まっています。特に、火炎旋風の危険性や町内会の機能不全が指摘されており、地域住民が防災に対して不安を感じていることが強調されています。また、地方部の人口規模が成り立つ要因についても言及されており、地域の安全を確保するためには町内会の役割が重要であるという認識が共有されています。","value":4,"parent":"1_2","density_rank_percentile":0.56},{"level":2,"id":"2_8","label":"避難所運営に関する教訓と改善点の共有","takeaway":"このクラスタには、避難所運営や被災者支援に関する具体的な経験や意見が集まっています。避難所での困難や心がけ、炊き出し支援の教訓、運営の改善点などが議論されており、特に大規模災害に備えるための貴重な情報が含まれています。参加者は、避難生活の大変さやボランティア活動の注意点についての有用な情報を共有し、避難所運営のノウハウを整理し、継続的に読み継がれるべき内容としての重要性を強調しています。","value":10,"parent":"1_3","density_rank_percentile":0.92},{"level":2,"id":"2_23","label":"災害時の情報共有とコミュニティ支援の重要性","takeaway":"このクラスタには、災害時における情報共有の重要性や、コミュニティとの関わり方に関する意見が集まっています。特に、救急隊や避難情報の認識が必要であり、被災時だけでなく、日常的な組織内での情報共有の在り方が重要視されています。また、災害支援を指揮する機関の設立に対する懸念や、避難所での知見の活用が強調されており、隣接する災害の情報がどれほど重要であるかも示されています。これらの意見は、災害時の効果的な支援体制の構築に向けた洞察を提供しています。","value":5,"parent":"1_2","density_rank_percentile":0.48},{"level":2,"id":"2_37","label":"災害経験から学ぶ防災と支援の重要性","takeaway":"このクラスタには、災害後の体験者の言葉や意見が集まり、被災者の冷静な体験談が防災策としての重要性を強調しています。体験者の視点から得られるアドバイスや教訓は、支援者としての立場を強化し、未来の災害に備えるための貴重な資源とされています。参加者は、過去の経験を通じて得た知識を活かし、定期的に振り返ることで、より効果的な支援を行うことを目指しています。","value":6,"parent":"1_3","density_rank_percentile":0.22},{"level":2,"id":"2_31","label":"支援に対する困難と不満","takeaway":"このクラスタには、支援を受ける際のコミュニケーションの難しさや、支援内容に対する不満が集まっています。特に、支援を求める際に自分の困難を正確に伝えることができず、全てに困っているという感情が強調されています。また、ボランティアによる情報の伝達ミスや、炊き出し支援に対する感謝と同時に感じる辛さや不快感が表現されています。支援の質や内容に対する期待と現実のギャップが、受け手の心情に影響を与えていることが伺えます。","value":5,"parent":"1_4","density_rank_percentile":0.54},{"level":2,"id":"2_36","label":"組織づくりにおける役員の役割とビジネスツールの重要性","takeaway":"このクラスタには、組織の初期段階における役員の行動や人間関係の構築に関する意見が集まっています。特に、役員が最初に物資を取らないことや、強弱を作らないことが組織の健全な発展に寄与するという考えが強調されています。また、ビジネスツールの重要性や、事前の備えが不十分でも創造性を発揮してやりくりする姿勢が評価されている点も特徴的です。これにより、組織の基盤を築くための戦略的なアプローチが示されています。","value":5,"parent":"1_5","density_rank_percentile":0.84},{"level":2,"id":"2_47","label":"広く読まれることを望む意識","takeaway":"このクラスタには、新聞や記事を通じて多くの人に情報を届けたいという強い願望が集まっています。発信者は、読者がその内容を通じて幸せを感じたり、意識を高めたりすることを期待しており、広く読まれることが重要であると考えています。記事の内容が多くの人に影響を与えることを望む姿勢が見受けられます。","value":5,"parent":"1_1","density_rank_percentile":0.16},{"level":2,"id":"2_32","label":"災害時の支援と高齢者の安全意識","takeaway":"このクラスタには、災害時における支援活動や高齢者の安全に関する懸念が集まっています。スタッフの叫びや炊き出しの際の迷惑行為に対する警鐘が鳴らされており、特に足腰の弱い人や寝たきりの人を助ける消防団員や近所の人々の命の危険についての意識が強調されています。また、高齢者が自らの安全を軽視することが、周囲の人々にどのような影響を及ぼすかを考える必要性が訴えられています。","value":5,"parent":"1_5","density_rank_percentile":0.82},{"level":2,"id":"2_14","label":"危機管理における信頼性と管理体制の重要性","takeaway":"このクラスタには、危機管理における国や自治体の信頼性、配布物の管理体制、そして管理者の存在がもたらす影響に関する意見が集まっています。特に、物資の配布においては、管理者がいることで整然とした運営が可能となり、混乱を避けることができるという点が強調されています。被災地の事例を通じて、適切な管理体制の重要性が示されており、自治体の危機管理室においては、信頼性の向上と管理者の配置が求められています。","value":4,"parent":"1_2","density_rank_percentile":0.36},{"level":2,"id":"2_49","label":"災害対策と防災士の重要性","takeaway":"このクラスタには、災害時の教科書や防災士の役割、減災に向けた取り組みの重要性に関する意見が集まっています。災害時に命を守るための具体的な対策や、個人や地域、行政が協力して減災に取り組む必要性が強調されています。また、防災士という資格の重要性や国家資格化の必要性についても言及されており、地域社会における防災の専門家としての役割が期待されています。","value":10,"parent":"1_2","density_rank_percentile":0.86},{"level":2,"id":"2_43","label":"混乱を乗り越えるための組織的リーダーシップの重要性","takeaway":"このクラスタには、緊急時や混乱した状況において、安定した組織作りや秩序の維持が重要であるという意見が集まっています。コミュニティ内でのリーダーシップや組織的な取り組みが、集団の秩序を形成するために必要な努力を強調しており、混乱の中でも冷静に対応できる人材の存在が、コミュニティの安定に寄与することを示唆しています。","value":3,"parent":"1_2","density_rank_percentile":0.38},{"level":2,"id":"2_16","label":"ボランティア活動の質と責任に関する再考","takeaway":"このクラスタには、炊き出しボランティアに関する意見や、善意が時に支援を必要とする人々を追い込む可能性についての重要な視点が集まっています。ボランティア活動が独善的にならないよう、実績や教育を重視した公認制度やガイドラインの必要性が強調されており、ボランティア自身が自らの行動を見直すことが求められています。これにより、より効果的で持続可能な支援が実現されることを目指しています。","value":7,"parent":"1_4","density_rank_percentile":0.4},{"level":2,"id":"2_45","label":"将来の参考にするための情報収集","takeaway":"このグループには、今後の意思決定や計画に役立てるために情報を集めたり、考えを整理したりする意図が表れています。参加者は、現在の情報を将来的に活用することを目的としており、具体的な行動には至っていないものの、知識やアイデアを蓄積することに価値を見出しています。","value":3,"parent":"1_1","density_rank_percentile":0.04},{"level":2,"id":"2_5","label":"信頼性と透明性が求められる支援活動","takeaway":"このクラスタには、支援団体や募金活動に対する信頼性や透明性の重要性に関する意見が集まっています。情報が守られない支援や、あくどい団体への警戒が示されており、支援する側にも適切なマニュアルや基準が必要であることが強調されています。また、信頼できる団体への募金や迅速な行動の重要性が述べられ、支援活動の質を向上させるための具体的な提案が含まれています。","value":6,"parent":"1_4","density_rank_percentile":0.18},{"level":2,"id":"2_30","label":"感情と経験の共有による理解の深化","takeaway":"このクラスタには、辛い体験や感情に関する議論の重要性が強調されており、様々な人々の見解や経験を知ることが、理解を深めるために不可欠であるという意見が集まっています。迷惑な活動をする人々も、背景にはノウハウの欠如があるかもしれないという視点が示され、感情的な訴えがドラマ以上に重要であることが認識されています。多様な視点を持つことが、より良い理解と共感を生む鍵であると考えられています。","value":5,"parent":"1_1","density_rank_percentile":1},{"level":2,"id":"2_48","label":"非常時における平常心と役割の重要性","takeaway":"このクラスタには、非常事態における心の持ち方や役割の重要性についての懸念や考えが集まっています。参加者は、自分自身の能力や自信に対する不安を抱えつつ、平常時に培ったスキルや心構えが非常時においても重要であると認識しています。また、役員やリーダーシップの役得についての現実的な見解も示されており、役割に対する期待と現実のギャップについての思索が見受けられます。","value":6,"parent":"1_5","density_rank_percentile":0.72},{"level":2,"id":"2_40","label":"消防団の重要性と組織作りの必要性","takeaway":"このクラスタには、消防団の役割や組織作りの重要性に関する意見が集まっています。消防団は、災害時に迅速に対応するための実践的な知識を持ち、地域社会を守るために日常的に準備を整える必要があります。また、傾聴ボランティアに関する個人情報漏洩の懸念も示されており、組織としての信頼性や安全性の確保が求められています。全体として、消防団の活動が地域の安全に寄与していることへの感謝の意も表れています。","value":4,"parent":"1_2","density_rank_percentile":0.44},{"level":2,"id":"2_10","label":"地域コミュニティと自然災害への意識","takeaway":"このクラスタには、地域の特性やコミュニティの重要性、そして自然災害に対する意識が集まっています。地域のリーダーシップや経験の共有が必要であることが強調されており、特に都心と地方の違いが問題視されています。また、津波などの自然災害に対する直感的な感覚が日本人特有である可能性についても言及されており、地域の人々が持つ知識や経験が災害対策において重要であることが示唆されています。","value":6,"parent":"1_2","density_rank_percentile":0.94},{"level":2,"id":"2_34","label":"日本における組織運営の特性と管理者の重要性","takeaway":"このクラスタには、日本人の行動特性や組織運営における管理者の役割に関する意見が集まっています。特に、管理者がいないと整然と行動できないという文化的背景が強調されており、運営においては中心人物が必要であることが示されています。また、国家と企業の運営方法には違いがあるかもしれないが、それぞれの環境に応じた運営ノウハウが存在することが理解されており、違いがあっても良い理由として、各組織の目的や文化、環境に応じた柔軟なアプローチが求められることが挙げられています。","value":4,"parent":"1_5","density_rank_percentile":0.62},{"level":2,"id":"2_0","label":"非常時におけるリーダーシップと平等の重要性","takeaway":"このクラスタには、非常時におけるリーダーシップの重要性と、平等を重視する姿勢に関する意見が集まっています。特に、リーダーが私心なく行動することの難しさや、非常時における人々の行動の予測困難性についての考察が見られます。また、不公平に対する人々の反応や、平等を心掛けることの重要性が強調されており、非常時における人間の心理や行動に対する深い理解が示されています。","value":4,"parent":"1_5","density_rank_percentile":0.26},{"level":2,"id":"2_26","label":"運営キットの重要性と備蓄物資の提案","takeaway":"このクラスタには、HQの運営に必要な資材として名刺入れ、ノート、筆記具、マジックペン、模造紙、パソコンなどの運営キットを備蓄物資に加えるべきという意見が集まっています。これらの資材は、運営の効率を高めるために不可欠であり、また、尼やアスクルと連携して寄付を行うことで、資材の確保と運営支援の両方を実現することが期待されています。","value":3,"parent":"1_5","density_rank_percentile":0.6},{"level":2,"id":"2_44","label":"高齢者と慢性疾患患者の医療ニーズ","takeaway":"このクラスタには、高齢者や慢性疾患を抱える患者に対する医療的配慮や必要な支援に関する意見が集まっています。特に、激痛に苦しむ高齢者が抱える心理的な不安や、糖尿病や高血圧といった特定の健康状態に応じた医療的対応の重要性が強調されています。患者の状態に応じた適切な医療行為や物資の準備が、彼らの生活の質を向上させるために不可欠であるという認識が共有されています。","value":4,"parent":"1_5","density_rank_percentile":0.34},{"level":2,"id":"2_39","label":"小学校教育における実践的な学びの重要性","takeaway":"このクラスタには、小学校教育において実例を通じた学びの重要性を強調する意見が集まっています。特に「生活科」においては、道徳的な教えよりも具体的な事例を通じて子どもたちが実践的な知識やスキルを身につけることが教育に適していると考えられています。教育現場での実践的なアプローチが、子どもたちの理解を深め、興味を引き出すことに寄与するという期待が表れています。","value":3,"parent":"1_1","density_rank_percentile":0.52},{"level":2,"id":"2_18","label":"地震体験と避難所生活のリアルな証言","takeaway":"このクラスタには、地震の発生から避難所での生活に至るまでの当事者の生の声が集まっています。語られる内容は、臨場感にあふれ、実際の体験に基づいたリアルな感情や状況が描写されています。これにより、地震の影響や避難所での生活の厳しさ、またはコミュニティの絆などが伝わり、他者に対する理解や共感を促す重要な情報源となっています。","value":1,"parent":"1_3","density_rank_percentile":0.02}],"comments":{},"propertyMap":{},"translations":{},"overview":"各クラスタの意見は、情報の価値や地域防災力の強化、震災からの教訓、炊き出し支援の質、非常時の平等とリーダーシップに焦点を当てています。情報共有や地域の協力が防災において重要であることが強調され、過去の経験を活かした防災意識の向上が求められています。また、支援活動の質や持続可能性、非常時における平等な行動の重要性も指摘されており、全体としてコミュニティの連携とリーダーシップの強化が必要とされています。","config":{"name":"a120d9b9-7212-472e-8c0d-391b299c07e5","input":"a120d9b9-7212-472e-8c0d-391b299c07e5","question":"人々は「東日本大震災、体育館避難所で起きたこと」を読んでどのように反応したか","intro":"このAIが作成したレポートは、東日本大震災、体育館避難所で起きたこと(https://synodos.jp/opinion/society/14462/)に対するはてなブックマークのコメントのデータに依拠している。\n分析対象となったデータの件数は264件で、これらのデータに対してOpenAI APIを用いて309件の意見（議論）を抽出し、クラスタリングを行った。\n","model":"gpt-4o-mini","is_pubcom":true,"extraction":{"prompt":"/system\nあなたは専門的なリサーチアシスタントで、整理された議論のデータセットを作成するお手伝いをする役割です。\n人工知能に関する公開協議を実施した状況を想定しています。一般市民から寄せられた議論の例を提示しますので、それらをより簡潔で読みやすい形に整理するお手伝いをお願いします。必要な場合は2つの別個の議論に分割することもできますが、多くの場合は1つの議論にまとめる方が望ましいでしょう。\n結果は整形されたJSON形式の文字列リストとして返してください。\n要約は必ず日本語で作成してください。\n\n/human\n\nAIテクノロジーは、そのライフサイクル全体における環境負荷を削減することに焦点を当てて開発されるべきです。\n\n/ai\n\n[\n\"AIテクノロジーの環境負荷削減に焦点を当てるべき\"\n]\n\n/human\n\nAIの能力、限界、倫理的考慮事項について、一般市民を教育する協調的な取り組みが必要です。\n\n/ai\n\n[\n\"AIの能力について一般市民を教育すべき\",\n\"AIの限界と倫理的考慮事項について一般市民を教育すべき\"\n]\n\n/human\n\nAIはスマートホームやビルのエネルギー効率と居住者の快適性を最適化できます。\n\n/ai\n\n[\n\"AIはスマートホームやビルのエネルギー効率と居住者の快適性を最適化できる\"\n]\n\n/human\n\nAIはエネルギーグリッドを最適化し、無駄や炭素排出を削減できます。\n\n/ai\n\n[\n\"AIはエネルギーグリッドを最適化して無駄と炭素排出を削減できる\"\n]\n","workers":30,"limit":264,"properties":[],"categories":{},"category_batch_size":5,"source_code":"$17","model":"gpt-4o-mini"},"hierarchical_clustering":{"cluster_nums":[5,50],"source_code":"$18"},"hierarchical_initial_labelling":{"prompt":"あなたはKJ法が得意なデータ分析者です。userのinputはグループに集まったラベルです。なぜそのラベルが一つのグループであるか解説して、それから表札をつけてください。\n出力はJSONとし、フォーマットは以下のサンプルを参考にしてください。\n\n# サンプルの入出力\n## 入力例\n最近、AIアシスタントが医療診断サポートの実用化に向けた具体的な成果を発表し、医療現場の未来に明るい希望が見えてきました。患者として、この技術進歩に感謝しています。\nAI医療支援システムが、学会でもしっかり議論されるようになり、開発者が医療従事者の本当のニーズに応える姿勢に期待しています。\n技術カンファレンスを通じて、AIエンジニアが医療分野に全力で取り組む姿勢が伝わってきます。具体的な応用事例を目にするたび、医療の未来への希望が膨らみます。\n\n## 出力例\n{{\n   \"label\": \"医療現場を支えるAI技術の具体的応用への期待\",\n   \"description\": \"このクラスタには、医療診断や患者支援など、実際の医療課題に対してAI技術が具体的かつ効果的に貢献する可能性を支持する前向きな意見が集まっています。利用者は、学会や技術カンファレンスを通じて、現場のニーズに即したAIソリューションや支援システムが実現されることを期待し、医療の未来の発展に向けた技術革新を応援しています。\"\n}}\n","sampling_num":30,"workers":30,"source_code":"$19","model":"gpt-4o-mini"},"hierarchical_merge_labelling":{"prompt":"分割されすぎたクラスタを統合する必要があるので、統合後の名称を考えて出力して。\n\n# 指示\n* 統合前のクラスタの名称・説明および統合後のクラスタに属するデータ点のサンプルを与えるので、これらに基づいて統合後のクラスタの名称を出力してください\n   * 統合後のクラスタ名において、統合前のクラスタ名をそのまま使うことは避けてください。\n* 出力例に記載したJSONのフォーマットに従って出力してください\n\n# サンプルの入出力\n## 入力例（クラスタラベル:説明文）\n- AI技術の環境影響に関する懸念: このクラスタは、AI技術の開発・運用に伴う環境負荷に対する批判的な意見を集約したものです。市民からは、大規模モデルの学習時のエネルギー消費や、データセンターの冷却システムによる環境負荷などに対する強い懸念が表明されています。\n- AI開発の持続可能性への疑問: このクラスタは、AI技術開発全般における持続可能性に対する疑問を示す意見をまとめたものです。エネルギー消費の増大や資源利用の効率性に疑問を持つ声が多く、より環境に配慮した技術開発アプローチを求める意見が特徴です。\n- AI運用の炭素排出量: このクラスタは、AIシステムの運用時における炭素排出量が予想以上に大きい点に対する懸念や不満を反映しています。クラウドサービスの利用拡大やモデル推論時のエネルギー消費、そしてそれに伴う環境への長期的影響が強調されています。\n## 出力例\n{{\n   \"label\": \"AI技術のエネルギー効率と環境持続可能性\",\n   \"description\": \"このクラスタは、AI技術の開発・運用における環境への影響と持続可能性に対する懸念を集約しています。市民は、技術革新の議論の中で、エネルギー効率と炭素排出削減を最優先すべきだとの期待と、現行のAI開発手法に対する環境面での改善要求を強く表明しており、より持続可能で環境に配慮したAI技術の発展を求める声が反映されています。\"\n}}\n","sampling_num":30,"workers":30,"source_code":"$1a","model":"gpt-4o-mini"},"hierarchical_overview":{"prompt":"/system \n\nあなたはシンクタンクで働く専門のリサーチアシスタントです。\nチームは特定のテーマに関してパブリック・コンサルテーションを実施し、異なる選択肢のクラスターを分析し始めています。\nこれからクラスターのリストとその簡単な分析が提供されます。\nあなたの仕事は、調査結果の簡潔な要約を返すことです。要約は非常に簡潔に（最大で1段落、最大4文）まとめ、無意味な言葉を避けてください。\n出力は日本語で行ってください。\n","source_code":"$1b","model":"gpt-4o-mini"},"hierarchical_aggregation":{"sampling_num":30,"hidden_properties":{},"source_code":"$1c"},"output_dir":"a120d9b9-7212-472e-8c0d-391b299c07e5","skip-interaction":true,"without-html":true,"embedding":{"model":"text-embedding-3-small","source_code":"import pandas as pd\nfrom tqdm import tqdm\n\nfrom services.llm import request_to_embed\n\n\ndef embedding(config):\n    model = config[\"embedding\"][\"model\"]\n\n    dataset = config[\"output_dir\"]\n    path = f\"outputs/{dataset}/embeddings.pkl\"\n    arguments = pd.read_csv(f\"outputs/{dataset}/args.csv\", usecols=[\"arg-id\", \"argument\"])\n    embeddings = []\n    batch_size = 1000\n    for i in tqdm(range(0, len(arguments), batch_size)):\n        args = arguments[\"argument\"].tolist()[i : i + batch_size]\n        embeds = request_to_embed(args, model)\n        embeddings.extend(embeds)\n    df = pd.DataFrame([{\"arg-id\": arguments.iloc[i][\"arg-id\"], \"embedding\": e} for i, e in enumerate(embeddings)])\n    df.to_pickle(path)\n"},"hierarchical_visualization":{"replacements":[],"source_code":"import subprocess\n\n\ndef hierarchical_visualization(config):\n    output_dir = config[\"output_dir\"]\n    cwd = \"../report\"\n    command = f\"REPORT={output_dir} npm run build\"\n\n    try:\n        process = subprocess.Popen(\n            command,\n            shell=True,\n            cwd=cwd,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            universal_newlines=True,\n        )\n        while True:\n            output_line = process.stdout.readline()\n            if output_line == \"\" and process.poll() is not None:\n                break\n            if output_line:\n                print(output_line.strip())\n        process.wait()\n        errors = process.stderr.read()\n        if errors:\n            print(\"Errors:\")\n            print(errors)\n    except subprocess.CalledProcessError as e:\n        print(\"Error: \", e)\n"},"plan":[{"step":"extraction","run":true,"reason":"not trace of previous run"},{"step":"embedding","run":true,"reason":"not trace of previous run"},{"step":"hierarchical_clustering","run":true,"reason":"not trace of previous run"},{"step":"hierarchical_initial_labelling","run":true,"reason":"not trace of previous run"},{"step":"hierarchical_merge_labelling","run":true,"reason":"not trace of previous run"},{"step":"hierarchical_overview","run":true,"reason":"not trace of previous run"},{"step":"hierarchical_aggregation","run":true,"reason":"not trace of previous run"},{"step":"hierarchical_visualization","run":false,"reason":"skipping html output"}],"status":"running","start_time":"2025-04-11T01:35:06.602743","completed_jobs":[{"step":"extraction","completed":"2025-04-11T01:35:34.458724","duration":27.84572,"params":{"prompt":"/system\nあなたは専門的なリサーチアシスタントで、整理された議論のデータセットを作成するお手伝いをする役割です。\n人工知能に関する公開協議を実施した状況を想定しています。一般市民から寄せられた議論の例を提示しますので、それらをより簡潔で読みやすい形に整理するお手伝いをお願いします。必要な場合は2つの別個の議論に分割することもできますが、多くの場合は1つの議論にまとめる方が望ましいでしょう。\n結果は整形されたJSON形式の文字列リストとして返してください。\n要約は必ず日本語で作成してください。\n\n/human\n\nAIテクノロジーは、そのライフサイクル全体における環境負荷を削減することに焦点を当てて開発されるべきです。\n\n/ai\n\n[\n\"AIテクノロジーの環境負荷削減に焦点を当てるべき\"\n]\n\n/human\n\nAIの能力、限界、倫理的考慮事項について、一般市民を教育する協調的な取り組みが必要です。\n\n/ai\n\n[\n\"AIの能力について一般市民を教育すべき\",\n\"AIの限界と倫理的考慮事項について一般市民を教育すべき\"\n]\n\n/human\n\nAIはスマートホームやビルのエネルギー効率と居住者の快適性を最適化できます。\n\n/ai\n\n[\n\"AIはスマートホームやビルのエネルギー効率と居住者の快適性を最適化できる\"\n]\n\n/human\n\nAIはエネルギーグリッドを最適化し、無駄や炭素排出を削減できます。\n\n/ai\n\n[\n\"AIはエネルギーグリッドを最適化して無駄と炭素排出を削減できる\"\n]\n","workers":30,"limit":264,"properties":[],"categories":{},"category_batch_size":5,"source_code":"$1d","model":"gpt-4o-mini"}},{"step":"embedding","completed":"2025-04-11T01:35:39.577405","duration":5.117898,"params":{"model":"text-embedding-3-small","source_code":"import pandas as pd\nfrom tqdm import tqdm\n\nfrom services.llm import request_to_embed\n\n\ndef embedding(config):\n    model = config[\"embedding\"][\"model\"]\n\n    dataset = config[\"output_dir\"]\n    path = f\"outputs/{dataset}/embeddings.pkl\"\n    arguments = pd.read_csv(f\"outputs/{dataset}/args.csv\", usecols=[\"arg-id\", \"argument\"])\n    embeddings = []\n    batch_size = 1000\n    for i in tqdm(range(0, len(arguments), batch_size)):\n        args = arguments[\"argument\"].tolist()[i : i + batch_size]\n        embeds = request_to_embed(args, model)\n        embeddings.extend(embeds)\n    df = pd.DataFrame([{\"arg-id\": arguments.iloc[i][\"arg-id\"], \"embedding\": e} for i, e in enumerate(embeddings)])\n    df.to_pickle(path)\n"}},{"step":"hierarchical_clustering","completed":"2025-04-11T01:35:49.168280","duration":9.589823,"params":{"cluster_nums":[5,50],"source_code":"$1e"}},{"step":"hierarchical_initial_labelling","completed":"2025-04-11T01:35:58.308205","duration":9.13919,"params":{"prompt":"あなたはKJ法が得意なデータ分析者です。userのinputはグループに集まったラベルです。なぜそのラベルが一つのグループであるか解説して、それから表札をつけてください。\n出力はJSONとし、フォーマットは以下のサンプルを参考にしてください。\n\n# サンプルの入出力\n## 入力例\n最近、AIアシスタントが医療診断サポートの実用化に向けた具体的な成果を発表し、医療現場の未来に明るい希望が見えてきました。患者として、この技術進歩に感謝しています。\nAI医療支援システムが、学会でもしっかり議論されるようになり、開発者が医療従事者の本当のニーズに応える姿勢に期待しています。\n技術カンファレンスを通じて、AIエンジニアが医療分野に全力で取り組む姿勢が伝わってきます。具体的な応用事例を目にするたび、医療の未来への希望が膨らみます。\n\n## 出力例\n{{\n   \"label\": \"医療現場を支えるAI技術の具体的応用への期待\",\n   \"description\": \"このクラスタには、医療診断や患者支援など、実際の医療課題に対してAI技術が具体的かつ効果的に貢献する可能性を支持する前向きな意見が集まっています。利用者は、学会や技術カンファレンスを通じて、現場のニーズに即したAIソリューションや支援システムが実現されることを期待し、医療の未来の発展に向けた技術革新を応援しています。\"\n}}\n","sampling_num":30,"workers":30,"source_code":"$1f","model":"gpt-4o-mini"}},{"step":"hierarchical_merge_labelling","completed":"2025-04-11T01:36:02.632166","duration":4.322491,"params":{"prompt":"分割されすぎたクラスタを統合する必要があるので、統合後の名称を考えて出力して。\n\n# 指示\n* 統合前のクラスタの名称・説明および統合後のクラスタに属するデータ点のサンプルを与えるので、これらに基づいて統合後のクラスタの名称を出力してください\n   * 統合後のクラスタ名において、統合前のクラスタ名をそのまま使うことは避けてください。\n* 出力例に記載したJSONのフォーマットに従って出力してください\n\n# サンプルの入出力\n## 入力例（クラスタラベル:説明文）\n- AI技術の環境影響に関する懸念: このクラスタは、AI技術の開発・運用に伴う環境負荷に対する批判的な意見を集約したものです。市民からは、大規模モデルの学習時のエネルギー消費や、データセンターの冷却システムによる環境負荷などに対する強い懸念が表明されています。\n- AI開発の持続可能性への疑問: このクラスタは、AI技術開発全般における持続可能性に対する疑問を示す意見をまとめたものです。エネルギー消費の増大や資源利用の効率性に疑問を持つ声が多く、より環境に配慮した技術開発アプローチを求める意見が特徴です。\n- AI運用の炭素排出量: このクラスタは、AIシステムの運用時における炭素排出量が予想以上に大きい点に対する懸念や不満を反映しています。クラウドサービスの利用拡大やモデル推論時のエネルギー消費、そしてそれに伴う環境への長期的影響が強調されています。\n## 出力例\n{{\n   \"label\": \"AI技術のエネルギー効率と環境持続可能性\",\n   \"description\": \"このクラスタは、AI技術の開発・運用における環境への影響と持続可能性に対する懸念を集約しています。市民は、技術革新の議論の中で、エネルギー効率と炭素排出削減を最優先すべきだとの期待と、現行のAI開発手法に対する環境面での改善要求を強く表明しており、より持続可能で環境に配慮したAI技術の発展を求める声が反映されています。\"\n}}\n","sampling_num":30,"workers":30,"source_code":"$20","model":"gpt-4o-mini"}},{"step":"hierarchical_overview","completed":"2025-04-11T01:36:05.656652","duration":3.023496,"params":{"prompt":"/system \n\nあなたはシンクタンクで働く専門のリサーチアシスタントです。\nチームは特定のテーマに関してパブリック・コンサルテーションを実施し、異なる選択肢のクラスターを分析し始めています。\nこれからクラスターのリストとその簡単な分析が提供されます。\nあなたの仕事は、調査結果の簡潔な要約を返すことです。要約は非常に簡潔に（最大で1段落、最大4文）まとめ、無意味な言葉を避けてください。\n出力は日本語で行ってください。\n","source_code":"$21","model":"gpt-4o-mini"}}],"lock_until":"2025-04-11T01:41:05.659556","current_job":"hierarchical_aggregation","current_job_started":"2025-04-11T01:36:05.659526","current_job_progress":null,"current_jop_tasks":null},"comment_num":264}}],["$","$L22",null,{"result":"$8:0:props:children:2:props:result"}],["$","$L12",null,{"w":"fit-content","mx":"auto","children":["$","$L6",null,{"href":"/","children":["$","$L7",null,{"variant":"outline","size":"md","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-chevron-left","children":[["$","path","1wnfg3",{"d":"m15 18-6-6 6-6"}],"$undefined"]}],"一覧へ戻る"]}]}]}],["$","$L23",null,{"my":12,"maxW":"750px","mx":"auto"}],["$","$L24",null,{"meta":"$8:0:props:children:0:props:meta"}]]}],["$","footer",null,{"children":["$","$L25",null,{"direction":{"base":"column","lg":"row"},"justify":"space-between","maxW":"800px","mx":"auto","children":[["$","$L26",null,{"gap":5,"justify":"center","align":"center","children":[["$","$L14",null,{"fontWeight":"bold","fontSize":"lg","children":"テスト環境"}],false,false]}],["$","$L26",null,{"justify":"center","children":["$","$L27",null,{"placement":"bottom","children":[["$","$L28",null,{}],["$","$L29",null,{"children":["$","$L14",null,{"className":"textLink","cursor":"pointer","children":"デジタル民主主義2030プロジェクトについて"}]}],["$","$L2a",null,{"disabled":false,"container":"$undefined","children":["$","$L2b",null,{"padding":"$undefined","children":["$","$L2c",null,{"ref":"$undefined","roundedTop":"md","p":5,"asChild":false,"children":[["$","$L2d",null,{"children":["$","$L2e",null,{"fontSize":"2xl","fontWeight":"bold","textAlign":"center","className":"gradientColor","children":"デジタル民主主義2030プロジェクト"}]}],["$","$L2f",null,{"textAlign":"center","children":[["$","$L12",null,{"mb":8,"maxW":"700px","mx":"auto","children":[["$","$L13",null,{"size":"lg","mb":2,"textAlign":"center","children":"プロジェクトについて"}],["$","$L14",null,{"children":"2030年には、情報技術により民主主義のあり方はアップデートされており、一人ひとりの声が政治・行政に届き、適切に合意形成・政策反映されていくような社会が当たり前になる──そんな未来を目指して立ち上げられたのがデジタル民主主義2030プロジェクトです。 AIやデジタル技術の進化により、これまで不可能だった新しい形の市民参加や政策運営が可能になるはずだという信念に基づいています。"}],["$","$L6",null,{"href":"https://dd2030.org","target":"_blank","rel":"noreferrer noopener","children":["$","$L26",null,{"justify":"center","mt":2,"children":[["$","$L14",null,{"className":"textLink","children":"プロジェクトについての詳細はこちら"}],["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-external-link","children":[["$","path","1q9fwt",{"d":"M15 3h6v6"}],["$","path","gplh6r",{"d":"M10 14 21 3"}],["$","path","a6xqqp",{"d":"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}],"$undefined"]}]]}]}]]}],["$","$L12",null,{"mb":8,"maxW":"700px","mx":"auto","children":[["$","$L13",null,{"size":"lg","mb":2,"textAlign":"center","children":"免責"}],["$","$L14",null,{"mb":2,"children":"このレポート内容に関する質問や意見はレポート発行責任者へお問い合わせください。"}],["$","$L14",null,{"children":"大規模言語モデル（LLM）にはバイアスがあり、信頼性の低い結果を生成することが知られています。私たちはこれらの問題を軽減する方法に積極的に取り組んでいますが、現段階ではいかなる保証も提供することはできません。特に重要な決定を下す際は、本アプリの出力結果のみに依存せず、必ず内容を検証してください。"}]]}],["$","$L12",null,{"mb":8,"maxW":"700px","mx":"auto","children":[["$","$L13",null,{"size":"lg","mb":2,"textAlign":"center","children":"謝辞"}],["$","$L14",null,{"children":["このプロジェクトは"," ",["$","a",null,{"className":"textLink","href":"https://ai.objectives.institute/","target":"_blank","rel":"noreferrer","children":"AI Objectives Institute"}]," ","が開発した"," ",["$","a",null,{"className":"textLink","href":"https://github.com/AIObjectives/talk-to-the-city-reports","target":"_blank","rel":"noreferrer","children":"Talk to the City"}]," ","を参考に開発されています。",["$","br",null,{}],"ライセンスに基づいてソースコードを一部活用し、機能追加や改善を実施しています。"]}]]}],["$","$L30",null,{"children":["$","$L7",null,{"variant":"outline","children":"閉じる"}]}]]}]]}]}]}]]}]}]]}]}]]
b:null
f:[["$","title","0",{"children":"人々は「東日本大震災、体育館避難所で起きたこと」を読んでどのように反応したか - テスト環境"}],["$","meta","1",{"name":"description","content":"各クラスタの意見は、情報の価値や地域防災力の強化、震災からの教訓、炊き出し支援の質、非常時の平等とリーダーシップに焦点を当てています。情報共有や地域の協力が防災において重要であることが強調され、過去の経験を活かした防災意識の向上が求められています。また、支援活動の質や持続可能性、非常時における平等な行動の重要性も指摘されており、全体としてコミュニティの連携とリーダーシップの強化が必要とされています。"}],["$","meta","2",{"property":"og:title","content":"人々は「東日本大震災、体育館避難所で起きたこと」を読んでどのように反応したか - テスト環境"}],["$","meta","3",{"property":"og:description","content":"各クラスタの意見は、情報の価値や地域防災力の強化、震災からの教訓、炊き出し支援の質、非常時の平等とリーダーシップに焦点を当てています。情報共有や地域の協力が防災において重要であることが強調され、過去の経験を活かした防災意識の向上が求められています。また、支援活動の質や持続可能性、非常時における平等な行動の重要性も指摘されており、全体としてコミュニティの連携とリーダーシップの強化が必要とされています。"}],["$","meta","4",{"property":"og:image","content":"http://localhost:3000/a120d9b9-7212-472e-8c0d-391b299c07e5/opengraph-image.png"}],["$","meta","5",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","6",{"name":"twitter:title","content":"人々は「東日本大震災、体育館避難所で起きたこと」を読んでどのように反応したか - テスト環境"}],["$","meta","7",{"name":"twitter:description","content":"各クラスタの意見は、情報の価値や地域防災力の強化、震災からの教訓、炊き出し支援の質、非常時の平等とリーダーシップに焦点を当てています。情報共有や地域の協力が防災において重要であることが強調され、過去の経験を活かした防災意識の向上が求められています。また、支援活動の質や持続可能性、非常時における平等な行動の重要性も指摘されており、全体としてコミュニティの連携とリーダーシップの強化が必要とされています。"}],["$","meta","8",{"name":"twitter:image","content":"http://localhost:3000/a120d9b9-7212-472e-8c0d-391b299c07e5/opengraph-image.png"}]]
